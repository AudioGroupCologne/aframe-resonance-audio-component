/*! For license information please see aframe-resonance-audio-component.min.js.LICENSE.txt */
(() => {
  var A = {
      "./node_modules/resonance-audio/build/resonance-audio.js": function (A) {
        var t;
        (t = function () {
          return (function (A) {
            var t = {};

            function e(i) {
              if (t[i]) return t[i].exports;
              var n = (t[i] = {
                i,
                l: !1,
                exports: {},
              });
              return (
                A[i].call(n.exports, n, n.exports, e), (n.l = !0), n.exports
              );
            }
            return (
              (e.m = A),
              (e.c = t),
              (e.d = function (A, t, i) {
                e.o(A, t) ||
                  Object.defineProperty(A, t, {
                    configurable: !1,
                    enumerable: !0,
                    get: i,
                  });
              }),
              (e.n = function (A) {
                var t =
                  A && A.__esModule
                    ? function () {
                        return A.default;
                      }
                    : function () {
                        return A;
                      };
                return e.d(t, "a", t), t;
              }),
              (e.o = function (A, t) {
                return Object.prototype.hasOwnProperty.call(A, t);
              }),
              (e.p = ""),
              e((e.s = 10))
            );
          })([
            function (A, t, e) {
              "use strict";

              function i() {}
              (i.DEFAULT_SOURCE_GAIN = 1),
                (i.LISTENER_MAX_OUTSIDE_ROOM_DISTANCE = 1),
                (i.SOURCE_MAX_OUTSIDE_ROOM_DISTANCE = 1),
                (i.DEFAULT_SOURCE_DISTANCE = 1),
                (i.DEFAULT_POSITION = [0, 0, 0]),
                (i.DEFAULT_FORWARD = [0, 0, -1]),
                (i.DEFAULT_UP = [0, 1, 0]),
                (i.DEFAULT_RIGHT = [1, 0, 0]),
                (i.DEFAULT_SPEED_OF_SOUND = 343),
                (i.ATTENUATION_ROLLOFFS = ["logarithmic", "linear", "none"]),
                (i.DEFAULT_ATTENUATION_ROLLOFF = "logarithmic"),
                (i.DEFAULT_MIN_DISTANCE = 1),
                (i.DEFAULT_MAX_DISTANCE = 1e3),
                (i.DEFAULT_DIRECTIVITY_ALPHA = 0),
                (i.DEFAULT_DIRECTIVITY_SHARPNESS = 1),
                (i.DEFAULT_AZIMUTH = 0),
                (i.DEFAULT_ELEVATION = 0),
                (i.DEFAULT_AMBISONIC_ORDER = 1),
                (i.DEFAULT_SOURCE_WIDTH = 0),
                (i.DEFAULT_REFLECTION_MAX_DURATION = 0.5),
                (i.DEFAULT_REFLECTION_CUTOFF_FREQUENCY = 6400),
                (i.DEFAULT_REFLECTION_COEFFICIENTS = {
                  left: 0,
                  right: 0,
                  front: 0,
                  back: 0,
                  down: 0,
                  up: 0,
                }),
                (i.DEFAULT_REFLECTION_MIN_DISTANCE = 1),
                (i.DEFAULT_ROOM_DIMENSIONS = {
                  width: 0,
                  height: 0,
                  depth: 0,
                }),
                (i.DEFAULT_REFLECTION_MULTIPLIER = 1),
                (i.DEFAULT_REVERB_BANDWIDTH = 1),
                (i.DEFAULT_REVERB_DURATION_MULTIPLIER = 1),
                (i.DEFAULT_REVERB_PREDELAY = 1.5),
                (i.DEFAULT_REVERB_TAIL_ONSET = 3.8),
                (i.DEFAULT_REVERB_GAIN = 0.01),
                (i.DEFAULT_REVERB_MAX_DURATION = 3),
                (i.DEFAULT_REVERB_FREQUENCY_BANDS = [
                  31.25, 62.5, 125, 250, 500, 1e3, 2e3, 4e3, 8e3,
                ]),
                (i.NUMBER_REVERB_FREQUENCY_BANDS =
                  i.DEFAULT_REVERB_FREQUENCY_BANDS.length),
                (i.DEFAULT_REVERB_DURATIONS = new Float32Array(
                  i.NUMBER_REVERB_FREQUENCY_BANDS
                )),
                (i.ROOM_MATERIAL_COEFFICIENTS = {
                  transparent: [1, 1, 1, 1, 1, 1, 1, 1, 1],
                  "acoustic-ceiling-tiles": [
                    0.672, 0.675, 0.7, 0.66, 0.72, 0.92, 0.88, 0.75, 1,
                  ],
                  "brick-bare": [
                    0.03, 0.03, 0.03, 0.03, 0.03, 0.04, 0.05, 0.07, 0.14,
                  ],
                  "brick-painted": [
                    0.006, 0.007, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.06,
                  ],
                  "concrete-block-coarse": [
                    0.36, 0.36, 0.36, 0.44, 0.31, 0.29, 0.39, 0.25, 0.5,
                  ],
                  "concrete-block-painted": [
                    0.092, 0.09, 0.1, 0.05, 0.06, 0.07, 0.09, 0.08, 0.16,
                  ],
                  "curtain-heavy": [
                    0.073, 0.106, 0.14, 0.35, 0.55, 0.72, 0.7, 0.65, 1,
                  ],
                  "fiber-glass-insulation": [
                    0.193, 0.22, 0.22, 0.82, 0.99, 0.99, 0.99, 0.99, 1,
                  ],
                  "glass-thin": [
                    0.18, 0.169, 0.18, 0.06, 0.04, 0.03, 0.02, 0.02, 0.04,
                  ],
                  "glass-thick": [
                    0.35, 0.35, 0.35, 0.25, 0.18, 0.12, 0.07, 0.04, 0.08,
                  ],
                  grass: [0.05, 0.05, 0.15, 0.25, 0.4, 0.55, 0.6, 0.6, 0.6],
                  "linoleum-on-concrete": [
                    0.02, 0.02, 0.02, 0.03, 0.03, 0.03, 0.03, 0.02, 0.04,
                  ],
                  marble: [
                    0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.04,
                  ],
                  metal: [
                    0.03, 0.035, 0.04, 0.04, 0.05, 0.05, 0.05, 0.07, 0.09,
                  ],
                  "parquet-on-concrete": [
                    0.028, 0.03, 0.04, 0.04, 0.07, 0.06, 0.06, 0.07, 0.14,
                  ],
                  "plaster-rough": [
                    0.017, 0.018, 0.02, 0.03, 0.04, 0.05, 0.04, 0.03, 0.06,
                  ],
                  "plaster-smooth": [
                    0.011, 0.012, 0.013, 0.015, 0.02, 0.03, 0.04, 0.05, 0.1,
                  ],
                  "plywood-panel": [
                    0.4, 0.34, 0.28, 0.22, 0.17, 0.09, 0.1, 0.11, 0.22,
                  ],
                  "polished-concrete-or-tile": [
                    0.008, 0.008, 0.01, 0.01, 0.015, 0.02, 0.02, 0.02, 0.04,
                  ],
                  "sheet-rock": [
                    0.29, 0.279, 0.29, 0.1, 0.05, 0.04, 0.07, 0.09, 0.18,
                  ],
                  "water-or-ice-surface": [
                    0.006, 0.006, 0.008, 0.008, 0.013, 0.015, 0.02, 0.025, 0.05,
                  ],
                  "wood-ceiling": [
                    0.15, 0.147, 0.15, 0.11, 0.1, 0.07, 0.06, 0.07, 0.14,
                  ],
                  "wood-panel": [
                    0.28, 0.28, 0.28, 0.22, 0.17, 0.09, 0.1, 0.11, 0.22,
                  ],
                  uniform: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
                }),
                (i.DEFAULT_ROOM_MATERIALS = {
                  left: "transparent",
                  right: "transparent",
                  front: "transparent",
                  back: "transparent",
                  down: "transparent",
                  up: "transparent",
                }),
                (i.NUMBER_REFLECTION_AVERAGING_BANDS = 3),
                (i.ROOM_STARTING_AVERAGING_BAND = 4),
                (i.ROOM_MIN_VOLUME = 1e-4),
                (i.ROOM_AIR_ABSORPTION_COEFFICIENTS = [
                  6e-4, 6e-4, 7e-4, 8e-4, 0.001, 0.0015, 0.0026, 0.006, 0.0207,
                ]),
                (i.ROOM_EYRING_CORRECTION_COEFFICIENT = 1.38),
                (i.TWO_PI = 6.28318530717959),
                (i.TWENTY_FOUR_LOG10 = 55.2620422318571),
                (i.LOG1000 = 6.90775527898214),
                (i.LOG2_DIV2 = 0.346573590279973),
                (i.DEGREES_TO_RADIANS = 0.017453292519943),
                (i.RADIANS_TO_DEGREES = 57.29577951308232),
                (i.EPSILON_FLOAT = 1e-8),
                (i.log = function () {
                  window.console.log.apply(window.console, [
                    "%c[ResonanceAudio]%c " +
                      Array.prototype.slice.call(arguments).join(" ") +
                      " %c(@" +
                      performance.now().toFixed(2) +
                      "ms)",
                    "background: #BBDEFB; color: #FF5722; font-weight: 700",
                    "font-weight: 400",
                    "color: #AAA",
                  ]);
                }),
                (i.normalizeVector = function (A) {
                  let e = Math.sqrt(A[0] * A[0] + A[1] * A[1] + A[2] * A[2]);
                  return (
                    e > t.EPSILON_FLOAT &&
                      ((e = 1 / e), (A[0] *= e), (A[1] *= e), (A[2] *= e)),
                    A
                  );
                }),
                (i.crossProduct = function (A, t) {
                  return [
                    A[1] * t[2] - A[2] * t[1],
                    A[2] * t[0] - A[0] * t[2],
                    A[0] * t[1] - A[1] * t[0],
                  ];
                }),
                (A.exports = i);
            },
            function (A, t, e) {
              "use strict";
              const i = e(3),
                n = e(0);

              function s(A, t) {
                null == t && (t = {}),
                  null == t.ambisonicOrder &&
                    (t.ambisonicOrder = n.DEFAULT_AMBISONIC_ORDER),
                  null == t.azimuth && (t.azimuth = n.DEFAULT_AZIMUTH),
                  null == t.elevation && (t.elevation = n.DEFAULT_ELEVATION),
                  null == t.sourceWidth &&
                    (t.sourceWidth = n.DEFAULT_SOURCE_WIDTH),
                  (this._context = A),
                  (this.input = A.createGain()),
                  (this._channelGain = []),
                  (this._merger = void 0),
                  (this.output = A.createGain()),
                  this.setAmbisonicOrder(t.ambisonicOrder),
                  (this._azimuth = t.azimuth),
                  (this._elevation = t.elevation),
                  this.setSourceWidth(t.sourceWidth);
              }
              (s.prototype.setAmbisonicOrder = function (A) {
                (this._ambisonicOrder = s.validateAmbisonicOrder(A)),
                  this.input.disconnect();
                for (let A = 0; A < this._channelGain.length; A++)
                  this._channelGain[A].disconnect();
                null != this._merger && this._merger.disconnect(),
                  delete this._channelGain,
                  delete this._merger;
                let t = (this._ambisonicOrder + 1) * (this._ambisonicOrder + 1);
                (this._merger = this._context.createChannelMerger(t)),
                  (this._channelGain = new Array(t));
                for (let A = 0; A < t; A++)
                  (this._channelGain[A] = this._context.createGain()),
                    this.input.connect(this._channelGain[A]),
                    this._channelGain[A].connect(this._merger, 0, A);
                this._merger.connect(this.output);
              }),
                (s.prototype.setDirection = function (A, t) {
                  (null == A || isNaN(A)) && (A = n.DEFAULT_AZIMUTH),
                    (null == t || isNaN(t)) && (t = n.DEFAULT_ELEVATION),
                    (this._azimuth = A),
                    (this._elevation = t),
                    (A = Math.round(A % 360)) < 0 && (A += 360),
                    (t = Math.round(Math.min(90, Math.max(-90, t))) + 90),
                    (this._channelGain[0].gain.value =
                      i.MAX_RE_WEIGHTS[this._spreadIndex][0]);
                  for (let e = 1; e <= this._ambisonicOrder; e++) {
                    let n = i.MAX_RE_WEIGHTS[this._spreadIndex][e];
                    for (let s = -e; s <= e; s++) {
                      let o = e * e + e + s,
                        r = (e * (e + 1)) / 2 + Math.abs(s) - 1,
                        a = i.SPHERICAL_HARMONICS[1][t][r];
                      if (0 != s) {
                        let t = i.SPHERICAL_HARMONICS_MAX_ORDER + s - 1;
                        s < 0 && (t = i.SPHERICAL_HARMONICS_MAX_ORDER + s),
                          (a *= i.SPHERICAL_HARMONICS[0][A][t]);
                      }
                      this._channelGain[o].gain.value = a * n;
                    }
                  }
                }),
                (s.prototype.setSourceWidth = function (A) {
                  (this._spreadIndex = Math.min(
                    359,
                    Math.max(0, Math.round(A))
                  )),
                    this.setDirection(this._azimuth, this._elevation);
                }),
                (s.validateAmbisonicOrder = function (A) {
                  return (
                    isNaN(A) || null == A
                      ? (n.log(
                          "Error: Invalid ambisonic order",
                          options.ambisonicOrder,
                          "\nUsing ambisonicOrder=1 instead."
                        ),
                        (A = 1))
                      : A < 1
                      ? (n.log(
                          "Error: Unable to render ambisonic order",
                          options.ambisonicOrder,
                          "(Min order is 1)",
                          "\nUsing min order instead."
                        ),
                        (A = 1))
                      : A > i.SPHERICAL_HARMONICS_MAX_ORDER &&
                        (n.log(
                          "Error: Unable to render ambisonic order",
                          options.ambisonicOrder,
                          "(Max order is",
                          i.SPHERICAL_HARMONICS_MAX_ORDER,
                          ")\nUsing max order instead."
                        ),
                        (options.ambisonicOrder =
                          i.SPHERICAL_HARMONICS_MAX_ORDER)),
                    A
                  );
                }),
                (A.exports = s);
            },
            function (A, t, e) {
              "use strict";
              const i = e(12),
                n = e(1),
                s = e(0);

              function o(A, t) {
                null == t && (t = {}),
                  null == t.ambisonicOrder &&
                    (t.ambisonicOrder = s.DEFAULT_AMBISONIC_ORDER),
                  null == t.position &&
                    (t.position = s.DEFAULT_POSITION.slice()),
                  null == t.forward && (t.forward = s.DEFAULT_FORWARD.slice()),
                  null == t.up && (t.up = s.DEFAULT_UP.slice()),
                  (this.position = new Float32Array(3)),
                  (this._tempMatrix3 = new Float32Array(9)),
                  (this._ambisonicOrder = n.validateAmbisonicOrder(
                    t.ambisonicOrder
                  )),
                  (this._context = A),
                  1 == this._ambisonicOrder
                    ? (this._renderer = i.Omnitone.createFOARenderer(A, {}))
                    : this._ambisonicOrder > 1 &&
                      (this._renderer = i.Omnitone.createHOARenderer(A, {
                        ambisonicOrder: this._ambisonicOrder,
                      })),
                  (this.input = A.createGain()),
                  (this.output = A.createGain()),
                  (this.ambisonicOutput = A.createGain());
                let e = this;
                this._renderer.initialize().then(function () {
                  e.input.connect(e._renderer.input),
                    e._ambisonicOrder > 1
                      ? e._renderer._hoaRotator.output.connect(
                          e.ambisonicOutput
                        )
                      : e._renderer._foaRotator.output.connect(
                          e.ambisonicOutput
                        ),
                    e._renderer.output.connect(e.output);
                }),
                  this.setOrientation(
                    t.forward[0],
                    t.forward[1],
                    t.forward[2],
                    t.up[0],
                    t.up[1],
                    t.up[2]
                  );
              }
              (o.prototype.setOrientation = function (A, t, e, i, n, o) {
                let r = s.crossProduct([A, t, e], [i, n, o]);
                (this._tempMatrix3[0] = r[0]),
                  (this._tempMatrix3[1] = r[1]),
                  (this._tempMatrix3[2] = r[2]),
                  (this._tempMatrix3[3] = i),
                  (this._tempMatrix3[4] = n),
                  (this._tempMatrix3[5] = o),
                  (this._tempMatrix3[6] = A),
                  (this._tempMatrix3[7] = t),
                  (this._tempMatrix3[8] = e),
                  this._renderer.setRotationMatrix3(this._tempMatrix3);
              }),
                (o.prototype.setFromMatrix = function (A) {
                  this._renderer.setRotationMatrix4(A.elements),
                    (this.position[0] = A.elements[12]),
                    (this.position[1] = A.elements[13]),
                    (this.position[2] = A.elements[14]);
                }),
                (A.exports = o);
            },
            function (A, t, e) {
              "use strict";
              (t.SPHERICAL_HARMONICS = [
                [
                  [0, 0, 0, 1, 1, 1],
                  [0.052336, 0.034899, 0.017452, 0.999848, 0.999391, 0.99863],
                  [0.104528, 0.069756, 0.034899, 0.999391, 0.997564, 0.994522],
                  [0.156434, 0.104528, 0.052336, 0.99863, 0.994522, 0.987688],
                  [0.207912, 0.139173, 0.069756, 0.997564, 0.990268, 0.978148],
                  [0.258819, 0.173648, 0.087156, 0.996195, 0.984808, 0.965926],
                  [0.309017, 0.207912, 0.104528, 0.994522, 0.978148, 0.951057],
                  [0.358368, 0.241922, 0.121869, 0.992546, 0.970296, 0.93358],
                  [0.406737, 0.275637, 0.139173, 0.990268, 0.961262, 0.913545],
                  [0.45399, 0.309017, 0.156434, 0.987688, 0.951057, 0.891007],
                  [0.5, 0.34202, 0.173648, 0.984808, 0.939693, 0.866025],
                  [0.544639, 0.374607, 0.190809, 0.981627, 0.927184, 0.838671],
                  [0.587785, 0.406737, 0.207912, 0.978148, 0.913545, 0.809017],
                  [0.62932, 0.438371, 0.224951, 0.97437, 0.898794, 0.777146],
                  [0.669131, 0.469472, 0.241922, 0.970296, 0.882948, 0.743145],
                  [0.707107, 0.5, 0.258819, 0.965926, 0.866025, 0.707107],
                  [0.743145, 0.529919, 0.275637, 0.961262, 0.848048, 0.669131],
                  [0.777146, 0.559193, 0.292372, 0.956305, 0.829038, 0.62932],
                  [0.809017, 0.587785, 0.309017, 0.951057, 0.809017, 0.587785],
                  [0.838671, 0.615661, 0.325568, 0.945519, 0.788011, 0.544639],
                  [0.866025, 0.642788, 0.34202, 0.939693, 0.766044, 0.5],
                  [0.891007, 0.669131, 0.358368, 0.93358, 0.743145, 0.45399],
                  [0.913545, 0.694658, 0.374607, 0.927184, 0.71934, 0.406737],
                  [0.93358, 0.71934, 0.390731, 0.920505, 0.694658, 0.358368],
                  [0.951057, 0.743145, 0.406737, 0.913545, 0.669131, 0.309017],
                  [0.965926, 0.766044, 0.422618, 0.906308, 0.642788, 0.258819],
                  [0.978148, 0.788011, 0.438371, 0.898794, 0.615661, 0.207912],
                  [0.987688, 0.809017, 0.45399, 0.891007, 0.587785, 0.156434],
                  [0.994522, 0.829038, 0.469472, 0.882948, 0.559193, 0.104528],
                  [0.99863, 0.848048, 0.48481, 0.87462, 0.529919, 0.052336],
                  [1, 0.866025, 0.5, 0.866025, 0.5, 0],
                  [0.99863, 0.882948, 0.515038, 0.857167, 0.469472, -0.052336],
                  [0.994522, 0.898794, 0.529919, 0.848048, 0.438371, -0.104528],
                  [0.987688, 0.913545, 0.544639, 0.838671, 0.406737, -0.156434],
                  [0.978148, 0.927184, 0.559193, 0.829038, 0.374607, -0.207912],
                  [0.965926, 0.939693, 0.573576, 0.819152, 0.34202, -0.258819],
                  [0.951057, 0.951057, 0.587785, 0.809017, 0.309017, -0.309017],
                  [0.93358, 0.961262, 0.601815, 0.798636, 0.275637, -0.358368],
                  [0.913545, 0.970296, 0.615661, 0.788011, 0.241922, -0.406737],
                  [0.891007, 0.978148, 0.62932, 0.777146, 0.207912, -0.45399],
                  [0.866025, 0.984808, 0.642788, 0.766044, 0.173648, -0.5],
                  [0.838671, 0.990268, 0.656059, 0.75471, 0.139173, -0.544639],
                  [0.809017, 0.994522, 0.669131, 0.743145, 0.104528, -0.587785],
                  [0.777146, 0.997564, 0.681998, 0.731354, 0.069756, -0.62932],
                  [0.743145, 0.999391, 0.694658, 0.71934, 0.034899, -0.669131],
                  [0.707107, 1, 0.707107, 0.707107, 0, -0.707107],
                  [0.669131, 0.999391, 0.71934, 0.694658, -0.034899, -0.743145],
                  [0.62932, 0.997564, 0.731354, 0.681998, -0.069756, -0.777146],
                  [
                    0.587785, 0.994522, 0.743145, 0.669131, -0.104528,
                    -0.809017,
                  ],
                  [0.544639, 0.990268, 0.75471, 0.656059, -0.139173, -0.838671],
                  [0.5, 0.984808, 0.766044, 0.642788, -0.173648, -0.866025],
                  [0.45399, 0.978148, 0.777146, 0.62932, -0.207912, -0.891007],
                  [
                    0.406737, 0.970296, 0.788011, 0.615661, -0.241922,
                    -0.913545,
                  ],
                  [0.358368, 0.961262, 0.798636, 0.601815, -0.275637, -0.93358],
                  [
                    0.309017, 0.951057, 0.809017, 0.587785, -0.309017,
                    -0.951057,
                  ],
                  [0.258819, 0.939693, 0.819152, 0.573576, -0.34202, -0.965926],
                  [
                    0.207912, 0.927184, 0.829038, 0.559193, -0.374607,
                    -0.978148,
                  ],
                  [
                    0.156434, 0.913545, 0.838671, 0.544639, -0.406737,
                    -0.987688,
                  ],
                  [
                    0.104528, 0.898794, 0.848048, 0.529919, -0.438371,
                    -0.994522,
                  ],
                  [0.052336, 0.882948, 0.857167, 0.515038, -0.469472, -0.99863],
                  [0, 0.866025, 0.866025, 0.5, -0.5, -1],
                  [-0.052336, 0.848048, 0.87462, 0.48481, -0.529919, -0.99863],
                  [
                    -0.104528, 0.829038, 0.882948, 0.469472, -0.559193,
                    -0.994522,
                  ],
                  [
                    -0.156434, 0.809017, 0.891007, 0.45399, -0.587785,
                    -0.987688,
                  ],
                  [
                    -0.207912, 0.788011, 0.898794, 0.438371, -0.615661,
                    -0.978148,
                  ],
                  [
                    -0.258819, 0.766044, 0.906308, 0.422618, -0.642788,
                    -0.965926,
                  ],
                  [
                    -0.309017, 0.743145, 0.913545, 0.406737, -0.669131,
                    -0.951057,
                  ],
                  [-0.358368, 0.71934, 0.920505, 0.390731, -0.694658, -0.93358],
                  [
                    -0.406737, 0.694658, 0.927184, 0.374607, -0.71934,
                    -0.913545,
                  ],
                  [-0.45399, 0.669131, 0.93358, 0.358368, -0.743145, -0.891007],
                  [-0.5, 0.642788, 0.939693, 0.34202, -0.766044, -0.866025],
                  [
                    -0.544639, 0.615661, 0.945519, 0.325568, -0.788011,
                    -0.838671,
                  ],
                  [
                    -0.587785, 0.587785, 0.951057, 0.309017, -0.809017,
                    -0.809017,
                  ],
                  [
                    -0.62932, 0.559193, 0.956305, 0.292372, -0.829038,
                    -0.777146,
                  ],
                  [
                    -0.669131, 0.529919, 0.961262, 0.275637, -0.848048,
                    -0.743145,
                  ],
                  [-0.707107, 0.5, 0.965926, 0.258819, -0.866025, -0.707107],
                  [
                    -0.743145, 0.469472, 0.970296, 0.241922, -0.882948,
                    -0.669131,
                  ],
                  [-0.777146, 0.438371, 0.97437, 0.224951, -0.898794, -0.62932],
                  [
                    -0.809017, 0.406737, 0.978148, 0.207912, -0.913545,
                    -0.587785,
                  ],
                  [
                    -0.838671, 0.374607, 0.981627, 0.190809, -0.927184,
                    -0.544639,
                  ],
                  [-0.866025, 0.34202, 0.984808, 0.173648, -0.939693, -0.5],
                  [
                    -0.891007, 0.309017, 0.987688, 0.156434, -0.951057,
                    -0.45399,
                  ],
                  [
                    -0.913545, 0.275637, 0.990268, 0.139173, -0.961262,
                    -0.406737,
                  ],
                  [
                    -0.93358, 0.241922, 0.992546, 0.121869, -0.970296,
                    -0.358368,
                  ],
                  [
                    -0.951057, 0.207912, 0.994522, 0.104528, -0.978148,
                    -0.309017,
                  ],
                  [
                    -0.965926, 0.173648, 0.996195, 0.087156, -0.984808,
                    -0.258819,
                  ],
                  [
                    -0.978148, 0.139173, 0.997564, 0.069756, -0.990268,
                    -0.207912,
                  ],
                  [
                    -0.987688, 0.104528, 0.99863, 0.052336, -0.994522,
                    -0.156434,
                  ],
                  [
                    -0.994522, 0.069756, 0.999391, 0.034899, -0.997564,
                    -0.104528,
                  ],
                  [
                    -0.99863, 0.034899, 0.999848, 0.017452, -0.999391,
                    -0.052336,
                  ],
                  [-1, 0, 1, 0, -1, -0],
                  [
                    -0.99863, -0.034899, 0.999848, -0.017452, -0.999391,
                    0.052336,
                  ],
                  [
                    -0.994522, -0.069756, 0.999391, -0.034899, -0.997564,
                    0.104528,
                  ],
                  [
                    -0.987688, -0.104528, 0.99863, -0.052336, -0.994522,
                    0.156434,
                  ],
                  [
                    -0.978148, -0.139173, 0.997564, -0.069756, -0.990268,
                    0.207912,
                  ],
                  [
                    -0.965926, -0.173648, 0.996195, -0.087156, -0.984808,
                    0.258819,
                  ],
                  [
                    -0.951057, -0.207912, 0.994522, -0.104528, -0.978148,
                    0.309017,
                  ],
                  [
                    -0.93358, -0.241922, 0.992546, -0.121869, -0.970296,
                    0.358368,
                  ],
                  [
                    -0.913545, -0.275637, 0.990268, -0.139173, -0.961262,
                    0.406737,
                  ],
                  [
                    -0.891007, -0.309017, 0.987688, -0.156434, -0.951057,
                    0.45399,
                  ],
                  [-0.866025, -0.34202, 0.984808, -0.173648, -0.939693, 0.5],
                  [
                    -0.838671, -0.374607, 0.981627, -0.190809, -0.927184,
                    0.544639,
                  ],
                  [
                    -0.809017, -0.406737, 0.978148, -0.207912, -0.913545,
                    0.587785,
                  ],
                  [
                    -0.777146, -0.438371, 0.97437, -0.224951, -0.898794,
                    0.62932,
                  ],
                  [
                    -0.743145, -0.469472, 0.970296, -0.241922, -0.882948,
                    0.669131,
                  ],
                  [-0.707107, -0.5, 0.965926, -0.258819, -0.866025, 0.707107],
                  [
                    -0.669131, -0.529919, 0.961262, -0.275637, -0.848048,
                    0.743145,
                  ],
                  [
                    -0.62932, -0.559193, 0.956305, -0.292372, -0.829038,
                    0.777146,
                  ],
                  [
                    -0.587785, -0.587785, 0.951057, -0.309017, -0.809017,
                    0.809017,
                  ],
                  [
                    -0.544639, -0.615661, 0.945519, -0.325568, -0.788011,
                    0.838671,
                  ],
                  [-0.5, -0.642788, 0.939693, -0.34202, -0.766044, 0.866025],
                  [
                    -0.45399, -0.669131, 0.93358, -0.358368, -0.743145,
                    0.891007,
                  ],
                  [
                    -0.406737, -0.694658, 0.927184, -0.374607, -0.71934,
                    0.913545,
                  ],
                  [
                    -0.358368, -0.71934, 0.920505, -0.390731, -0.694658,
                    0.93358,
                  ],
                  [
                    -0.309017, -0.743145, 0.913545, -0.406737, -0.669131,
                    0.951057,
                  ],
                  [
                    -0.258819, -0.766044, 0.906308, -0.422618, -0.642788,
                    0.965926,
                  ],
                  [
                    -0.207912, -0.788011, 0.898794, -0.438371, -0.615661,
                    0.978148,
                  ],
                  [
                    -0.156434, -0.809017, 0.891007, -0.45399, -0.587785,
                    0.987688,
                  ],
                  [
                    -0.104528, -0.829038, 0.882948, -0.469472, -0.559193,
                    0.994522,
                  ],
                  [-0.052336, -0.848048, 0.87462, -0.48481, -0.529919, 0.99863],
                  [-0, -0.866025, 0.866025, -0.5, -0.5, 1],
                  [
                    0.052336, -0.882948, 0.857167, -0.515038, -0.469472,
                    0.99863,
                  ],
                  [
                    0.104528, -0.898794, 0.848048, -0.529919, -0.438371,
                    0.994522,
                  ],
                  [
                    0.156434, -0.913545, 0.838671, -0.544639, -0.406737,
                    0.987688,
                  ],
                  [
                    0.207912, -0.927184, 0.829038, -0.559193, -0.374607,
                    0.978148,
                  ],
                  [
                    0.258819, -0.939693, 0.819152, -0.573576, -0.34202,
                    0.965926,
                  ],
                  [
                    0.309017, -0.951057, 0.809017, -0.587785, -0.309017,
                    0.951057,
                  ],
                  [
                    0.358368, -0.961262, 0.798636, -0.601815, -0.275637,
                    0.93358,
                  ],
                  [
                    0.406737, -0.970296, 0.788011, -0.615661, -0.241922,
                    0.913545,
                  ],
                  [0.45399, -0.978148, 0.777146, -0.62932, -0.207912, 0.891007],
                  [0.5, -0.984808, 0.766044, -0.642788, -0.173648, 0.866025],
                  [
                    0.544639, -0.990268, 0.75471, -0.656059, -0.139173,
                    0.838671,
                  ],
                  [
                    0.587785, -0.994522, 0.743145, -0.669131, -0.104528,
                    0.809017,
                  ],
                  [
                    0.62932, -0.997564, 0.731354, -0.681998, -0.069756,
                    0.777146,
                  ],
                  [
                    0.669131, -0.999391, 0.71934, -0.694658, -0.034899,
                    0.743145,
                  ],
                  [0.707107, -1, 0.707107, -0.707107, -0, 0.707107],
                  [0.743145, -0.999391, 0.694658, -0.71934, 0.034899, 0.669131],
                  [0.777146, -0.997564, 0.681998, -0.731354, 0.069756, 0.62932],
                  [
                    0.809017, -0.994522, 0.669131, -0.743145, 0.104528,
                    0.587785,
                  ],
                  [0.838671, -0.990268, 0.656059, -0.75471, 0.139173, 0.544639],
                  [0.866025, -0.984808, 0.642788, -0.766044, 0.173648, 0.5],
                  [0.891007, -0.978148, 0.62932, -0.777146, 0.207912, 0.45399],
                  [
                    0.913545, -0.970296, 0.615661, -0.788011, 0.241922,
                    0.406737,
                  ],
                  [0.93358, -0.961262, 0.601815, -0.798636, 0.275637, 0.358368],
                  [
                    0.951057, -0.951057, 0.587785, -0.809017, 0.309017,
                    0.309017,
                  ],
                  [0.965926, -0.939693, 0.573576, -0.819152, 0.34202, 0.258819],
                  [
                    0.978148, -0.927184, 0.559193, -0.829038, 0.374607,
                    0.207912,
                  ],
                  [
                    0.987688, -0.913545, 0.544639, -0.838671, 0.406737,
                    0.156434,
                  ],
                  [
                    0.994522, -0.898794, 0.529919, -0.848048, 0.438371,
                    0.104528,
                  ],
                  [0.99863, -0.882948, 0.515038, -0.857167, 0.469472, 0.052336],
                  [1, -0.866025, 0.5, -0.866025, 0.5, 0],
                  [0.99863, -0.848048, 0.48481, -0.87462, 0.529919, -0.052336],
                  [
                    0.994522, -0.829038, 0.469472, -0.882948, 0.559193,
                    -0.104528,
                  ],
                  [
                    0.987688, -0.809017, 0.45399, -0.891007, 0.587785,
                    -0.156434,
                  ],
                  [
                    0.978148, -0.788011, 0.438371, -0.898794, 0.615661,
                    -0.207912,
                  ],
                  [
                    0.965926, -0.766044, 0.422618, -0.906308, 0.642788,
                    -0.258819,
                  ],
                  [
                    0.951057, -0.743145, 0.406737, -0.913545, 0.669131,
                    -0.309017,
                  ],
                  [0.93358, -0.71934, 0.390731, -0.920505, 0.694658, -0.358368],
                  [
                    0.913545, -0.694658, 0.374607, -0.927184, 0.71934,
                    -0.406737,
                  ],
                  [0.891007, -0.669131, 0.358368, -0.93358, 0.743145, -0.45399],
                  [0.866025, -0.642788, 0.34202, -0.939693, 0.766044, -0.5],
                  [
                    0.838671, -0.615661, 0.325568, -0.945519, 0.788011,
                    -0.544639,
                  ],
                  [
                    0.809017, -0.587785, 0.309017, -0.951057, 0.809017,
                    -0.587785,
                  ],
                  [
                    0.777146, -0.559193, 0.292372, -0.956305, 0.829038,
                    -0.62932,
                  ],
                  [
                    0.743145, -0.529919, 0.275637, -0.961262, 0.848048,
                    -0.669131,
                  ],
                  [0.707107, -0.5, 0.258819, -0.965926, 0.866025, -0.707107],
                  [
                    0.669131, -0.469472, 0.241922, -0.970296, 0.882948,
                    -0.743145,
                  ],
                  [0.62932, -0.438371, 0.224951, -0.97437, 0.898794, -0.777146],
                  [
                    0.587785, -0.406737, 0.207912, -0.978148, 0.913545,
                    -0.809017,
                  ],
                  [
                    0.544639, -0.374607, 0.190809, -0.981627, 0.927184,
                    -0.838671,
                  ],
                  [0.5, -0.34202, 0.173648, -0.984808, 0.939693, -0.866025],
                  [
                    0.45399, -0.309017, 0.156434, -0.987688, 0.951057,
                    -0.891007,
                  ],
                  [
                    0.406737, -0.275637, 0.139173, -0.990268, 0.961262,
                    -0.913545,
                  ],
                  [
                    0.358368, -0.241922, 0.121869, -0.992546, 0.970296,
                    -0.93358,
                  ],
                  [
                    0.309017, -0.207912, 0.104528, -0.994522, 0.978148,
                    -0.951057,
                  ],
                  [
                    0.258819, -0.173648, 0.087156, -0.996195, 0.984808,
                    -0.965926,
                  ],
                  [
                    0.207912, -0.139173, 0.069756, -0.997564, 0.990268,
                    -0.978148,
                  ],
                  [
                    0.156434, -0.104528, 0.052336, -0.99863, 0.994522,
                    -0.987688,
                  ],
                  [
                    0.104528, -0.069756, 0.034899, -0.999391, 0.997564,
                    -0.994522,
                  ],
                  [
                    0.052336, -0.034899, 0.017452, -0.999848, 0.999391,
                    -0.99863,
                  ],
                  [0, -0, 0, -1, 1, -1],
                  [
                    -0.052336, 0.034899, -0.017452, -0.999848, 0.999391,
                    -0.99863,
                  ],
                  [
                    -0.104528, 0.069756, -0.034899, -0.999391, 0.997564,
                    -0.994522,
                  ],
                  [
                    -0.156434, 0.104528, -0.052336, -0.99863, 0.994522,
                    -0.987688,
                  ],
                  [
                    -0.207912, 0.139173, -0.069756, -0.997564, 0.990268,
                    -0.978148,
                  ],
                  [
                    -0.258819, 0.173648, -0.087156, -0.996195, 0.984808,
                    -0.965926,
                  ],
                  [
                    -0.309017, 0.207912, -0.104528, -0.994522, 0.978148,
                    -0.951057,
                  ],
                  [
                    -0.358368, 0.241922, -0.121869, -0.992546, 0.970296,
                    -0.93358,
                  ],
                  [
                    -0.406737, 0.275637, -0.139173, -0.990268, 0.961262,
                    -0.913545,
                  ],
                  [
                    -0.45399, 0.309017, -0.156434, -0.987688, 0.951057,
                    -0.891007,
                  ],
                  [-0.5, 0.34202, -0.173648, -0.984808, 0.939693, -0.866025],
                  [
                    -0.544639, 0.374607, -0.190809, -0.981627, 0.927184,
                    -0.838671,
                  ],
                  [
                    -0.587785, 0.406737, -0.207912, -0.978148, 0.913545,
                    -0.809017,
                  ],
                  [
                    -0.62932, 0.438371, -0.224951, -0.97437, 0.898794,
                    -0.777146,
                  ],
                  [
                    -0.669131, 0.469472, -0.241922, -0.970296, 0.882948,
                    -0.743145,
                  ],
                  [-0.707107, 0.5, -0.258819, -0.965926, 0.866025, -0.707107],
                  [
                    -0.743145, 0.529919, -0.275637, -0.961262, 0.848048,
                    -0.669131,
                  ],
                  [
                    -0.777146, 0.559193, -0.292372, -0.956305, 0.829038,
                    -0.62932,
                  ],
                  [
                    -0.809017, 0.587785, -0.309017, -0.951057, 0.809017,
                    -0.587785,
                  ],
                  [
                    -0.838671, 0.615661, -0.325568, -0.945519, 0.788011,
                    -0.544639,
                  ],
                  [-0.866025, 0.642788, -0.34202, -0.939693, 0.766044, -0.5],
                  [
                    -0.891007, 0.669131, -0.358368, -0.93358, 0.743145,
                    -0.45399,
                  ],
                  [
                    -0.913545, 0.694658, -0.374607, -0.927184, 0.71934,
                    -0.406737,
                  ],
                  [
                    -0.93358, 0.71934, -0.390731, -0.920505, 0.694658,
                    -0.358368,
                  ],
                  [
                    -0.951057, 0.743145, -0.406737, -0.913545, 0.669131,
                    -0.309017,
                  ],
                  [
                    -0.965926, 0.766044, -0.422618, -0.906308, 0.642788,
                    -0.258819,
                  ],
                  [
                    -0.978148, 0.788011, -0.438371, -0.898794, 0.615661,
                    -0.207912,
                  ],
                  [
                    -0.987688, 0.809017, -0.45399, -0.891007, 0.587785,
                    -0.156434,
                  ],
                  [
                    -0.994522, 0.829038, -0.469472, -0.882948, 0.559193,
                    -0.104528,
                  ],
                  [-0.99863, 0.848048, -0.48481, -0.87462, 0.529919, -0.052336],
                  [-1, 0.866025, -0.5, -0.866025, 0.5, 0],
                  [
                    -0.99863, 0.882948, -0.515038, -0.857167, 0.469472,
                    0.052336,
                  ],
                  [
                    -0.994522, 0.898794, -0.529919, -0.848048, 0.438371,
                    0.104528,
                  ],
                  [
                    -0.987688, 0.913545, -0.544639, -0.838671, 0.406737,
                    0.156434,
                  ],
                  [
                    -0.978148, 0.927184, -0.559193, -0.829038, 0.374607,
                    0.207912,
                  ],
                  [
                    -0.965926, 0.939693, -0.573576, -0.819152, 0.34202,
                    0.258819,
                  ],
                  [
                    -0.951057, 0.951057, -0.587785, -0.809017, 0.309017,
                    0.309017,
                  ],
                  [
                    -0.93358, 0.961262, -0.601815, -0.798636, 0.275637,
                    0.358368,
                  ],
                  [
                    -0.913545, 0.970296, -0.615661, -0.788011, 0.241922,
                    0.406737,
                  ],
                  [-0.891007, 0.978148, -0.62932, -0.777146, 0.207912, 0.45399],
                  [-0.866025, 0.984808, -0.642788, -0.766044, 0.173648, 0.5],
                  [
                    -0.838671, 0.990268, -0.656059, -0.75471, 0.139173,
                    0.544639,
                  ],
                  [
                    -0.809017, 0.994522, -0.669131, -0.743145, 0.104528,
                    0.587785,
                  ],
                  [
                    -0.777146, 0.997564, -0.681998, -0.731354, 0.069756,
                    0.62932,
                  ],
                  [
                    -0.743145, 0.999391, -0.694658, -0.71934, 0.034899,
                    0.669131,
                  ],
                  [-0.707107, 1, -0.707107, -0.707107, 0, 0.707107],
                  [
                    -0.669131, 0.999391, -0.71934, -0.694658, -0.034899,
                    0.743145,
                  ],
                  [
                    -0.62932, 0.997564, -0.731354, -0.681998, -0.069756,
                    0.777146,
                  ],
                  [
                    -0.587785, 0.994522, -0.743145, -0.669131, -0.104528,
                    0.809017,
                  ],
                  [
                    -0.544639, 0.990268, -0.75471, -0.656059, -0.139173,
                    0.838671,
                  ],
                  [-0.5, 0.984808, -0.766044, -0.642788, -0.173648, 0.866025],
                  [
                    -0.45399, 0.978148, -0.777146, -0.62932, -0.207912,
                    0.891007,
                  ],
                  [
                    -0.406737, 0.970296, -0.788011, -0.615661, -0.241922,
                    0.913545,
                  ],
                  [
                    -0.358368, 0.961262, -0.798636, -0.601815, -0.275637,
                    0.93358,
                  ],
                  [
                    -0.309017, 0.951057, -0.809017, -0.587785, -0.309017,
                    0.951057,
                  ],
                  [
                    -0.258819, 0.939693, -0.819152, -0.573576, -0.34202,
                    0.965926,
                  ],
                  [
                    -0.207912, 0.927184, -0.829038, -0.559193, -0.374607,
                    0.978148,
                  ],
                  [
                    -0.156434, 0.913545, -0.838671, -0.544639, -0.406737,
                    0.987688,
                  ],
                  [
                    -0.104528, 0.898794, -0.848048, -0.529919, -0.438371,
                    0.994522,
                  ],
                  [
                    -0.052336, 0.882948, -0.857167, -0.515038, -0.469472,
                    0.99863,
                  ],
                  [-0, 0.866025, -0.866025, -0.5, -0.5, 1],
                  [0.052336, 0.848048, -0.87462, -0.48481, -0.529919, 0.99863],
                  [
                    0.104528, 0.829038, -0.882948, -0.469472, -0.559193,
                    0.994522,
                  ],
                  [
                    0.156434, 0.809017, -0.891007, -0.45399, -0.587785,
                    0.987688,
                  ],
                  [
                    0.207912, 0.788011, -0.898794, -0.438371, -0.615661,
                    0.978148,
                  ],
                  [
                    0.258819, 0.766044, -0.906308, -0.422618, -0.642788,
                    0.965926,
                  ],
                  [
                    0.309017, 0.743145, -0.913545, -0.406737, -0.669131,
                    0.951057,
                  ],
                  [0.358368, 0.71934, -0.920505, -0.390731, -0.694658, 0.93358],
                  [
                    0.406737, 0.694658, -0.927184, -0.374607, -0.71934,
                    0.913545,
                  ],
                  [0.45399, 0.669131, -0.93358, -0.358368, -0.743145, 0.891007],
                  [0.5, 0.642788, -0.939693, -0.34202, -0.766044, 0.866025],
                  [
                    0.544639, 0.615661, -0.945519, -0.325568, -0.788011,
                    0.838671,
                  ],
                  [
                    0.587785, 0.587785, -0.951057, -0.309017, -0.809017,
                    0.809017,
                  ],
                  [
                    0.62932, 0.559193, -0.956305, -0.292372, -0.829038,
                    0.777146,
                  ],
                  [
                    0.669131, 0.529919, -0.961262, -0.275637, -0.848048,
                    0.743145,
                  ],
                  [0.707107, 0.5, -0.965926, -0.258819, -0.866025, 0.707107],
                  [
                    0.743145, 0.469472, -0.970296, -0.241922, -0.882948,
                    0.669131,
                  ],
                  [0.777146, 0.438371, -0.97437, -0.224951, -0.898794, 0.62932],
                  [
                    0.809017, 0.406737, -0.978148, -0.207912, -0.913545,
                    0.587785,
                  ],
                  [
                    0.838671, 0.374607, -0.981627, -0.190809, -0.927184,
                    0.544639,
                  ],
                  [0.866025, 0.34202, -0.984808, -0.173648, -0.939693, 0.5],
                  [
                    0.891007, 0.309017, -0.987688, -0.156434, -0.951057,
                    0.45399,
                  ],
                  [
                    0.913545, 0.275637, -0.990268, -0.139173, -0.961262,
                    0.406737,
                  ],
                  [
                    0.93358, 0.241922, -0.992546, -0.121869, -0.970296,
                    0.358368,
                  ],
                  [
                    0.951057, 0.207912, -0.994522, -0.104528, -0.978148,
                    0.309017,
                  ],
                  [
                    0.965926, 0.173648, -0.996195, -0.087156, -0.984808,
                    0.258819,
                  ],
                  [
                    0.978148, 0.139173, -0.997564, -0.069756, -0.990268,
                    0.207912,
                  ],
                  [
                    0.987688, 0.104528, -0.99863, -0.052336, -0.994522,
                    0.156434,
                  ],
                  [
                    0.994522, 0.069756, -0.999391, -0.034899, -0.997564,
                    0.104528,
                  ],
                  [
                    0.99863, 0.034899, -0.999848, -0.017452, -0.999391,
                    0.052336,
                  ],
                  [1, 0, -1, -0, -1, 0],
                  [
                    0.99863, -0.034899, -0.999848, 0.017452, -0.999391,
                    -0.052336,
                  ],
                  [
                    0.994522, -0.069756, -0.999391, 0.034899, -0.997564,
                    -0.104528,
                  ],
                  [
                    0.987688, -0.104528, -0.99863, 0.052336, -0.994522,
                    -0.156434,
                  ],
                  [
                    0.978148, -0.139173, -0.997564, 0.069756, -0.990268,
                    -0.207912,
                  ],
                  [
                    0.965926, -0.173648, -0.996195, 0.087156, -0.984808,
                    -0.258819,
                  ],
                  [
                    0.951057, -0.207912, -0.994522, 0.104528, -0.978148,
                    -0.309017,
                  ],
                  [
                    0.93358, -0.241922, -0.992546, 0.121869, -0.970296,
                    -0.358368,
                  ],
                  [
                    0.913545, -0.275637, -0.990268, 0.139173, -0.961262,
                    -0.406737,
                  ],
                  [
                    0.891007, -0.309017, -0.987688, 0.156434, -0.951057,
                    -0.45399,
                  ],
                  [0.866025, -0.34202, -0.984808, 0.173648, -0.939693, -0.5],
                  [
                    0.838671, -0.374607, -0.981627, 0.190809, -0.927184,
                    -0.544639,
                  ],
                  [
                    0.809017, -0.406737, -0.978148, 0.207912, -0.913545,
                    -0.587785,
                  ],
                  [
                    0.777146, -0.438371, -0.97437, 0.224951, -0.898794,
                    -0.62932,
                  ],
                  [
                    0.743145, -0.469472, -0.970296, 0.241922, -0.882948,
                    -0.669131,
                  ],
                  [0.707107, -0.5, -0.965926, 0.258819, -0.866025, -0.707107],
                  [
                    0.669131, -0.529919, -0.961262, 0.275637, -0.848048,
                    -0.743145,
                  ],
                  [
                    0.62932, -0.559193, -0.956305, 0.292372, -0.829038,
                    -0.777146,
                  ],
                  [
                    0.587785, -0.587785, -0.951057, 0.309017, -0.809017,
                    -0.809017,
                  ],
                  [
                    0.544639, -0.615661, -0.945519, 0.325568, -0.788011,
                    -0.838671,
                  ],
                  [0.5, -0.642788, -0.939693, 0.34202, -0.766044, -0.866025],
                  [
                    0.45399, -0.669131, -0.93358, 0.358368, -0.743145,
                    -0.891007,
                  ],
                  [
                    0.406737, -0.694658, -0.927184, 0.374607, -0.71934,
                    -0.913545,
                  ],
                  [
                    0.358368, -0.71934, -0.920505, 0.390731, -0.694658,
                    -0.93358,
                  ],
                  [
                    0.309017, -0.743145, -0.913545, 0.406737, -0.669131,
                    -0.951057,
                  ],
                  [
                    0.258819, -0.766044, -0.906308, 0.422618, -0.642788,
                    -0.965926,
                  ],
                  [
                    0.207912, -0.788011, -0.898794, 0.438371, -0.615661,
                    -0.978148,
                  ],
                  [
                    0.156434, -0.809017, -0.891007, 0.45399, -0.587785,
                    -0.987688,
                  ],
                  [
                    0.104528, -0.829038, -0.882948, 0.469472, -0.559193,
                    -0.994522,
                  ],
                  [0.052336, -0.848048, -0.87462, 0.48481, -0.529919, -0.99863],
                  [0, -0.866025, -0.866025, 0.5, -0.5, -1],
                  [
                    -0.052336, -0.882948, -0.857167, 0.515038, -0.469472,
                    -0.99863,
                  ],
                  [
                    -0.104528, -0.898794, -0.848048, 0.529919, -0.438371,
                    -0.994522,
                  ],
                  [
                    -0.156434, -0.913545, -0.838671, 0.544639, -0.406737,
                    -0.987688,
                  ],
                  [
                    -0.207912, -0.927184, -0.829038, 0.559193, -0.374607,
                    -0.978148,
                  ],
                  [
                    -0.258819, -0.939693, -0.819152, 0.573576, -0.34202,
                    -0.965926,
                  ],
                  [
                    -0.309017, -0.951057, -0.809017, 0.587785, -0.309017,
                    -0.951057,
                  ],
                  [
                    -0.358368, -0.961262, -0.798636, 0.601815, -0.275637,
                    -0.93358,
                  ],
                  [
                    -0.406737, -0.970296, -0.788011, 0.615661, -0.241922,
                    -0.913545,
                  ],
                  [
                    -0.45399, -0.978148, -0.777146, 0.62932, -0.207912,
                    -0.891007,
                  ],
                  [-0.5, -0.984808, -0.766044, 0.642788, -0.173648, -0.866025],
                  [
                    -0.544639, -0.990268, -0.75471, 0.656059, -0.139173,
                    -0.838671,
                  ],
                  [
                    -0.587785, -0.994522, -0.743145, 0.669131, -0.104528,
                    -0.809017,
                  ],
                  [
                    -0.62932, -0.997564, -0.731354, 0.681998, -0.069756,
                    -0.777146,
                  ],
                  [
                    -0.669131, -0.999391, -0.71934, 0.694658, -0.034899,
                    -0.743145,
                  ],
                  [-0.707107, -1, -0.707107, 0.707107, -0, -0.707107],
                  [
                    -0.743145, -0.999391, -0.694658, 0.71934, 0.034899,
                    -0.669131,
                  ],
                  [
                    -0.777146, -0.997564, -0.681998, 0.731354, 0.069756,
                    -0.62932,
                  ],
                  [
                    -0.809017, -0.994522, -0.669131, 0.743145, 0.104528,
                    -0.587785,
                  ],
                  [
                    -0.838671, -0.990268, -0.656059, 0.75471, 0.139173,
                    -0.544639,
                  ],
                  [-0.866025, -0.984808, -0.642788, 0.766044, 0.173648, -0.5],
                  [
                    -0.891007, -0.978148, -0.62932, 0.777146, 0.207912,
                    -0.45399,
                  ],
                  [
                    -0.913545, -0.970296, -0.615661, 0.788011, 0.241922,
                    -0.406737,
                  ],
                  [
                    -0.93358, -0.961262, -0.601815, 0.798636, 0.275637,
                    -0.358368,
                  ],
                  [
                    -0.951057, -0.951057, -0.587785, 0.809017, 0.309017,
                    -0.309017,
                  ],
                  [
                    -0.965926, -0.939693, -0.573576, 0.819152, 0.34202,
                    -0.258819,
                  ],
                  [
                    -0.978148, -0.927184, -0.559193, 0.829038, 0.374607,
                    -0.207912,
                  ],
                  [
                    -0.987688, -0.913545, -0.544639, 0.838671, 0.406737,
                    -0.156434,
                  ],
                  [
                    -0.994522, -0.898794, -0.529919, 0.848048, 0.438371,
                    -0.104528,
                  ],
                  [
                    -0.99863, -0.882948, -0.515038, 0.857167, 0.469472,
                    -0.052336,
                  ],
                  [-1, -0.866025, -0.5, 0.866025, 0.5, -0],
                  [-0.99863, -0.848048, -0.48481, 0.87462, 0.529919, 0.052336],
                  [
                    -0.994522, -0.829038, -0.469472, 0.882948, 0.559193,
                    0.104528,
                  ],
                  [
                    -0.987688, -0.809017, -0.45399, 0.891007, 0.587785,
                    0.156434,
                  ],
                  [
                    -0.978148, -0.788011, -0.438371, 0.898794, 0.615661,
                    0.207912,
                  ],
                  [
                    -0.965926, -0.766044, -0.422618, 0.906308, 0.642788,
                    0.258819,
                  ],
                  [
                    -0.951057, -0.743145, -0.406737, 0.913545, 0.669131,
                    0.309017,
                  ],
                  [-0.93358, -0.71934, -0.390731, 0.920505, 0.694658, 0.358368],
                  [
                    -0.913545, -0.694658, -0.374607, 0.927184, 0.71934,
                    0.406737,
                  ],
                  [-0.891007, -0.669131, -0.358368, 0.93358, 0.743145, 0.45399],
                  [-0.866025, -0.642788, -0.34202, 0.939693, 0.766044, 0.5],
                  [
                    -0.838671, -0.615661, -0.325568, 0.945519, 0.788011,
                    0.544639,
                  ],
                  [
                    -0.809017, -0.587785, -0.309017, 0.951057, 0.809017,
                    0.587785,
                  ],
                  [
                    -0.777146, -0.559193, -0.292372, 0.956305, 0.829038,
                    0.62932,
                  ],
                  [
                    -0.743145, -0.529919, -0.275637, 0.961262, 0.848048,
                    0.669131,
                  ],
                  [-0.707107, -0.5, -0.258819, 0.965926, 0.866025, 0.707107],
                  [
                    -0.669131, -0.469472, -0.241922, 0.970296, 0.882948,
                    0.743145,
                  ],
                  [-0.62932, -0.438371, -0.224951, 0.97437, 0.898794, 0.777146],
                  [
                    -0.587785, -0.406737, -0.207912, 0.978148, 0.913545,
                    0.809017,
                  ],
                  [
                    -0.544639, -0.374607, -0.190809, 0.981627, 0.927184,
                    0.838671,
                  ],
                  [-0.5, -0.34202, -0.173648, 0.984808, 0.939693, 0.866025],
                  [
                    -0.45399, -0.309017, -0.156434, 0.987688, 0.951057,
                    0.891007,
                  ],
                  [
                    -0.406737, -0.275637, -0.139173, 0.990268, 0.961262,
                    0.913545,
                  ],
                  [
                    -0.358368, -0.241922, -0.121869, 0.992546, 0.970296,
                    0.93358,
                  ],
                  [
                    -0.309017, -0.207912, -0.104528, 0.994522, 0.978148,
                    0.951057,
                  ],
                  [
                    -0.258819, -0.173648, -0.087156, 0.996195, 0.984808,
                    0.965926,
                  ],
                  [
                    -0.207912, -0.139173, -0.069756, 0.997564, 0.990268,
                    0.978148,
                  ],
                  [
                    -0.156434, -0.104528, -0.052336, 0.99863, 0.994522,
                    0.987688,
                  ],
                  [
                    -0.104528, -0.069756, -0.034899, 0.999391, 0.997564,
                    0.994522,
                  ],
                  [
                    -0.052336, -0.034899, -0.017452, 0.999848, 0.999391,
                    0.99863,
                  ],
                ],
                [
                  [-1, -0, 1, -0, 0, -1, -0, 0, -0],
                  [
                    -0.999848, 0.017452, 0.999543, -0.030224, 264e-6, -0.999086,
                    0.042733, -59e-5, 4e-6,
                  ],
                  [
                    -0.999391, 0.034899, 0.998173, -0.060411, 0.001055,
                    -0.996348, 0.085356, -0.002357, 34e-6,
                  ],
                  [
                    -0.99863, 0.052336, 0.995891, -0.090524, 0.002372,
                    -0.991791, 0.127757, -0.005297, 113e-6,
                  ],
                  [
                    -0.997564, 0.069756, 0.992701, -0.120527, 0.004214,
                    -0.985429, 0.169828, -0.0094, 268e-6,
                  ],
                  [
                    -0.996195, 0.087156, 0.988606, -0.150384, 0.006578,
                    -0.977277, 0.21146, -0.014654, 523e-6,
                  ],
                  [
                    -0.994522, 0.104528, 0.983611, -0.180057, 0.009462,
                    -0.967356, 0.252544, -0.021043, 903e-6,
                  ],
                  [
                    -0.992546, 0.121869, 0.977722, -0.209511, 0.012862,
                    -0.955693, 0.292976, -0.028547, 0.001431,
                  ],
                  [
                    -0.990268, 0.139173, 0.970946, -0.238709, 0.016774,
                    -0.942316, 0.332649, -0.037143, 0.002131,
                  ],
                  [
                    -0.987688, 0.156434, 0.963292, -0.267617, 0.021193,
                    -0.927262, 0.371463, -0.046806, 0.003026,
                  ],
                  [
                    -0.984808, 0.173648, 0.954769, -0.296198, 0.026114,
                    -0.910569, 0.409317, -0.057505, 0.00414,
                  ],
                  [
                    -0.981627, 0.190809, 0.945388, -0.324419, 0.03153,
                    -0.892279, 0.446114, -0.069209, 0.005492,
                  ],
                  [
                    -0.978148, 0.207912, 0.935159, -0.352244, 0.037436,
                    -0.872441, 0.481759, -0.08188, 0.007105,
                  ],
                  [
                    -0.97437, 0.224951, 0.924096, -0.379641, 0.043823,
                    -0.851105, 0.516162, -0.095481, 0.008999,
                  ],
                  [
                    -0.970296, 0.241922, 0.912211, -0.406574, 0.050685,
                    -0.828326, 0.549233, -0.109969, 0.011193,
                  ],
                  [
                    -0.965926, 0.258819, 0.899519, -0.433013, 0.058013,
                    -0.804164, 0.580889, -0.1253, 0.013707,
                  ],
                  [
                    -0.961262, 0.275637, 0.886036, -0.458924, 0.065797,
                    -0.77868, 0.61105, -0.141427, 0.016556,
                  ],
                  [
                    -0.956305, 0.292372, 0.871778, -0.484275, 0.074029,
                    -0.75194, 0.639639, -0.158301, 0.019758,
                  ],
                  [
                    -0.951057, 0.309017, 0.856763, -0.509037, 0.082698,
                    -0.724012, 0.666583, -0.175868, 0.023329,
                  ],
                  [
                    -0.945519, 0.325568, 0.841008, -0.533178, 0.091794,
                    -0.694969, 0.691816, -0.194075, 0.027281,
                  ],
                  [
                    -0.939693, 0.34202, 0.824533, -0.55667, 0.101306, -0.664885,
                    0.715274, -0.212865, 0.03163,
                  ],
                  [
                    -0.93358, 0.358368, 0.807359, -0.579484, 0.111222,
                    -0.633837, 0.736898, -0.23218, 0.036385,
                  ],
                  [
                    -0.927184, 0.374607, 0.789505, -0.601592, 0.121529,
                    -0.601904, 0.756637, -0.25196, 0.041559,
                  ],
                  [
                    -0.920505, 0.390731, 0.770994, -0.622967, 0.132217,
                    -0.569169, 0.774442, -0.272143, 0.04716,
                  ],
                  [
                    -0.913545, 0.406737, 0.751848, -0.643582, 0.143271,
                    -0.535715, 0.79027, -0.292666, 0.053196,
                  ],
                  [
                    -0.906308, 0.422618, 0.732091, -0.663414, 0.154678,
                    -0.501627, 0.804083, -0.313464, 0.059674,
                  ],
                  [
                    -0.898794, 0.438371, 0.711746, -0.682437, 0.166423,
                    -0.466993, 0.81585, -0.334472, 0.066599,
                  ],
                  [
                    -0.891007, 0.45399, 0.690839, -0.700629, 0.178494,
                    -0.431899, 0.825544, -0.355623, 0.073974,
                  ],
                  [
                    -0.882948, 0.469472, 0.669395, -0.717968, 0.190875,
                    -0.396436, 0.833145, -0.376851, 0.081803,
                  ],
                  [
                    -0.87462, 0.48481, 0.647439, -0.734431, 0.203551, -0.360692,
                    0.838638, -0.398086, 0.090085,
                  ],
                  [
                    -0.866025, 0.5, 0.625, -0.75, 0.216506, -0.32476, 0.842012,
                    -0.419263, 0.098821,
                  ],
                  [
                    -0.857167, 0.515038, 0.602104, -0.764655, 0.229726,
                    -0.288728, 0.843265, -0.440311, 0.108009,
                  ],
                  [
                    -0.848048, 0.529919, 0.578778, -0.778378, 0.243192,
                    -0.252688, 0.842399, -0.461164, 0.117644,
                  ],
                  [
                    -0.838671, 0.544639, 0.555052, -0.791154, 0.256891,
                    -0.21673, 0.839422, -0.481753, 0.127722,
                  ],
                  [
                    -0.829038, 0.559193, 0.530955, -0.802965, 0.270803,
                    -0.180944, 0.834347, -0.502011, 0.138237,
                  ],
                  [
                    -0.819152, 0.573576, 0.506515, -0.813798, 0.284914,
                    -0.14542, 0.827194, -0.521871, 0.149181,
                  ],
                  [
                    -0.809017, 0.587785, 0.481763, -0.823639, 0.299204,
                    -0.110246, 0.817987, -0.541266, 0.160545,
                  ],
                  [
                    -0.798636, 0.601815, 0.456728, -0.832477, 0.313658,
                    -0.075508, 0.806757, -0.560132, 0.172317,
                  ],
                  [
                    -0.788011, 0.615661, 0.431441, -0.840301, 0.328257,
                    -0.041294, 0.793541, -0.578405, 0.184487,
                  ],
                  [
                    -0.777146, 0.62932, 0.405934, -0.847101, 0.342984,
                    -0.007686, 0.778379, -0.596021, 0.19704,
                  ],
                  [
                    -0.766044, 0.642788, 0.380236, -0.852869, 0.357821,
                    0.025233, 0.761319, -0.612921, 0.209963,
                  ],
                  [
                    -0.75471, 0.656059, 0.35438, -0.857597, 0.372749, 0.057383,
                    0.742412, -0.629044, 0.223238,
                  ],
                  [
                    -0.743145, 0.669131, 0.328396, -0.861281, 0.387751,
                    0.088686, 0.721714, -0.644334, 0.23685,
                  ],
                  [
                    -0.731354, 0.681998, 0.302317, -0.863916, 0.402807,
                    0.119068, 0.699288, -0.658734, 0.250778,
                  ],
                  [
                    -0.71934, 0.694658, 0.276175, -0.865498, 0.417901, 0.148454,
                    0.675199, -0.67219, 0.265005,
                  ],
                  [
                    -0.707107, 0.707107, 0.25, -0.866025, 0.433013, 0.176777,
                    0.649519, -0.684653, 0.279508,
                  ],
                  [
                    -0.694658, 0.71934, 0.223825, -0.865498, 0.448125, 0.203969,
                    0.622322, -0.696073, 0.294267,
                  ],
                  [
                    -0.681998, 0.731354, 0.197683, -0.863916, 0.463218,
                    0.229967, 0.593688, -0.706405, 0.309259,
                  ],
                  [
                    -0.669131, 0.743145, 0.171604, -0.861281, 0.478275,
                    0.254712, 0.5637, -0.715605, 0.324459,
                  ],
                  [
                    -0.656059, 0.75471, 0.14562, -0.857597, 0.493276, 0.278147,
                    0.532443, -0.723633, 0.339844,
                  ],
                  [
                    -0.642788, 0.766044, 0.119764, -0.852869, 0.508205,
                    0.300221, 0.500009, -0.730451, 0.355387,
                  ],
                  [
                    -0.62932, 0.777146, 0.094066, -0.847101, 0.523041, 0.320884,
                    0.46649, -0.736025, 0.371063,
                  ],
                  [
                    -0.615661, 0.788011, 0.068559, -0.840301, 0.537768,
                    0.340093, 0.431982, -0.740324, 0.386845,
                  ],
                  [
                    -0.601815, 0.798636, 0.043272, -0.832477, 0.552367,
                    0.357807, 0.396584, -0.74332, 0.402704,
                  ],
                  [
                    -0.587785, 0.809017, 0.018237, -0.823639, 0.566821,
                    0.373991, 0.360397, -0.744989, 0.418613,
                  ],
                  [
                    -0.573576, 0.819152, -0.006515, -0.813798, 0.581112,
                    0.388612, 0.323524, -0.745308, 0.434544,
                  ],
                  [
                    -0.559193, 0.829038, -0.030955, -0.802965, 0.595222,
                    0.401645, 0.286069, -0.744262, 0.450467,
                  ],
                  [
                    -0.544639, 0.838671, -0.055052, -0.791154, 0.609135,
                    0.413066, 0.24814, -0.741835, 0.466352,
                  ],
                  [
                    -0.529919, 0.848048, -0.078778, -0.778378, 0.622833,
                    0.422856, 0.209843, -0.738017, 0.482171,
                  ],
                  [
                    -0.515038, 0.857167, -0.102104, -0.764655, 0.6363, 0.431004,
                    0.171288, -0.732801, 0.497894,
                  ],
                  [
                    -0.5, 0.866025, -0.125, -0.75, 0.649519, 0.4375, 0.132583,
                    -0.726184, 0.51349,
                  ],
                  [
                    -0.48481, 0.87462, -0.147439, -0.734431, 0.662474, 0.44234,
                    0.093837, -0.718167, 0.528929,
                  ],
                  [
                    -0.469472, 0.882948, -0.169395, -0.717968, 0.67515,
                    0.445524, 0.05516, -0.708753, 0.544183,
                  ],
                  [
                    -0.45399, 0.891007, -0.190839, -0.700629, 0.687531,
                    0.447059, 0.016662, -0.69795, 0.55922,
                  ],
                  [
                    -0.438371, 0.898794, -0.211746, -0.682437, 0.699602,
                    0.446953, -0.02155, -0.685769, 0.574011,
                  ],
                  [
                    -0.422618, 0.906308, -0.232091, -0.663414, 0.711348,
                    0.445222, -0.059368, -0.672226, 0.588528,
                  ],
                  [
                    -0.406737, 0.913545, -0.251848, -0.643582, 0.722755,
                    0.441884, -0.096684, -0.657339, 0.602741,
                  ],
                  [
                    -0.390731, 0.920505, -0.270994, -0.622967, 0.733809,
                    0.436964, -0.133395, -0.64113, 0.616621,
                  ],
                  [
                    -0.374607, 0.927184, -0.289505, -0.601592, 0.744496,
                    0.430488, -0.169397, -0.623624, 0.630141,
                  ],
                  [
                    -0.358368, 0.93358, -0.307359, -0.579484, 0.754804,
                    0.422491, -0.204589, -0.604851, 0.643273,
                  ],
                  [
                    -0.34202, 0.939693, -0.324533, -0.55667, 0.76472, 0.413008,
                    -0.238872, -0.584843, 0.65599,
                  ],
                  [
                    -0.325568, 0.945519, -0.341008, -0.533178, 0.774231,
                    0.402081, -0.27215, -0.563635, 0.668267,
                  ],
                  [
                    -0.309017, 0.951057, -0.356763, -0.509037, 0.783327,
                    0.389754, -0.304329, -0.541266, 0.680078,
                  ],
                  [
                    -0.292372, 0.956305, -0.371778, -0.484275, 0.791997,
                    0.376077, -0.335319, -0.517778, 0.691399,
                  ],
                  [
                    -0.275637, 0.961262, -0.386036, -0.458924, 0.800228,
                    0.361102, -0.365034, -0.493216, 0.702207,
                  ],
                  [
                    -0.258819, 0.965926, -0.399519, -0.433013, 0.808013,
                    0.344885, -0.393389, -0.467627, 0.712478,
                  ],
                  [
                    -0.241922, 0.970296, -0.412211, -0.406574, 0.81534,
                    0.327486, -0.420306, -0.441061, 0.722191,
                  ],
                  [
                    -0.224951, 0.97437, -0.424096, -0.379641, 0.822202,
                    0.308969, -0.445709, -0.413572, 0.731327,
                  ],
                  [
                    -0.207912, 0.978148, -0.435159, -0.352244, 0.828589,
                    0.289399, -0.469527, -0.385215, 0.739866,
                  ],
                  [
                    -0.190809, 0.981627, -0.445388, -0.324419, 0.834495,
                    0.268846, -0.491693, -0.356047, 0.74779,
                  ],
                  [
                    -0.173648, 0.984808, -0.454769, -0.296198, 0.839912,
                    0.247382, -0.512145, -0.326129, 0.755082,
                  ],
                  [
                    -0.156434, 0.987688, -0.463292, -0.267617, 0.844832,
                    0.225081, -0.530827, -0.295521, 0.761728,
                  ],
                  [
                    -0.139173, 0.990268, -0.470946, -0.238709, 0.849251,
                    0.20202, -0.547684, -0.264287, 0.767712,
                  ],
                  [
                    -0.121869, 0.992546, -0.477722, -0.209511, 0.853163,
                    0.178279, -0.562672, -0.232494, 0.773023,
                  ],
                  [
                    -0.104528, 0.994522, -0.483611, -0.180057, 0.856563,
                    0.153937, -0.575747, -0.200207, 0.777648,
                  ],
                  [
                    -0.087156, 0.996195, -0.488606, -0.150384, 0.859447,
                    0.129078, -0.586872, -0.167494, 0.781579,
                  ],
                  [
                    -0.069756, 0.997564, -0.492701, -0.120527, 0.861811,
                    0.103786, -0.596018, -0.134426, 0.784806,
                  ],
                  [
                    -0.052336, 0.99863, -0.495891, -0.090524, 0.863653,
                    0.078146, -0.603158, -0.101071, 0.787324,
                  ],
                  [
                    -0.034899, 0.999391, -0.498173, -0.060411, 0.864971,
                    0.052243, -0.608272, -0.0675, 0.789126,
                  ],
                  [
                    -0.017452, 0.999848, -0.499543, -0.030224, 0.865762,
                    0.026165, -0.611347, -0.033786, 0.790208,
                  ],
                  [0, 1, -0.5, 0, 0.866025, -0, -0.612372, 0, 0.790569],
                  [
                    0.017452, 0.999848, -0.499543, 0.030224, 0.865762,
                    -0.026165, -0.611347, 0.033786, 0.790208,
                  ],
                  [
                    0.034899, 0.999391, -0.498173, 0.060411, 0.864971,
                    -0.052243, -0.608272, 0.0675, 0.789126,
                  ],
                  [
                    0.052336, 0.99863, -0.495891, 0.090524, 0.863653, -0.078146,
                    -0.603158, 0.101071, 0.787324,
                  ],
                  [
                    0.069756, 0.997564, -0.492701, 0.120527, 0.861811,
                    -0.103786, -0.596018, 0.134426, 0.784806,
                  ],
                  [
                    0.087156, 0.996195, -0.488606, 0.150384, 0.859447,
                    -0.129078, -0.586872, 0.167494, 0.781579,
                  ],
                  [
                    0.104528, 0.994522, -0.483611, 0.180057, 0.856563,
                    -0.153937, -0.575747, 0.200207, 0.777648,
                  ],
                  [
                    0.121869, 0.992546, -0.477722, 0.209511, 0.853163,
                    -0.178279, -0.562672, 0.232494, 0.773023,
                  ],
                  [
                    0.139173, 0.990268, -0.470946, 0.238709, 0.849251, -0.20202,
                    -0.547684, 0.264287, 0.767712,
                  ],
                  [
                    0.156434, 0.987688, -0.463292, 0.267617, 0.844832,
                    -0.225081, -0.530827, 0.295521, 0.761728,
                  ],
                  [
                    0.173648, 0.984808, -0.454769, 0.296198, 0.839912,
                    -0.247382, -0.512145, 0.326129, 0.755082,
                  ],
                  [
                    0.190809, 0.981627, -0.445388, 0.324419, 0.834495,
                    -0.268846, -0.491693, 0.356047, 0.74779,
                  ],
                  [
                    0.207912, 0.978148, -0.435159, 0.352244, 0.828589,
                    -0.289399, -0.469527, 0.385215, 0.739866,
                  ],
                  [
                    0.224951, 0.97437, -0.424096, 0.379641, 0.822202, -0.308969,
                    -0.445709, 0.413572, 0.731327,
                  ],
                  [
                    0.241922, 0.970296, -0.412211, 0.406574, 0.81534, -0.327486,
                    -0.420306, 0.441061, 0.722191,
                  ],
                  [
                    0.258819, 0.965926, -0.399519, 0.433013, 0.808013,
                    -0.344885, -0.393389, 0.467627, 0.712478,
                  ],
                  [
                    0.275637, 0.961262, -0.386036, 0.458924, 0.800228,
                    -0.361102, -0.365034, 0.493216, 0.702207,
                  ],
                  [
                    0.292372, 0.956305, -0.371778, 0.484275, 0.791997,
                    -0.376077, -0.335319, 0.517778, 0.691399,
                  ],
                  [
                    0.309017, 0.951057, -0.356763, 0.509037, 0.783327,
                    -0.389754, -0.304329, 0.541266, 0.680078,
                  ],
                  [
                    0.325568, 0.945519, -0.341008, 0.533178, 0.774231,
                    -0.402081, -0.27215, 0.563635, 0.668267,
                  ],
                  [
                    0.34202, 0.939693, -0.324533, 0.55667, 0.76472, -0.413008,
                    -0.238872, 0.584843, 0.65599,
                  ],
                  [
                    0.358368, 0.93358, -0.307359, 0.579484, 0.754804, -0.422491,
                    -0.204589, 0.604851, 0.643273,
                  ],
                  [
                    0.374607, 0.927184, -0.289505, 0.601592, 0.744496,
                    -0.430488, -0.169397, 0.623624, 0.630141,
                  ],
                  [
                    0.390731, 0.920505, -0.270994, 0.622967, 0.733809,
                    -0.436964, -0.133395, 0.64113, 0.616621,
                  ],
                  [
                    0.406737, 0.913545, -0.251848, 0.643582, 0.722755,
                    -0.441884, -0.096684, 0.657339, 0.602741,
                  ],
                  [
                    0.422618, 0.906308, -0.232091, 0.663414, 0.711348,
                    -0.445222, -0.059368, 0.672226, 0.588528,
                  ],
                  [
                    0.438371, 0.898794, -0.211746, 0.682437, 0.699602,
                    -0.446953, -0.02155, 0.685769, 0.574011,
                  ],
                  [
                    0.45399, 0.891007, -0.190839, 0.700629, 0.687531, -0.447059,
                    0.016662, 0.69795, 0.55922,
                  ],
                  [
                    0.469472, 0.882948, -0.169395, 0.717968, 0.67515, -0.445524,
                    0.05516, 0.708753, 0.544183,
                  ],
                  [
                    0.48481, 0.87462, -0.147439, 0.734431, 0.662474, -0.44234,
                    0.093837, 0.718167, 0.528929,
                  ],
                  [
                    0.5, 0.866025, -0.125, 0.75, 0.649519, -0.4375, 0.132583,
                    0.726184, 0.51349,
                  ],
                  [
                    0.515038, 0.857167, -0.102104, 0.764655, 0.6363, -0.431004,
                    0.171288, 0.732801, 0.497894,
                  ],
                  [
                    0.529919, 0.848048, -0.078778, 0.778378, 0.622833,
                    -0.422856, 0.209843, 0.738017, 0.482171,
                  ],
                  [
                    0.544639, 0.838671, -0.055052, 0.791154, 0.609135,
                    -0.413066, 0.24814, 0.741835, 0.466352,
                  ],
                  [
                    0.559193, 0.829038, -0.030955, 0.802965, 0.595222,
                    -0.401645, 0.286069, 0.744262, 0.450467,
                  ],
                  [
                    0.573576, 0.819152, -0.006515, 0.813798, 0.581112,
                    -0.388612, 0.323524, 0.745308, 0.434544,
                  ],
                  [
                    0.587785, 0.809017, 0.018237, 0.823639, 0.566821, -0.373991,
                    0.360397, 0.744989, 0.418613,
                  ],
                  [
                    0.601815, 0.798636, 0.043272, 0.832477, 0.552367, -0.357807,
                    0.396584, 0.74332, 0.402704,
                  ],
                  [
                    0.615661, 0.788011, 0.068559, 0.840301, 0.537768, -0.340093,
                    0.431982, 0.740324, 0.386845,
                  ],
                  [
                    0.62932, 0.777146, 0.094066, 0.847101, 0.523041, -0.320884,
                    0.46649, 0.736025, 0.371063,
                  ],
                  [
                    0.642788, 0.766044, 0.119764, 0.852869, 0.508205, -0.300221,
                    0.500009, 0.730451, 0.355387,
                  ],
                  [
                    0.656059, 0.75471, 0.14562, 0.857597, 0.493276, -0.278147,
                    0.532443, 0.723633, 0.339844,
                  ],
                  [
                    0.669131, 0.743145, 0.171604, 0.861281, 0.478275, -0.254712,
                    0.5637, 0.715605, 0.324459,
                  ],
                  [
                    0.681998, 0.731354, 0.197683, 0.863916, 0.463218, -0.229967,
                    0.593688, 0.706405, 0.309259,
                  ],
                  [
                    0.694658, 0.71934, 0.223825, 0.865498, 0.448125, -0.203969,
                    0.622322, 0.696073, 0.294267,
                  ],
                  [
                    0.707107, 0.707107, 0.25, 0.866025, 0.433013, -0.176777,
                    0.649519, 0.684653, 0.279508,
                  ],
                  [
                    0.71934, 0.694658, 0.276175, 0.865498, 0.417901, -0.148454,
                    0.675199, 0.67219, 0.265005,
                  ],
                  [
                    0.731354, 0.681998, 0.302317, 0.863916, 0.402807, -0.119068,
                    0.699288, 0.658734, 0.250778,
                  ],
                  [
                    0.743145, 0.669131, 0.328396, 0.861281, 0.387751, -0.088686,
                    0.721714, 0.644334, 0.23685,
                  ],
                  [
                    0.75471, 0.656059, 0.35438, 0.857597, 0.372749, -0.057383,
                    0.742412, 0.629044, 0.223238,
                  ],
                  [
                    0.766044, 0.642788, 0.380236, 0.852869, 0.357821, -0.025233,
                    0.761319, 0.612921, 0.209963,
                  ],
                  [
                    0.777146, 0.62932, 0.405934, 0.847101, 0.342984, 0.007686,
                    0.778379, 0.596021, 0.19704,
                  ],
                  [
                    0.788011, 0.615661, 0.431441, 0.840301, 0.328257, 0.041294,
                    0.793541, 0.578405, 0.184487,
                  ],
                  [
                    0.798636, 0.601815, 0.456728, 0.832477, 0.313658, 0.075508,
                    0.806757, 0.560132, 0.172317,
                  ],
                  [
                    0.809017, 0.587785, 0.481763, 0.823639, 0.299204, 0.110246,
                    0.817987, 0.541266, 0.160545,
                  ],
                  [
                    0.819152, 0.573576, 0.506515, 0.813798, 0.284914, 0.14542,
                    0.827194, 0.521871, 0.149181,
                  ],
                  [
                    0.829038, 0.559193, 0.530955, 0.802965, 0.270803, 0.180944,
                    0.834347, 0.502011, 0.138237,
                  ],
                  [
                    0.838671, 0.544639, 0.555052, 0.791154, 0.256891, 0.21673,
                    0.839422, 0.481753, 0.127722,
                  ],
                  [
                    0.848048, 0.529919, 0.578778, 0.778378, 0.243192, 0.252688,
                    0.842399, 0.461164, 0.117644,
                  ],
                  [
                    0.857167, 0.515038, 0.602104, 0.764655, 0.229726, 0.288728,
                    0.843265, 0.440311, 0.108009,
                  ],
                  [
                    0.866025, 0.5, 0.625, 0.75, 0.216506, 0.32476, 0.842012,
                    0.419263, 0.098821,
                  ],
                  [
                    0.87462, 0.48481, 0.647439, 0.734431, 0.203551, 0.360692,
                    0.838638, 0.398086, 0.090085,
                  ],
                  [
                    0.882948, 0.469472, 0.669395, 0.717968, 0.190875, 0.396436,
                    0.833145, 0.376851, 0.081803,
                  ],
                  [
                    0.891007, 0.45399, 0.690839, 0.700629, 0.178494, 0.431899,
                    0.825544, 0.355623, 0.073974,
                  ],
                  [
                    0.898794, 0.438371, 0.711746, 0.682437, 0.166423, 0.466993,
                    0.81585, 0.334472, 0.066599,
                  ],
                  [
                    0.906308, 0.422618, 0.732091, 0.663414, 0.154678, 0.501627,
                    0.804083, 0.313464, 0.059674,
                  ],
                  [
                    0.913545, 0.406737, 0.751848, 0.643582, 0.143271, 0.535715,
                    0.79027, 0.292666, 0.053196,
                  ],
                  [
                    0.920505, 0.390731, 0.770994, 0.622967, 0.132217, 0.569169,
                    0.774442, 0.272143, 0.04716,
                  ],
                  [
                    0.927184, 0.374607, 0.789505, 0.601592, 0.121529, 0.601904,
                    0.756637, 0.25196, 0.041559,
                  ],
                  [
                    0.93358, 0.358368, 0.807359, 0.579484, 0.111222, 0.633837,
                    0.736898, 0.23218, 0.036385,
                  ],
                  [
                    0.939693, 0.34202, 0.824533, 0.55667, 0.101306, 0.664885,
                    0.715274, 0.212865, 0.03163,
                  ],
                  [
                    0.945519, 0.325568, 0.841008, 0.533178, 0.091794, 0.694969,
                    0.691816, 0.194075, 0.027281,
                  ],
                  [
                    0.951057, 0.309017, 0.856763, 0.509037, 0.082698, 0.724012,
                    0.666583, 0.175868, 0.023329,
                  ],
                  [
                    0.956305, 0.292372, 0.871778, 0.484275, 0.074029, 0.75194,
                    0.639639, 0.158301, 0.019758,
                  ],
                  [
                    0.961262, 0.275637, 0.886036, 0.458924, 0.065797, 0.77868,
                    0.61105, 0.141427, 0.016556,
                  ],
                  [
                    0.965926, 0.258819, 0.899519, 0.433013, 0.058013, 0.804164,
                    0.580889, 0.1253, 0.013707,
                  ],
                  [
                    0.970296, 0.241922, 0.912211, 0.406574, 0.050685, 0.828326,
                    0.549233, 0.109969, 0.011193,
                  ],
                  [
                    0.97437, 0.224951, 0.924096, 0.379641, 0.043823, 0.851105,
                    0.516162, 0.095481, 0.008999,
                  ],
                  [
                    0.978148, 0.207912, 0.935159, 0.352244, 0.037436, 0.872441,
                    0.481759, 0.08188, 0.007105,
                  ],
                  [
                    0.981627, 0.190809, 0.945388, 0.324419, 0.03153, 0.892279,
                    0.446114, 0.069209, 0.005492,
                  ],
                  [
                    0.984808, 0.173648, 0.954769, 0.296198, 0.026114, 0.910569,
                    0.409317, 0.057505, 0.00414,
                  ],
                  [
                    0.987688, 0.156434, 0.963292, 0.267617, 0.021193, 0.927262,
                    0.371463, 0.046806, 0.003026,
                  ],
                  [
                    0.990268, 0.139173, 0.970946, 0.238709, 0.016774, 0.942316,
                    0.332649, 0.037143, 0.002131,
                  ],
                  [
                    0.992546, 0.121869, 0.977722, 0.209511, 0.012862, 0.955693,
                    0.292976, 0.028547, 0.001431,
                  ],
                  [
                    0.994522, 0.104528, 0.983611, 0.180057, 0.009462, 0.967356,
                    0.252544, 0.021043, 903e-6,
                  ],
                  [
                    0.996195, 0.087156, 0.988606, 0.150384, 0.006578, 0.977277,
                    0.21146, 0.014654, 523e-6,
                  ],
                  [
                    0.997564, 0.069756, 0.992701, 0.120527, 0.004214, 0.985429,
                    0.169828, 0.0094, 268e-6,
                  ],
                  [
                    0.99863, 0.052336, 0.995891, 0.090524, 0.002372, 0.991791,
                    0.127757, 0.005297, 113e-6,
                  ],
                  [
                    0.999391, 0.034899, 0.998173, 0.060411, 0.001055, 0.996348,
                    0.085356, 0.002357, 34e-6,
                  ],
                  [
                    0.999848, 0.017452, 0.999543, 0.030224, 264e-6, 0.999086,
                    0.042733, 59e-5, 4e-6,
                  ],
                  [1, -0, 1, -0, 0, 1, -0, 0, -0],
                ],
              ]),
                (t.SPHERICAL_HARMONICS_AZIMUTH_RESOLUTION =
                  t.SPHERICAL_HARMONICS[0].length),
                (t.SPHERICAL_HARMONICS_ELEVATION_RESOLUTION =
                  t.SPHERICAL_HARMONICS[1].length),
                (t.SPHERICAL_HARMONICS_MAX_ORDER =
                  t.SPHERICAL_HARMONICS[0][0].length / 2),
                (t.MAX_RE_WEIGHTS = [
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1, 1, 1, 1],
                  [1.003236, 1.002156, 0.999152, 0.990038],
                  [1.03237, 1.021194, 0.990433, 0.898572],
                  [1.062694, 1.040231, 0.979161, 0.799806],
                  [1.093999, 1.058954, 0.964976, 0.693603],
                  [1.126003, 1.077006, 0.947526, 0.57989],
                  [1.158345, 1.093982, 0.926474, 0.45869],
                  [1.19059, 1.109437, 0.901512, 0.330158],
                  [1.222228, 1.12289, 0.87237, 0.194621],
                  [1.252684, 1.133837, 0.838839, 0.052614],
                  [1.281987, 1.142358, 0.801199, 0],
                  [1.312073, 1.150207, 0.760839, 0],
                  [1.343011, 1.157424, 0.717799, 0],
                  [1.374649, 1.163859, 0.671999, 0],
                  [1.406809, 1.169354, 0.623371, 0],
                  [1.439286, 1.173739, 0.571868, 0],
                  [1.471846, 1.176837, 0.517465, 0],
                  [1.504226, 1.178465, 0.460174, 0],
                  [1.536133, 1.178438, 0.400043, 0],
                  [1.567253, 1.176573, 0.337165, 0],
                  [1.597247, 1.172695, 0.271688, 0],
                  [1.625766, 1.166645, 0.203815, 0],
                  [1.652455, 1.158285, 0.133806, 0],
                  [1.676966, 1.147506, 0.061983, 0],
                  [1.699006, 1.134261, 0, 0],
                  [1.720224, 1.119789, 0, 0],
                  [1.741631, 1.10481, 0, 0],
                  [1.763183, 1.08933, 0, 0],
                  [1.784837, 1.073356, 0, 0],
                  [1.806548, 1.056898, 0, 0],
                  [1.828269, 1.039968, 0, 0],
                  [1.849952, 1.02258, 0, 0],
                  [1.871552, 1.004752, 0, 0],
                  [1.893018, 0.986504, 0, 0],
                  [1.914305, 0.967857, 0, 0],
                  [1.935366, 0.948837, 0, 0],
                  [1.956154, 0.929471, 0, 0],
                  [1.976625, 0.90979, 0, 0],
                  [1.996736, 0.889823, 0, 0],
                  [2.016448, 0.869607, 0, 0],
                  [2.035721, 0.849175, 0, 0],
                  [2.054522, 0.828565, 0, 0],
                  [2.072818, 0.807816, 0, 0],
                  [2.090581, 0.786964, 0, 0],
                  [2.107785, 0.766051, 0, 0],
                  [2.124411, 0.745115, 0, 0],
                  [2.140439, 0.724196, 0, 0],
                  [2.155856, 0.703332, 0, 0],
                  [2.170653, 0.682561, 0, 0],
                  [2.184823, 0.661921, 0, 0],
                  [2.198364, 0.641445, 0, 0],
                  [2.211275, 0.621169, 0, 0],
                  [2.223562, 0.601125, 0, 0],
                  [2.23523, 0.581341, 0, 0],
                  [2.246289, 0.561847, 0, 0],
                  [2.256751, 0.542667, 0, 0],
                  [2.266631, 0.523826, 0, 0],
                  [2.275943, 0.505344, 0, 0],
                  [2.284707, 0.487239, 0, 0],
                  [2.292939, 0.469528, 0, 0],
                  [2.300661, 0.452225, 0, 0],
                  [2.307892, 0.435342, 0, 0],
                  [2.314654, 0.418888, 0, 0],
                  [2.320969, 0.40287, 0, 0],
                  [2.326858, 0.387294, 0, 0],
                  [2.332343, 0.372164, 0, 0],
                  [2.337445, 0.357481, 0, 0],
                  [2.342186, 0.343246, 0, 0],
                  [2.346585, 0.329458, 0, 0],
                  [2.350664, 0.316113, 0, 0],
                  [2.354442, 0.303208, 0, 0],
                  [2.357937, 0.290738, 0, 0],
                  [2.361168, 0.278698, 0, 0],
                  [2.364152, 0.26708, 0, 0],
                  [2.366906, 0.255878, 0, 0],
                  [2.369446, 0.245082, 0, 0],
                  [2.371786, 0.234685, 0, 0],
                  [2.37394, 0.224677, 0, 0],
                  [2.375923, 0.215048, 0, 0],
                  [2.377745, 0.20579, 0, 0],
                  [2.379421, 0.196891, 0, 0],
                  [2.380959, 0.188342, 0, 0],
                  [2.382372, 0.180132, 0, 0],
                  [2.383667, 0.172251, 0, 0],
                  [2.384856, 0.164689, 0, 0],
                  [2.385945, 0.157435, 0, 0],
                  [2.386943, 0.150479, 0, 0],
                  [2.387857, 0.143811, 0, 0],
                  [2.388694, 0.137421, 0, 0],
                  [2.38946, 0.131299, 0, 0],
                  [2.39016, 0.125435, 0, 0],
                  [2.390801, 0.11982, 0, 0],
                  [2.391386, 0.114445, 0, 0],
                  [2.391921, 0.1093, 0, 0],
                  [2.39241, 0.104376, 0, 0],
                  [2.392857, 0.099666, 0, 0],
                  [2.393265, 0.09516, 0, 0],
                  [2.393637, 0.090851, 0, 0],
                  [2.393977, 0.086731, 0, 0],
                  [2.394288, 0.082791, 0, 0],
                  [2.394571, 0.079025, 0, 0],
                  [2.394829, 0.075426, 0, 0],
                  [2.395064, 0.071986, 0, 0],
                  [2.395279, 0.068699, 0, 0],
                  [2.395475, 0.065558, 0, 0],
                  [2.395653, 0.062558, 0, 0],
                  [2.395816, 0.059693, 0, 0],
                  [2.395964, 0.056955, 0, 0],
                  [2.396099, 0.054341, 0, 0],
                  [2.396222, 0.051845, 0, 0],
                  [2.396334, 0.049462, 0, 0],
                  [2.396436, 0.047186, 0, 0],
                  [2.396529, 0.045013, 0, 0],
                  [2.396613, 0.042939, 0, 0],
                  [2.396691, 0.040959, 0, 0],
                  [2.396761, 0.039069, 0, 0],
                  [2.396825, 0.037266, 0, 0],
                  [2.396883, 0.035544, 0, 0],
                  [2.396936, 0.033901, 0, 0],
                  [2.396984, 0.032334, 0, 0],
                  [2.397028, 0.030838, 0, 0],
                  [2.397068, 0.02941, 0, 0],
                  [2.397104, 0.028048, 0, 0],
                  [2.397137, 0.026749, 0, 0],
                  [2.397167, 0.025509, 0, 0],
                  [2.397194, 0.024326, 0, 0],
                  [2.397219, 0.023198, 0, 0],
                  [2.397242, 0.022122, 0, 0],
                  [2.397262, 0.021095, 0, 0],
                  [2.397281, 0.020116, 0, 0],
                  [2.397298, 0.019181, 0, 0],
                  [2.397314, 0.01829, 0, 0],
                  [2.397328, 0.017441, 0, 0],
                  [2.397341, 0.01663, 0, 0],
                  [2.397352, 0.015857, 0, 0],
                  [2.397363, 0.015119, 0, 0],
                  [2.397372, 0.014416, 0, 0],
                  [2.397381, 0.013745, 0, 0],
                  [2.397389, 0.013106, 0, 0],
                  [2.397396, 0.012496, 0, 0],
                  [2.397403, 0.011914, 0, 0],
                  [2.397409, 0.01136, 0, 0],
                  [2.397414, 0.010831, 0, 0],
                  [2.397419, 0.010326, 0, 0],
                  [2.397424, 0.009845, 0, 0],
                  [2.397428, 0.009387, 0, 0],
                  [2.397432, 0.008949, 0, 0],
                  [2.397435, 0.008532, 0, 0],
                  [2.397438, 0.008135, 0, 0],
                  [2.397441, 0.007755, 0, 0],
                  [2.397443, 0.007394, 0, 0],
                  [2.397446, 0.007049, 0, 0],
                  [2.397448, 0.006721, 0, 0],
                  [2.39745, 0.006407, 0, 0],
                  [2.397451, 0.006108, 0, 0],
                  [2.397453, 0.005824, 0, 0],
                  [2.397454, 0.005552, 0, 0],
                  [2.397456, 0.005293, 0, 0],
                  [2.397457, 0.005046, 0, 0],
                  [2.397458, 0.004811, 0, 0],
                  [2.397459, 0.004586, 0, 0],
                  [2.39746, 0.004372, 0, 0],
                  [2.397461, 0.004168, 0, 0],
                  [2.397461, 0.003974, 0, 0],
                  [2.397462, 0.003788, 0, 0],
                  [2.397463, 0.003611, 0, 0],
                  [2.397463, 0.003443, 0, 0],
                  [2.397464, 0.003282, 0, 0],
                  [2.397464, 0.003129, 0, 0],
                  [2.397465, 0.002983, 0, 0],
                  [2.397465, 0.002844, 0, 0],
                  [2.397465, 0.002711, 0, 0],
                  [2.397466, 0.002584, 0, 0],
                  [2.397466, 0.002464, 0, 0],
                  [2.397466, 0.002349, 0, 0],
                  [2.397466, 0.002239, 0, 0],
                  [2.397467, 0.002135, 0, 0],
                  [2.397467, 0.002035, 0, 0],
                  [2.397467, 0.00194, 0, 0],
                  [2.397467, 0.001849, 0, 0],
                  [2.397467, 0.001763, 0, 0],
                  [2.397467, 0.001681, 0, 0],
                  [2.397468, 0.001602, 0, 0],
                  [2.397468, 0.001527, 0, 0],
                  [2.397468, 0.001456, 0, 0],
                  [2.397468, 0.001388, 0, 0],
                  [2.397468, 0.001323, 0, 0],
                  [2.397468, 0.001261, 0, 0],
                  [2.397468, 0.001202, 0, 0],
                  [2.397468, 0.001146, 0, 0],
                  [2.397468, 0.001093, 0, 0],
                  [2.397468, 0.001042, 0, 0],
                  [2.397468, 993e-6, 0, 0],
                  [2.397468, 947e-6, 0, 0],
                  [2.397468, 902e-6, 0, 0],
                  [2.397468, 86e-5, 0, 0],
                  [2.397468, 82e-5, 0, 0],
                  [2.397469, 782e-6, 0, 0],
                  [2.397469, 745e-6, 0, 0],
                  [2.397469, 71e-5, 0, 0],
                  [2.397469, 677e-6, 0, 0],
                  [2.397469, 646e-6, 0, 0],
                  [2.397469, 616e-6, 0, 0],
                  [2.397469, 587e-6, 0, 0],
                  [2.397469, 559e-6, 0, 0],
                  [2.397469, 533e-6, 0, 0],
                  [2.397469, 508e-6, 0, 0],
                  [2.397469, 485e-6, 0, 0],
                  [2.397469, 462e-6, 0, 0],
                  [2.397469, 44e-5, 0, 0],
                  [2.397469, 42e-5, 0, 0],
                  [2.397469, 4e-4, 0, 0],
                  [2.397469, 381e-6, 0, 0],
                  [2.397469, 364e-6, 0, 0],
                  [2.397469, 347e-6, 0, 0],
                  [2.397469, 33e-5, 0, 0],
                  [2.397469, 315e-6, 0, 0],
                  [2.397469, 3e-4, 0, 0],
                  [2.397469, 286e-6, 0, 0],
                  [2.397469, 273e-6, 0, 0],
                  [2.397469, 26e-5, 0, 0],
                  [2.397469, 248e-6, 0, 0],
                  [2.397469, 236e-6, 0, 0],
                  [2.397469, 225e-6, 0, 0],
                  [2.397469, 215e-6, 0, 0],
                  [2.397469, 205e-6, 0, 0],
                  [2.397469, 195e-6, 0, 0],
                  [2.397469, 186e-6, 0, 0],
                  [2.397469, 177e-6, 0, 0],
                  [2.397469, 169e-6, 0, 0],
                  [2.397469, 161e-6, 0, 0],
                  [2.397469, 154e-6, 0, 0],
                  [2.397469, 147e-6, 0, 0],
                  [2.397469, 14e-5, 0, 0],
                  [2.397469, 133e-6, 0, 0],
                  [2.397469, 127e-6, 0, 0],
                  [2.397469, 121e-6, 0, 0],
                  [2.397469, 115e-6, 0, 0],
                  [2.397469, 11e-5, 0, 0],
                  [2.397469, 105e-6, 0, 0],
                  [2.397469, 1e-4, 0, 0],
                  [2.397469, 95e-6, 0, 0],
                  [2.397469, 91e-6, 0, 0],
                  [2.397469, 87e-6, 0, 0],
                  [2.397469, 83e-6, 0, 0],
                  [2.397469, 79e-6, 0, 0],
                  [2.397469, 75e-6, 0, 0],
                  [2.397469, 71e-6, 0, 0],
                  [2.397469, 68e-6, 0, 0],
                  [2.397469, 65e-6, 0, 0],
                  [2.397469, 62e-6, 0, 0],
                  [2.397469, 59e-6, 0, 0],
                  [2.397469, 56e-6, 0, 0],
                  [2.397469, 54e-6, 0, 0],
                  [2.397469, 51e-6, 0, 0],
                  [2.397469, 49e-6, 0, 0],
                  [2.397469, 46e-6, 0, 0],
                  [2.397469, 44e-6, 0, 0],
                  [2.397469, 42e-6, 0, 0],
                  [2.397469, 4e-5, 0, 0],
                  [2.397469, 38e-6, 0, 0],
                  [2.397469, 37e-6, 0, 0],
                  [2.397469, 35e-6, 0, 0],
                  [2.397469, 33e-6, 0, 0],
                  [2.397469, 32e-6, 0, 0],
                  [2.397469, 3e-5, 0, 0],
                  [2.397469, 29e-6, 0, 0],
                  [2.397469, 27e-6, 0, 0],
                  [2.397469, 26e-6, 0, 0],
                  [2.397469, 25e-6, 0, 0],
                  [2.397469, 24e-6, 0, 0],
                  [2.397469, 23e-6, 0, 0],
                  [2.397469, 22e-6, 0, 0],
                  [2.397469, 21e-6, 0, 0],
                  [2.397469, 2e-5, 0, 0],
                  [2.397469, 19e-6, 0, 0],
                  [2.397469, 18e-6, 0, 0],
                  [2.397469, 17e-6, 0, 0],
                  [2.397469, 16e-6, 0, 0],
                  [2.397469, 15e-6, 0, 0],
                  [2.397469, 15e-6, 0, 0],
                  [2.397469, 14e-6, 0, 0],
                  [2.397469, 13e-6, 0, 0],
                  [2.397469, 13e-6, 0, 0],
                  [2.397469, 12e-6, 0, 0],
                  [2.397469, 12e-6, 0, 0],
                  [2.397469, 11e-6, 0, 0],
                  [2.397469, 11e-6, 0, 0],
                  [2.397469, 1e-5, 0, 0],
                  [2.397469, 1e-5, 0, 0],
                  [2.397469, 9e-6, 0, 0],
                  [2.397469, 9e-6, 0, 0],
                  [2.397469, 8e-6, 0, 0],
                  [2.397469, 8e-6, 0, 0],
                  [2.397469, 8e-6, 0, 0],
                  [2.397469, 7e-6, 0, 0],
                  [2.397469, 7e-6, 0, 0],
                  [2.397469, 7e-6, 0, 0],
                  [2.397469, 6e-6, 0, 0],
                  [2.397469, 6e-6, 0, 0],
                  [2.397469, 6e-6, 0, 0],
                  [2.397469, 5e-6, 0, 0],
                  [2.397469, 5e-6, 0, 0],
                  [2.397469, 5e-6, 0, 0],
                  [2.397469, 5e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 4e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 3e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 2e-6, 0, 0],
                  [2.397469, 1e-6, 0, 0],
                  [2.397469, 1e-6, 0, 0],
                  [2.397469, 1e-6, 0, 0],
                ]),
                (t.MAX_RE_WEIGHTS_RESOLUTION = t.MAX_RE_WEIGHTS.length);
            },
            function (A, t, e) {
              "use strict";
              const i = e(5),
                n = e(6),
                s = e(1),
                o = e(0);

              function r(A, t) {
                null == t && (t = {}),
                  null == t.position &&
                    (t.position = o.DEFAULT_POSITION.slice()),
                  null == t.forward && (t.forward = o.DEFAULT_FORWARD.slice()),
                  null == t.up && (t.up = o.DEFAULT_UP.slice()),
                  null == t.minDistance &&
                    (t.minDistance = o.DEFAULT_MIN_DISTANCE),
                  null == t.maxDistance &&
                    (t.maxDistance = o.DEFAULT_MAX_DISTANCE),
                  null == t.rolloff && (t.rolloff = o.DEFAULT_ROLLOFF),
                  null == t.gain && (t.gain = o.DEFAULT_SOURCE_GAIN),
                  null == t.alpha && (t.alpha = o.DEFAULT_DIRECTIVITY_ALPHA),
                  null == t.sharpness &&
                    (t.sharpness = o.DEFAULT_DIRECTIVITY_SHARPNESS),
                  null == t.sourceWidth &&
                    (t.sourceWidth = o.DEFAULT_SOURCE_WIDTH),
                  (this._scene = A),
                  (this._position = t.position),
                  (this._forward = t.forward),
                  (this._up = t.up),
                  (this._dx = new Float32Array(3)),
                  (this._right = o.crossProduct(this._forward, this._up));
                let e = A._context;
                (this.input = e.createGain()),
                  (this._directivity = new i(e, {
                    alpha: t.alpha,
                    sharpness: t.sharpness,
                  })),
                  (this._toEarly = e.createGain()),
                  (this._toLate = e.createGain()),
                  (this._attenuation = new n(e, {
                    minDistance: t.minDistance,
                    maxDistance: t.maxDistance,
                    rolloff: t.rolloff,
                  })),
                  (this._encoder = new s(e, {
                    ambisonicOrder: A._ambisonicOrder,
                    sourceWidth: t.sourceWidth,
                  })),
                  this.input.connect(this._toLate),
                  this._toLate.connect(A._room.late.input),
                  this.input.connect(this._attenuation.input),
                  this._attenuation.output.connect(this._toEarly),
                  this._toEarly.connect(A._room.early.input),
                  this._attenuation.output.connect(this._directivity.input),
                  this._directivity.output.connect(this._encoder.input),
                  this._encoder.output.connect(A._listener.input),
                  this.setPosition(t.position[0], t.position[1], t.position[2]),
                  (this.input.gain.value = t.gain);
              }
              (r.prototype.setPosition = function (A, t, e) {
                (this._position[0] = A),
                  (this._position[1] = t),
                  (this._position[2] = e);
                let i = (function (A) {
                  let t = 1;
                  return (
                    A > o.EPSILON_FLOAT &&
                      ((t = 1 - A / o.SOURCE_MAX_OUTSIDE_ROOM_DISTANCE),
                      (t = Math.max(0, Math.min(1, t)))),
                    t
                  );
                })(
                  this._scene._room.getDistanceOutsideRoom(
                    this._position[0],
                    this._position[1],
                    this._position[2]
                  )
                );
                (this._toLate.gain.value = i),
                  (this._toEarly.gain.value = i),
                  this._update();
              }),
                (r.prototype._update = function () {
                  for (let A = 0; A < 3; A++)
                    this._dx[A] =
                      this._position[A] - this._scene._listener.position[A];
                  let A = Math.sqrt(
                    this._dx[0] * this._dx[0] +
                      this._dx[1] * this._dx[1] +
                      this._dx[2] * this._dx[2]
                  );
                  A > 0 &&
                    ((this._dx[0] /= A),
                    (this._dx[1] /= A),
                    (this._dx[2] /= A));
                  let t =
                      Math.atan2(-this._dx[0], this._dx[2]) *
                      o.RADIANS_TO_DEGREES,
                    e =
                      Math.atan2(
                        this._dx[1],
                        Math.sqrt(
                          this._dx[0] * this._dx[0] + this._dx[2] * this._dx[2]
                        )
                      ) * o.RADIANS_TO_DEGREES;
                  this._attenuation.setDistance(A),
                    this._directivity.computeAngle(this._forward, this._dx),
                    this._encoder.setDirection(t, e);
                }),
                (r.prototype.setRolloff = function (A) {
                  this._attenuation.setRolloff(A);
                }),
                (r.prototype.setMinDistance = function (A) {
                  this._attenuation.minDistance = A;
                }),
                (r.prototype.setMaxDistance = function (A) {
                  this._attenuation.maxDistance = A;
                }),
                (r.prototype.setGain = function (A) {
                  this.input.gain.value = A;
                }),
                (r.prototype.setOrientation = function (A, t, e, i, n, s) {
                  (this._forward[0] = A),
                    (this._forward[1] = t),
                    (this._forward[2] = e),
                    (this._up[0] = i),
                    (this._up[1] = n),
                    (this._up[2] = s),
                    (this._right = o.crossProduct(this._forward, this._up));
                }),
                (r.prototype.setFromMatrix = function (A) {
                  (this._right[0] = A.elements[0]),
                    (this._right[1] = A.elements[1]),
                    (this._right[2] = A.elements[2]),
                    (this._up[0] = A.elements[4]),
                    (this._up[1] = A.elements[5]),
                    (this._up[2] = A.elements[6]),
                    (this._forward[0] = A.elements[8]),
                    (this._forward[1] = A.elements[9]),
                    (this._forward[2] = A.elements[10]),
                    (this._right = o.normalizeVector(this._right)),
                    (this._up = o.normalizeVector(this._up)),
                    (this._forward = o.normalizeVector(this._forward)),
                    this.setPosition(
                      A.elements[12],
                      A.elements[13],
                      A.elements[14]
                    );
                }),
                (r.prototype.setSourceWidth = function (A) {
                  this._encoder.setSourceWidth(A),
                    this.setPosition(
                      this._position[0],
                      this._position[1],
                      this._position[2]
                    );
                }),
                (r.prototype.setDirectivityPattern = function (A, t) {
                  this._directivity.setPattern(A, t),
                    this.setPosition(
                      this._position[0],
                      this._position[1],
                      this._position[2]
                    );
                }),
                (A.exports = r);
            },
            function (A, t, e) {
              "use strict";
              const i = e(0);

              function n(A, t) {
                null == t && (t = {}),
                  null == t.alpha && (t.alpha = i.DEFAULT_DIRECTIVITY_ALPHA),
                  null == t.sharpness &&
                    (t.sharpness = i.DEFAULT_DIRECTIVITY_SHARPNESS),
                  (this._context = A),
                  (this._lowpass = A.createBiquadFilter()),
                  (this._lowpass.type = "lowpass"),
                  (this._lowpass.Q.value = 0),
                  (this._lowpass.frequency.value = 0.5 * A.sampleRate),
                  (this._cosTheta = 0),
                  this.setPattern(t.alpha, t.sharpness),
                  (this.input = this._lowpass),
                  (this.output = this._lowpass);
              }
              (n.prototype.computeAngle = function (A, t) {
                let e = i.normalizeVector(A),
                  n = i.normalizeVector(t),
                  s = 1;
                if (this._alpha > i.EPSILON_FLOAT) {
                  let A = e[0] * n[0] + e[1] * n[1] + e[2] * n[2];
                  (s = 1 - this._alpha + this._alpha * A),
                    (s = Math.pow(Math.abs(s), this._sharpness));
                }
                this._lowpass.frequency.value =
                  0.5 * this._context.sampleRate * s;
              }),
                (n.prototype.setPattern = function (A, t) {
                  (this._alpha = Math.min(1, Math.max(0, A))),
                    (this._sharpness = Math.max(1, t)),
                    this.computeAngle(
                      [this._cosTheta * this._cosTheta, 0, 0],
                      [1, 0, 0]
                    );
                }),
                (A.exports = n);
            },
            function (A, t, e) {
              "use strict";
              const i = e(0);

              function n(A, t) {
                null == t && (t = {}),
                  null == t.minDistance &&
                    (t.minDistance = i.DEFAULT_MIN_DISTANCE),
                  null == t.maxDistance &&
                    (t.maxDistance = i.DEFAULT_MAX_DISTANCE),
                  null == t.rolloff &&
                    (t.rolloff = i.DEFAULT_ATTENUATION_ROLLOFF),
                  (this.minDistance = t.minDistance),
                  (this.maxDistance = t.maxDistance),
                  this.setRolloff(t.rolloff),
                  (this._gainNode = A.createGain()),
                  this.setDistance(t.maxDistance),
                  (this.input = this._gainNode),
                  (this.output = this._gainNode);
              }
              (n.prototype.setDistance = function (A) {
                let t = 1;
                if ("logarithmic" == this._rolloff) {
                  if (A > this.maxDistance) t = 0;
                  else if (A > this.minDistance) {
                    let e = this.maxDistance - this.minDistance;
                    if (e > i.EPSILON_FLOAT) {
                      let i = 1 / (e + 1);
                      t = (1 / (A - this.minDistance + 1) - i) / (1 - i);
                    }
                  }
                } else if ("linear" == this._rolloff)
                  if (A > this.maxDistance) t = 0;
                  else if (A > this.minDistance) {
                    let e = this.maxDistance - this.minDistance;
                    e > i.EPSILON_FLOAT && (t = (this.maxDistance - A) / e);
                  }
                this._gainNode.gain.value = t;
              }),
                (n.prototype.setRolloff = function (A) {
                  let t = ~i.ATTENUATION_ROLLOFFS.indexOf(A);
                  null != A && t
                    ? (A = A.toString().toLowerCase())
                    : (t ||
                        i.log(
                          'Invalid rolloff model ("' +
                            A +
                            '"). Using default: "' +
                            i.DEFAULT_ATTENUATION_ROLLOFF +
                            '".'
                        ),
                      (A = i.DEFAULT_ATTENUATION_ROLLOFF)),
                    (this._rolloff = A);
                }),
                (A.exports = n);
            },
            function (A, t, e) {
              "use strict";
              const i = e(8),
                n = e(9),
                s = e(0);

              function o(A) {
                let t = {};
                for (let A in s.DEFAULT_ROOM_MATERIALS)
                  s.DEFAULT_ROOM_MATERIALS.hasOwnProperty(A) &&
                    (t[A] =
                      s.ROOM_MATERIAL_COEFFICIENTS[
                        s.DEFAULT_ROOM_MATERIALS[A]
                      ]);
                null == A &&
                  ((A = {}), Object.assign(A, s.DEFAULT_ROOM_MATERIALS));
                for (let e in s.DEFAULT_ROOM_MATERIALS)
                  s.DEFAULT_ROOM_MATERIALS.hasOwnProperty(e) &&
                  A.hasOwnProperty(e)
                    ? A[e] in s.ROOM_MATERIAL_COEFFICIENTS
                      ? (t[e] = s.ROOM_MATERIAL_COEFFICIENTS[A[e]])
                      : s.log(
                          'Material "' +
                            A[e] +
                            '" on wall "' +
                            e +
                            '" not found. Using "' +
                            s.DEFAULT_ROOM_MATERIALS[e] +
                            '".'
                        )
                    : s.log('Wall "' + e + '" is not defined. Default used.');
                return t;
              }

              function r(A) {
                null == A && (A = {});
                for (let t in s.DEFAULT_ROOM_DIMENSIONS)
                  A.hasOwnProperty(t) || (A[t] = s.DEFAULT_ROOM_DIMENSIONS[t]);
                return A;
              }

              function a(A, t, e) {
                let i = new Float32Array(s.NUMBER_REVERB_FREQUENCY_BANDS);
                (A = r(A)),
                  (t = (function (A) {
                    null == A && (A = {});
                    for (let t in s.DEFAULT_ROOM_MATERIALS)
                      A.hasOwnProperty(t) ||
                        (A[t] =
                          s.ROOM_MATERIAL_COEFFICIENTS[
                            s.DEFAULT_ROOM_MATERIALS[t]
                          ]);
                    return A;
                  })(t)),
                  null == e && (e = s.DEFAULT_SPEED_OF_SOUND);
                let n = s.TWENTY_FOUR_LOG10 / e,
                  o = A.width * A.height * A.depth;
                if (o < s.ROOM_MIN_VOLUME) return i;
                let a = A.width * A.height,
                  h = A.width * A.depth,
                  c = A.depth * A.height,
                  l = 2 * (a + h + c);
                for (let A = 0; A < s.NUMBER_REVERB_FREQUENCY_BANDS; A++) {
                  let e =
                    ((t.left[A] + t.right[A]) * a +
                      (t.down[A] + t.up[A]) * h +
                      (t.front[A] + t.back[A]) * c) /
                    l;
                  i[A] =
                    (s.ROOM_EYRING_CORRECTION_COEFFICIENT * n * o) /
                    (-l * Math.log(1 - e) +
                      4 * s.ROOM_AIR_ABSORPTION_COEFFICIENTS[A] * o);
                }
                return i;
              }

              function h(A) {
                let t = [];
                for (let e in s.DEFAULT_REFLECTION_COEFFICIENTS)
                  if (s.DEFAULT_REFLECTION_COEFFICIENTS.hasOwnProperty(e)) {
                    t[e] = 0;
                    for (
                      let i = 0;
                      i < s.NUMBER_REFLECTION_AVERAGING_BANDS;
                      i++
                    ) {
                      let n = i + s.ROOM_STARTING_AVERAGING_BAND;
                      t[e] += A[e][n];
                    }
                    (t[e] /= s.NUMBER_REFLECTION_AVERAGING_BANDS),
                      (t[e] = Math.sqrt(1 - t[e]));
                  }
                return t;
              }

              function c(A, t) {
                null == t && (t = {}),
                  null == t.listenerPosition &&
                    (t.listenerPosition = s.DEFAULT_POSITION.slice()),
                  null == t.dimensions &&
                    ((t.dimensions = {}),
                    Object.assign(t.dimensions, s.DEFAULT_ROOM_DIMENSIONS)),
                  null == t.materials &&
                    ((t.materials = {}),
                    Object.assign(t.materials, s.DEFAULT_ROOM_MATERIALS)),
                  null == t.speedOfSound &&
                    (t.speedOfSound = s.DEFAULT_SPEED_OF_SOUND),
                  (t.dimensions = r(t.dimensions));
                let e = o(t.materials),
                  c = h(e),
                  l = a(t.dimensions, e, t.speedOfSound);
                (this.early = new n(A, {
                  dimensions: t.dimensions,
                  coefficients: c,
                  speedOfSound: t.speedOfSound,
                  listenerPosition: t.listenerPosition,
                })),
                  (this.late = new i(A, {
                    durations: l,
                  })),
                  (this.speedOfSound = t.speedOfSound),
                  (this.output = A.createGain()),
                  this.early.output.connect(this.output),
                  (this._merger = A.createChannelMerger(4)),
                  this.late.output.connect(this._merger, 0, 0),
                  this._merger.connect(this.output);
              }
              (c.prototype.setProperties = function (A, t) {
                let e = o(t),
                  i = a(A, e, this.speedOfSound);
                this.late.setDurations(i),
                  (this.early.speedOfSound = this.speedOfSound);
                let n = h(e);
                this.early.setRoomProperties(A, n);
              }),
                (c.prototype.setListenerPosition = function (A, t, e) {
                  (this.early.speedOfSound = this.speedOfSound),
                    this.early.setListenerPosition(A, t, e);
                  let i = this.getDistanceOutsideRoom(A, t, e),
                    n = 1;
                  i > s.EPSILON_FLOAT &&
                    ((n = 1 - i / s.LISTENER_MAX_OUTSIDE_ROOM_DISTANCE),
                    (n = Math.max(0, Math.min(1, n)))),
                    (this.output.gain.value = n);
                }),
                (c.prototype.getDistanceOutsideRoom = function (A, t, e) {
                  let i = Math.max(
                      0,
                      -this.early._halfDimensions.width - A,
                      A - this.early._halfDimensions.width
                    ),
                    n = Math.max(
                      0,
                      -this.early._halfDimensions.height - t,
                      t - this.early._halfDimensions.height
                    ),
                    s = Math.max(
                      0,
                      -this.early._halfDimensions.depth - e,
                      e - this.early._halfDimensions.depth
                    );
                  return Math.sqrt(i * i + n * n + s * s);
                }),
                (A.exports = c);
            },
            function (A, t, e) {
              "use strict";
              const i = e(0);

              function n(A, t) {
                null == t && (t = {}),
                  null == t.durations &&
                    (t.durations = i.DEFAULT_REVERB_DURATIONS.slice()),
                  null == t.predelay &&
                    (t.predelay = i.DEFAULT_REVERB_PREDELAY),
                  null == t.gain && (t.gain = i.DEFAULT_REVERB_GAIN),
                  null == t.bandwidth &&
                    (t.bandwidth = i.DEFAULT_REVERB_BANDWIDTH),
                  null == t.tailonset &&
                    (t.tailonset = i.DEFAULT_REVERB_TAIL_ONSET);
                let e = t.predelay / 1e3;
                (this._bandwidthCoeff = t.bandwidth * i.LOG2_DIV2),
                  (this._tailonsetSamples = t.tailonset / 1e3),
                  (this._context = A),
                  (this.input = A.createGain()),
                  (this._predelay = A.createDelay(e)),
                  (this._convolver = A.createConvolver()),
                  (this.output = A.createGain()),
                  (this.output.gain.value = t.gain),
                  (this._convolver.normalize = !1),
                  this.input.connect(this._predelay),
                  this._predelay.connect(this._convolver),
                  this._convolver.connect(this.output),
                  this.setDurations(t.durations);
              }
              (n.prototype.setDurations = function (A) {
                if (A.length !== i.NUMBER_REVERB_FREQUENCY_BANDS)
                  return void i.log(
                    "Warning: invalid number of RT60 values provided to reverb."
                  );
                let t = new Float32Array(i.NUMBER_REVERB_FREQUENCY_BANDS),
                  e = this._context.sampleRate;
                for (let n = 0; n < A.length; n++)
                  (A[n] = Math.max(
                    0,
                    Math.min(i.DEFAULT_REVERB_MAX_DURATION, A[n])
                  )),
                    (t[n] = Math.round(
                      A[n] * e * i.DEFAULT_REVERB_DURATION_MULTIPLIER
                    ));
                let n = 0;
                for (let A = 0; A < t.length; A++) t[A] > n && (n = t[A]);
                n < 1 && (n = 1);
                let s = this._context.createBuffer(1, n, e),
                  o = s.getChannelData(0),
                  r = new Float32Array(n);
                for (let A = 0; A < n; A++) r[A] = 2 * Math.random() - 1;
                for (let A = 0; A < i.NUMBER_REVERB_FREQUENCY_BANDS; A++) {
                  let n = -i.LOG1000 / t[A],
                    s = (i.TWO_PI * i.DEFAULT_REVERB_FREQUENCY_BANDS[A]) / e,
                    a = Math.sin(s),
                    h = a * Math.sinh((this._bandwidthCoeff * s) / a),
                    c = 1 / (1 + h),
                    l = h * c,
                    u = -2 * Math.cos(s) * c,
                    _ = (1 - h) * c,
                    f = 0,
                    d = 0;
                  for (let e = 0; e < t[A]; e++) {
                    let A = r[e] * Math.exp(n * e) - u * f - _ * d;
                    (o[e] += l * (A - d)), (d = f), (f = A);
                  }
                }
                let a = Math.round(this._tailonsetSamples);
                for (let A = 0; A < Math.min(o.length, a); A++) {
                  let t = 0.5 * (1 - Math.cos((i.TWO_PI * A) / (2 * a - 1)));
                  o[A] *= t;
                }
                this._convolver.buffer = s;
              }),
                (A.exports = n);
            },
            function (A, t, e) {
              "use strict";
              const i = e(0);

              function n(A, t) {
                null == t && (t = {}),
                  null == t.speedOfSound &&
                    (t.speedOfSound = i.DEFAULT_SPEED_OF_SOUND),
                  null == t.listenerPosition &&
                    (t.listenerPosition = i.DEFAULT_POSITION.slice()),
                  null == t.coefficients &&
                    ((t.coefficients = {}),
                    Object.assign(
                      t.coefficients,
                      i.DEFAULT_REFLECTION_COEFFICIENTS
                    )),
                  (this.speedOfSound = t.speedOfSound),
                  (this.input = A.createGain()),
                  (this.output = A.createGain()),
                  (this._lowpass = A.createBiquadFilter()),
                  (this._delays = {}),
                  (this._gains = {}),
                  (this._inverters = {}),
                  (this._merger = A.createChannelMerger(4));
                for (let t in i.DEFAULT_REFLECTION_COEFFICIENTS)
                  i.DEFAULT_REFLECTION_COEFFICIENTS.hasOwnProperty(t) &&
                    ((this._delays[t] = A.createDelay(i.MAX_DURATION)),
                    (this._gains[t] = A.createGain()));
                (this._inverters.right = A.createGain()),
                  (this._inverters.down = A.createGain()),
                  (this._inverters.back = A.createGain()),
                  (this._lowpass.type = "lowpass"),
                  (this._lowpass.frequency.value =
                    i.DEFAULT_REFLECTION_CUTOFF_FREQUENCY),
                  (this._lowpass.Q.value = 0);
                for (let A in i.DEFAULT_REFLECTION_COEFFICIENTS)
                  i.DEFAULT_REFLECTION_COEFFICIENTS.hasOwnProperty(A) &&
                    ((this._delays[A].delayTime.value = 0),
                    (this._gains[A].gain.value = 0));
                (this._inverters.right.gain.value = -1),
                  (this._inverters.down.gain.value = -1),
                  (this._inverters.back.gain.value = -1),
                  this.input.connect(this._lowpass);
                for (let A in i.DEFAULT_REFLECTION_COEFFICIENTS)
                  i.DEFAULT_REFLECTION_COEFFICIENTS.hasOwnProperty(A) &&
                    (this._lowpass.connect(this._delays[A]),
                    this._delays[A].connect(this._gains[A]),
                    this._gains[A].connect(this._merger, 0, 0));
                this._gains.left.connect(this._merger, 0, 1),
                  this._gains.right.connect(this._inverters.right),
                  this._inverters.right.connect(this._merger, 0, 1),
                  this._gains.up.connect(this._merger, 0, 2),
                  this._gains.down.connect(this._inverters.down),
                  this._inverters.down.connect(this._merger, 0, 2),
                  this._gains.front.connect(this._merger, 0, 3),
                  this._gains.back.connect(this._inverters.back),
                  this._inverters.back.connect(this._merger, 0, 3),
                  this._merger.connect(this.output),
                  (this._listenerPosition = t.listenerPosition),
                  this.setRoomProperties(t.dimensions, t.coefficients);
              }
              (n.prototype.setListenerPosition = function (A, t, e) {
                this._listenerPosition = [A, t, e];
                let n = {
                  left:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.width + A) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                  right:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.width - A) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                  front:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.depth + e) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                  back:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.depth - e) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                  down:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.height + t) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                  up:
                    i.DEFAULT_REFLECTION_MULTIPLIER *
                      Math.max(0, this._halfDimensions.height - t) +
                    i.DEFAULT_REFLECTION_MIN_DISTANCE,
                };
                for (let A in i.DEFAULT_REFLECTION_COEFFICIENTS)
                  if (i.DEFAULT_REFLECTION_COEFFICIENTS.hasOwnProperty(A)) {
                    let t = n[A] / this.speedOfSound;
                    this._delays[A].delayTime.value = t;
                    let e = this._coefficients[A] / n[A];
                    this._gains[A].gain.value = e;
                  }
              }),
                (n.prototype.setRoomProperties = function (A, t) {
                  null == A &&
                    ((A = {}), Object.assign(A, i.DEFAULT_ROOM_DIMENSIONS)),
                    null == t &&
                      ((t = {}),
                      Object.assign(t, i.DEFAULT_REFLECTION_COEFFICIENTS)),
                    (this._coefficients = t),
                    (this._halfDimensions = {}),
                    (this._halfDimensions.width = 0.5 * A.width),
                    (this._halfDimensions.height = 0.5 * A.height),
                    (this._halfDimensions.depth = 0.5 * A.depth),
                    this.setListenerPosition(
                      this._listenerPosition[0],
                      this._listenerPosition[1],
                      this._listenerPosition[2]
                    );
                }),
                (A.exports = n);
            },
            function (A, t, e) {
              "use strict";
              (t.ResonanceAudio = e(11)),
                (t.ResonanceAudio.Attenuation = e(6)),
                (t.ResonanceAudio.Directivity = e(5)),
                (t.ResonanceAudio.EarlyReflections = e(9)),
                (t.ResonanceAudio.Encoder = e(1)),
                (t.ResonanceAudio.LateReflections = e(8)),
                (t.ResonanceAudio.Listener = e(2)),
                (t.ResonanceAudio.Room = e(7)),
                (t.ResonanceAudio.Source = e(4)),
                (t.ResonanceAudio.Tables = e(3)),
                (t.ResonanceAudio.Utils = e(0)),
                (t.ResonanceAudio.Version = e(13));
            },
            function (A, t, e) {
              "use strict";
              const i = e(2),
                n = e(4),
                s = e(7),
                o = e(1),
                r = e(0);

              function a(A, t) {
                null == t && (t = {}),
                  null == t.ambisonicOrder &&
                    (t.ambisonicOrder = r.DEFAULT_AMBISONIC_ORDER),
                  null == t.listenerPosition &&
                    (t.listenerPosition = r.DEFAULT_POSITION.slice()),
                  null == t.listenerForward &&
                    (t.listenerForward = r.DEFAULT_FORWARD.slice()),
                  null == t.listenerUp && (t.listenerUp = r.DEFAULT_UP.slice()),
                  null == t.dimensions &&
                    ((t.dimensions = {}),
                    Object.assign(t.dimensions, r.DEFAULT_ROOM_DIMENSIONS)),
                  null == t.materials &&
                    ((t.materials = {}),
                    Object.assign(t.materials, r.DEFAULT_ROOM_MATERIALS)),
                  null == t.speedOfSound &&
                    (t.speedOfSound = r.DEFAULT_SPEED_OF_SOUND),
                  (this._ambisonicOrder = o.validateAmbisonicOrder(
                    t.ambisonicOrder
                  )),
                  (this._sources = []),
                  (this._room = new s(A, {
                    listenerPosition: t.listenerPosition,
                    dimensions: t.dimensions,
                    materials: t.materials,
                    speedOfSound: t.speedOfSound,
                  })),
                  (this._listener = new i(A, {
                    ambisonicOrder: t.ambisonicOrder,
                    position: t.listenerPosition,
                    forward: t.listenerForward,
                    up: t.listenerUp,
                  })),
                  (this._context = A),
                  (this.output = A.createGain()),
                  (this.ambisonicOutput = A.createGain()),
                  (this.ambisonicInput = this._listener.input),
                  this._room.output.connect(this._listener.input),
                  this._listener.output.connect(this.output),
                  this._listener.ambisonicOutput.connect(this.ambisonicOutput);
              }
              (a.prototype.createSource = function (A) {
                let t = new n(this, A);
                return (this._sources[this._sources.length] = t), t;
              }),
                (a.prototype.setAmbisonicOrder = function (A) {
                  this._ambisonicOrder = o.validateAmbisonicOrder(A);
                }),
                (a.prototype.setRoomProperties = function (A, t) {
                  this._room.setProperties(A, t);
                }),
                (a.prototype.setListenerPosition = function (A, t, e) {
                  (this._listener.position[0] = A),
                    (this._listener.position[1] = t),
                    (this._listener.position[2] = e),
                    this._room.setListenerPosition(A, t, e),
                    this._sources.forEach(function (A) {
                      A._update();
                    });
                }),
                (a.prototype.setListenerOrientation = function (
                  A,
                  t,
                  e,
                  i,
                  n,
                  s
                ) {
                  this._listener.setOrientation(A, t, e, i, n, s);
                }),
                (a.prototype.setListenerFromMatrix = function (A) {
                  this._listener.setFromMatrix(A),
                    this.setListenerPosition(
                      this._listener.position[0],
                      this._listener.position[1],
                      this._listener.position[2]
                    );
                }),
                (a.prototype.setSpeedOfSound = function (A) {
                  this._room.speedOfSound = A;
                }),
                (A.exports = a);
            },
            function (A, t, e) {
              var i;
              (i = function () {
                return (function (A) {
                  var t = {};

                  function e(i) {
                    if (t[i]) return t[i].exports;
                    var n = (t[i] = {
                      i,
                      l: !1,
                      exports: {},
                    });
                    return (
                      A[i].call(n.exports, n, n.exports, e),
                      (n.l = !0),
                      n.exports
                    );
                  }
                  return (
                    (e.m = A),
                    (e.c = t),
                    (e.d = function (A, t, i) {
                      e.o(A, t) ||
                        Object.defineProperty(A, t, {
                          configurable: !1,
                          enumerable: !0,
                          get: i,
                        });
                    }),
                    (e.n = function (A) {
                      var t =
                        A && A.__esModule
                          ? function () {
                              return A.default;
                            }
                          : function () {
                              return A;
                            };
                      return e.d(t, "a", t), t;
                    }),
                    (e.o = function (A, t) {
                      return Object.prototype.hasOwnProperty.call(A, t);
                    }),
                    (e.p = ""),
                    e((e.s = 10))
                  );
                })([
                  function (A, t) {
                    let e,
                      i,
                      n,
                      s,
                      o,
                      r,
                      a,
                      h,
                      c,
                      l,
                      u,
                      _,
                      f,
                      d,
                      D,
                      g,
                      p,
                      E,
                      w,
                      v,
                      m,
                      P,
                      B,
                      C,
                      O,
                      M,
                      I,
                      R,
                      F;
                    (t.log = function () {
                      window.console.log.apply(window.console, [
                        "%c[Omnitone]%c " +
                          Array.prototype.slice.call(arguments).join(" ") +
                          " %c(@" +
                          performance.now().toFixed(2) +
                          "ms)",
                        "background: #BBDEFB; color: #FF5722; font-weight: 500",
                        "font-weight: 300",
                        "color: #AAA",
                      ]);
                    }),
                      (t.throw = function () {
                        throw (
                          (window.console.error.apply(window.console, [
                            "%c[Omnitone]%c " +
                              Array.prototype.slice.call(arguments).join(" ") +
                              " %c(@" +
                              performance.now().toFixed(2) +
                              "ms)",
                            "background: #C62828; color: #FFEBEE; font-weight: 800",
                            "font-weight: 400",
                            "color: #AAA",
                          ]),
                          new Error(!1))
                        );
                      }),
                      (t.invertMatrix4 = function (A, t) {
                        return (
                          (e = t[0]),
                          (i = t[1]),
                          (n = t[2]),
                          (s = t[3]),
                          (o = t[4]),
                          (r = t[5]),
                          (a = t[6]),
                          (h = t[7]),
                          (c = t[8]),
                          (l = t[9]),
                          (u = t[10]),
                          (_ = t[11]),
                          (f = t[12]),
                          (d = t[13]),
                          (D = t[14]),
                          (g = t[15]),
                          (p = e * r - i * o),
                          (E = e * a - n * o),
                          (w = e * h - s * o),
                          (v = i * a - n * r),
                          (m = i * h - s * r),
                          (P = n * h - s * a),
                          (B = c * d - l * f),
                          (C = c * D - u * f),
                          (O = c * g - _ * f),
                          (M = l * D - u * d),
                          (I = l * g - _ * d),
                          (R = u * g - _ * D),
                          (F = p * R - E * I + w * M + v * O - m * C + P * B),
                          F
                            ? ((F = 1 / F),
                              (A[0] = (r * R - a * I + h * M) * F),
                              (A[1] = (n * I - i * R - s * M) * F),
                              (A[2] = (d * P - D * m + g * v) * F),
                              (A[3] = (u * m - l * P - _ * v) * F),
                              (A[4] = (a * O - o * R - h * C) * F),
                              (A[5] = (e * R - n * O + s * C) * F),
                              (A[6] = (D * w - f * P - g * E) * F),
                              (A[7] = (c * P - u * w + _ * E) * F),
                              (A[8] = (o * I - r * O + h * B) * F),
                              (A[9] = (i * O - e * I - s * B) * F),
                              (A[10] = (f * m - d * w + g * p) * F),
                              (A[11] = (l * w - c * m - _ * p) * F),
                              (A[12] = (r * C - o * M - a * B) * F),
                              (A[13] = (e * M - i * C + n * B) * F),
                              (A[14] = (d * E - f * v - D * p) * F),
                              (A[15] = (c * v - l * E + u * p) * F),
                              A)
                            : null
                        );
                      }),
                      (t.isDefinedENUMEntry = function (A, t) {
                        for (let e in A) if (t === A[e]) return !0;
                        return !1;
                      }),
                      (t.isAudioContext = function (A) {
                        return (
                          A instanceof AudioContext ||
                          A instanceof OfflineAudioContext
                        );
                      }),
                      (t.isAudioBuffer = function (A) {
                        return A instanceof AudioBuffer;
                      }),
                      (t.mergeBufferListByChannel = function (A, e) {
                        const i = e[0].length,
                          n = e[0].sampleRate;
                        let s = 0;
                        for (let A = 0; A < e.length; ++A)
                          s > 32 &&
                            t.throw(
                              "Utils.mergeBuffer: Number of channels cannot exceed 32.(got " +
                                s +
                                ")"
                            ),
                            i !== e[A].length &&
                              t.throw(
                                "Utils.mergeBuffer: AudioBuffer lengths are inconsistent. (expected " +
                                  i +
                                  " but got " +
                                  e[A].length +
                                  ")"
                              ),
                            n !== e[A].sampleRate &&
                              t.throw(
                                "Utils.mergeBuffer: AudioBuffer sample rates are inconsistent. (expected " +
                                  n +
                                  " but got " +
                                  e[A].sampleRate +
                                  ")"
                              ),
                            (s += e[A].numberOfChannels);
                        const o = A.createBuffer(s, i, n);
                        let r = 0;
                        for (let A = 0; A < e.length; ++A)
                          for (let t = 0; t < e[A].numberOfChannels; ++t)
                            o.getChannelData(r++).set(e[A].getChannelData(t));
                        return o;
                      }),
                      (t.splitBufferbyChannel = function (A, e, i) {
                        e.numberOfChannels <= i &&
                          t.throw(
                            "Utils.splitBuffer: Insufficient number of channels. (" +
                              e.numberOfChannels +
                              " splitted by " +
                              i +
                              ")"
                          );
                        let n = [],
                          s = 0;
                        const o = Math.ceil(e.numberOfChannels / i);
                        for (let t = 0; t < o; ++t) {
                          let t = A.createBuffer(i, e.length, e.sampleRate);
                          for (let A = 0; A < i; ++A)
                            s < e.numberOfChannels &&
                              t.getChannelData(A).set(e.getChannelData(s++));
                          n.push(t);
                        }
                        return bufferList;
                      }),
                      (t.getArrayBufferFromBase64String = function (A) {
                        let t = window.atob(A),
                          e = new Uint8Array(t.length);
                        return (
                          e.forEach((A, i) => (e[i] = t.charCodeAt(i))),
                          e.buffer
                        );
                      });
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(0),
                      n = {
                        BASE64: "base64",
                        URL: "url",
                      };

                    function s(A, t, e) {
                      (this._context = i.isAudioContext(A)
                        ? A
                        : i.throw("BufferList: Invalid BaseAudioContext.")),
                        (this._options = {
                          dataType: n.BASE64,
                          verbose: !1,
                        }),
                        e &&
                          (e.dataType &&
                            i.isDefinedENUMEntry(n, e.dataType) &&
                            (this._options.dataType = e.dataType),
                          e.verbose &&
                            (this._options.verbose = Boolean(e.verbose))),
                        (this._bufferList = []),
                        (this._bufferData =
                          this._options.dataType === n.BASE64 ? t : t.slice(0)),
                        (this._numberOfTasks = this._bufferData.length),
                        (this._resolveHandler = null),
                        (this._rejectHandler = new Function());
                    }
                    (s.prototype.load = function () {
                      return new Promise(this._promiseGenerator.bind(this));
                    }),
                      (s.prototype._promiseGenerator = function (A, t) {
                        "function" != typeof A
                          ? i.throw("BufferList: Invalid Promise resolver.")
                          : (this._resolveHandler = A),
                          "function" == typeof t && (this._rejectHandler = t);
                        for (let A = 0; A < this._bufferData.length; ++A)
                          this._options.dataType === n.BASE64
                            ? this._launchAsyncLoadTask(A)
                            : this._launchAsyncLoadTaskXHR(A);
                      }),
                      (s.prototype._launchAsyncLoadTask = function (A) {
                        const t = this;
                        this._context.decodeAudioData(
                          i.getArrayBufferFromBase64String(this._bufferData[A]),
                          function (e) {
                            t._updateProgress(A, e);
                          },
                          function (e) {
                            t._updateProgress(A, null);
                            const n =
                              'BufferList: decoding ArrayByffer("' +
                              A +
                              '" from Base64-encoded data failed. (' +
                              e +
                              ")";
                            i.throw(n), t._rejectHandler(n);
                          }
                        );
                      }),
                      (s.prototype._launchAsyncLoadTaskXHR = function (A) {
                        const t = new XMLHttpRequest();
                        t.open("GET", this._bufferData[A]),
                          (t.responseType = "arraybuffer");
                        const e = this;
                        (t.onload = function () {
                          if (200 === t.status)
                            e._context.decodeAudioData(
                              t.response,
                              function (t) {
                                e._updateProgress(A, t);
                              },
                              function (t) {
                                e._updateProgress(A, null);
                                const n =
                                  'BufferList: decoding "' +
                                  e._bufferData[A] +
                                  '" failed. (' +
                                  t +
                                  ")";
                                i.throw(n), e._rejectHandler(n);
                              }
                            );
                          else {
                            const n =
                              'BufferList: XHR error while loading "' +
                              e._bufferData[A] +
                              "(" +
                              t.statusText +
                              ")";
                            i.throw(n), e._rejectHandler(n);
                          }
                        }),
                          (t.onerror = function (t) {
                            i.throw(
                              'BufferList: XHR network failed on loading "' +
                                e._bufferData[A] +
                                '".'
                            ),
                              e._updateProgress(A, null),
                              e._rejectHandler();
                          }),
                          t.send();
                      }),
                      (s.prototype._updateProgress = function (A, t) {
                        if (
                          ((this._bufferList[A] = t), this._options.verbose)
                        ) {
                          let t =
                            this._options.dataType === n.BASE64
                              ? "ArrayBuffer(" +
                                A +
                                ") from Base64-encoded HRIR"
                              : '"' + this._bufferData[A] + '"';
                          i.log("BufferList: " + t + " successfully loaded.");
                        }
                        if (0 == --this._numberOfTasks) {
                          let A =
                            this._options.dataType === n.BASE64
                              ? this._bufferData.length +
                                " AudioBuffers from Base64-encoded HRIRs"
                              : this._bufferData.length + " files via XHR";
                          i.log("BufferList: " + A + " loaded successfully."),
                            this._resolveHandler(this._bufferList);
                        }
                      }),
                      (A.exports = s);
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = {
                      DEFAULT: [0, 1, 2, 3],
                      SAFARI: [2, 0, 1, 3],
                      FUMA: [0, 3, 1, 2],
                    };

                    function n(A, t) {
                      (this._context = A),
                        (this._splitter =
                          this._context.createChannelSplitter(4)),
                        (this._merger = this._context.createChannelMerger(4)),
                        (this.input = this._splitter),
                        (this.output = this._merger),
                        this.setChannelMap(t || i.DEFAULT);
                    }
                    (n.prototype.setChannelMap = function (A) {
                      Array.isArray(A) &&
                        ((this._channelMap = A),
                        this._splitter.disconnect(),
                        this._splitter.connect(
                          this._merger,
                          0,
                          this._channelMap[0]
                        ),
                        this._splitter.connect(
                          this._merger,
                          1,
                          this._channelMap[1]
                        ),
                        this._splitter.connect(
                          this._merger,
                          2,
                          this._channelMap[2]
                        ),
                        this._splitter.connect(
                          this._merger,
                          3,
                          this._channelMap[3]
                        ));
                    }),
                      (n.ChannelMap = i),
                      (A.exports = n);
                  },
                  function (A, t, e) {
                    "use strict";

                    function i(A) {
                      (this._context = A),
                        (this._splitter =
                          this._context.createChannelSplitter(4)),
                        (this._inY = this._context.createGain()),
                        (this._inZ = this._context.createGain()),
                        (this._inX = this._context.createGain()),
                        (this._m0 = this._context.createGain()),
                        (this._m1 = this._context.createGain()),
                        (this._m2 = this._context.createGain()),
                        (this._m3 = this._context.createGain()),
                        (this._m4 = this._context.createGain()),
                        (this._m5 = this._context.createGain()),
                        (this._m6 = this._context.createGain()),
                        (this._m7 = this._context.createGain()),
                        (this._m8 = this._context.createGain()),
                        (this._outY = this._context.createGain()),
                        (this._outZ = this._context.createGain()),
                        (this._outX = this._context.createGain()),
                        (this._merger = this._context.createChannelMerger(4)),
                        this._splitter.connect(this._inY, 1),
                        this._splitter.connect(this._inZ, 2),
                        this._splitter.connect(this._inX, 3),
                        (this._inY.gain.value = -1),
                        (this._inX.gain.value = -1),
                        this._inY.connect(this._m0),
                        this._inY.connect(this._m1),
                        this._inY.connect(this._m2),
                        this._inZ.connect(this._m3),
                        this._inZ.connect(this._m4),
                        this._inZ.connect(this._m5),
                        this._inX.connect(this._m6),
                        this._inX.connect(this._m7),
                        this._inX.connect(this._m8),
                        this._m0.connect(this._outY),
                        this._m1.connect(this._outZ),
                        this._m2.connect(this._outX),
                        this._m3.connect(this._outY),
                        this._m4.connect(this._outZ),
                        this._m5.connect(this._outX),
                        this._m6.connect(this._outY),
                        this._m7.connect(this._outZ),
                        this._m8.connect(this._outX),
                        this._splitter.connect(this._merger, 0, 0),
                        this._outY.connect(this._merger, 0, 1),
                        this._outZ.connect(this._merger, 0, 2),
                        this._outX.connect(this._merger, 0, 3),
                        (this._outY.gain.value = -1),
                        (this._outX.gain.value = -1),
                        this.setRotationMatrix3(
                          new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])
                        ),
                        (this.input = this._splitter),
                        (this.output = this._merger);
                    }
                    (i.prototype.setRotationMatrix3 = function (A) {
                      (this._m0.gain.value = A[0]),
                        (this._m1.gain.value = A[1]),
                        (this._m2.gain.value = A[2]),
                        (this._m3.gain.value = A[3]),
                        (this._m4.gain.value = A[4]),
                        (this._m5.gain.value = A[5]),
                        (this._m6.gain.value = A[6]),
                        (this._m7.gain.value = A[7]),
                        (this._m8.gain.value = A[8]);
                    }),
                      (i.prototype.setRotationMatrix4 = function (A) {
                        (this._m0.gain.value = A[0]),
                          (this._m1.gain.value = A[1]),
                          (this._m2.gain.value = A[2]),
                          (this._m3.gain.value = A[4]),
                          (this._m4.gain.value = A[5]),
                          (this._m5.gain.value = A[6]),
                          (this._m6.gain.value = A[8]),
                          (this._m7.gain.value = A[9]),
                          (this._m8.gain.value = A[10]);
                      }),
                      (i.prototype.getRotationMatrix3 = function () {
                        return [
                          this._m0.gain.value,
                          this._m1.gain.value,
                          this._m2.gain.value,
                          this._m3.gain.value,
                          this._m4.gain.value,
                          this._m5.gain.value,
                          this._m6.gain.value,
                          this._m7.gain.value,
                          this._m8.gain.value,
                        ];
                      }),
                      (i.prototype.getRotationMatrix4 = function () {
                        let A = new Float32Array(16);
                        return (
                          (A[0] = this._m0.gain.value),
                          (A[1] = this._m1.gain.value),
                          (A[2] = this._m2.gain.value),
                          (A[4] = this._m3.gain.value),
                          (A[5] = this._m4.gain.value),
                          (A[6] = this._m5.gain.value),
                          (A[8] = this._m6.gain.value),
                          (A[9] = this._m7.gain.value),
                          (A[10] = this._m8.gain.value),
                          A
                        );
                      }),
                      (A.exports = i);
                  },
                  function (A, t, e) {
                    "use strict";

                    function i(A, t) {
                      (this._context = A),
                        (this._active = !1),
                        (this._isBufferLoaded = !1),
                        this._buildAudioGraph(),
                        t && this.setHRIRBufferList(t),
                        this.enable();
                    }
                    (i.prototype._buildAudioGraph = function () {
                      (this._splitterWYZX =
                        this._context.createChannelSplitter(4)),
                        (this._mergerWY = this._context.createChannelMerger(2)),
                        (this._mergerZX = this._context.createChannelMerger(2)),
                        (this._convolverWY = this._context.createConvolver()),
                        (this._convolverZX = this._context.createConvolver()),
                        (this._splitterWY =
                          this._context.createChannelSplitter(2)),
                        (this._splitterZX =
                          this._context.createChannelSplitter(2)),
                        (this._inverter = this._context.createGain()),
                        (this._mergerBinaural =
                          this._context.createChannelMerger(2)),
                        (this._summingBus = this._context.createGain()),
                        this._splitterWYZX.connect(this._mergerWY, 0, 0),
                        this._splitterWYZX.connect(this._mergerWY, 1, 1),
                        this._splitterWYZX.connect(this._mergerZX, 2, 0),
                        this._splitterWYZX.connect(this._mergerZX, 3, 1),
                        this._mergerWY.connect(this._convolverWY),
                        this._mergerZX.connect(this._convolverZX),
                        this._convolverWY.connect(this._splitterWY),
                        this._convolverZX.connect(this._splitterZX),
                        this._splitterWY.connect(this._mergerBinaural, 0, 0),
                        this._splitterWY.connect(this._mergerBinaural, 0, 1),
                        this._splitterWY.connect(this._mergerBinaural, 1, 0),
                        this._splitterWY.connect(this._inverter, 1, 0),
                        this._inverter.connect(this._mergerBinaural, 0, 1),
                        this._splitterZX.connect(this._mergerBinaural, 0, 0),
                        this._splitterZX.connect(this._mergerBinaural, 0, 1),
                        this._splitterZX.connect(this._mergerBinaural, 1, 0),
                        this._splitterZX.connect(this._mergerBinaural, 1, 1),
                        (this._convolverWY.normalize = !1),
                        (this._convolverZX.normalize = !1),
                        (this._inverter.gain.value = -1),
                        (this.input = this._splitterWYZX),
                        (this.output = this._summingBus);
                    }),
                      (i.prototype.setHRIRBufferList = function (A) {
                        this._isBufferLoaded ||
                          ((this._convolverWY.buffer = A[0]),
                          (this._convolverZX.buffer = A[1]),
                          (this._isBufferLoaded = !0));
                      }),
                      (i.prototype.enable = function () {
                        this._mergerBinaural.connect(this._summingBus),
                          (this._active = !0);
                      }),
                      (i.prototype.disable = function () {
                        this._mergerBinaural.disconnect(), (this._active = !1);
                      }),
                      (A.exports = i);
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(0);

                    function n(A, t, e, n, s) {
                      (this._context = A),
                        (this._buffers = new Map()),
                        (this._loadingTasks = {}),
                        (this._resolve = e),
                        (this._reject = n),
                        (this._progress = s);
                      for (let A = 0; A < t.length; A++) {
                        const e = t[A];
                        if (this._loadingTasks.hasOwnProperty(e.name))
                          return void i.log(
                            "Duplicated filename when loading: " + e.name
                          );
                        (this._loadingTasks[e.name] = 0),
                          this._loadAudioFile(e);
                      }
                    }
                    (n.prototype._loadAudioFile = function (A) {
                      const t = new XMLHttpRequest();
                      t.open("GET", A.url), (t.responseType = "arraybuffer");
                      const e = this;
                      (t.onload = function () {
                        200 === t.status
                          ? e._context.decodeAudioData(
                              t.response,
                              function (t) {
                                e._done(A.name, t);
                              },
                              function (t) {
                                i.log(
                                  "Decoding failure: " + A.url + " (" + t + ")"
                                ),
                                  e._done(A.name, null);
                              }
                            )
                          : (i.log(
                              "XHR Error: " + A.url + " (" + t.statusText + ")"
                            ),
                            e._done(A.name, null));
                      }),
                        (t.onerror = function (t) {
                          i.log("XHR Network failure: " + A.url),
                            e._done(A.name, null);
                        }),
                        t.send();
                    }),
                      (n.prototype._done = function (A, t) {
                        (this._loadingTasks[A] =
                          null !== t ? "loaded" : "failed"),
                          this._buffers.set(A, t),
                          this._updateProgress(A);
                      }),
                      (n.prototype._updateProgress = function (A) {
                        let t = 0,
                          e = 0,
                          i = 0;
                        for (const A in this._loadingTasks)
                          Object.prototype.hasOwnProperty.call(
                            this._loadingTasks,
                            A
                          ) &&
                            (i++,
                            "loaded" === this._loadingTasks[A]
                              ? t++
                              : "failed" === this._loadingTasks[A] && e++);
                        "function" != typeof this._progress
                          ? t !== i
                            ? t + e !== i || this._reject(this._buffers)
                            : this._resolve(this._buffers)
                          : this._progress(A, t, i);
                      }),
                      (A.exports = n);
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(0),
                      n = [1.4142, 0.8166, 0.8166, 0.8166];
                    A.exports = function (A) {
                      if (
                        ((this._context = A),
                        (this._input = this._context.createGain()),
                        this._context.createIIRFilter)
                      ) {
                        const A = (function (A, t) {
                          const e = Math.tan((Math.PI * A) / t),
                            i = e * e,
                            n = i + 2 * e + 1;
                          return {
                            lowpassA: [
                              1,
                              (2 * (i - 1)) / n,
                              (i - 2 * e + 1) / n,
                            ],
                            lowpassB: [i / n, (2 * i) / n, i / n],
                            hipassA: [
                              1,
                              (2 * (i - 1)) / n,
                              (i - 2 * e + 1) / n,
                            ],
                            hipassB: [1 / n, -2 / n, 1 / n],
                          };
                        })(690, this._context.sampleRate);
                        (this._lpf = this._context.createIIRFilter(
                          A.lowpassB,
                          A.lowpassA
                        )),
                          (this._hpf = this._context.createIIRFilter(
                            A.hipassB,
                            A.hipassA
                          ));
                      } else
                        i.log(
                          "IIR filter is missing. Using Biquad filter instead."
                        ),
                          (this._lpf = this._context.createBiquadFilter()),
                          (this._hpf = this._context.createBiquadFilter()),
                          (this._lpf.frequency.value = 690),
                          (this._hpf.frequency.value = 690),
                          (this._hpf.type = "highpass");
                      (this._splitterLow =
                        this._context.createChannelSplitter(4)),
                        (this._splitterHigh =
                          this._context.createChannelSplitter(4)),
                        (this._gainHighW = this._context.createGain()),
                        (this._gainHighY = this._context.createGain()),
                        (this._gainHighZ = this._context.createGain()),
                        (this._gainHighX = this._context.createGain()),
                        (this._merger = this._context.createChannelMerger(4)),
                        this._input.connect(this._hpf),
                        this._hpf.connect(this._splitterHigh),
                        this._splitterHigh.connect(this._gainHighW, 0),
                        this._splitterHigh.connect(this._gainHighY, 1),
                        this._splitterHigh.connect(this._gainHighZ, 2),
                        this._splitterHigh.connect(this._gainHighX, 3),
                        this._gainHighW.connect(this._merger, 0, 0),
                        this._gainHighY.connect(this._merger, 0, 1),
                        this._gainHighZ.connect(this._merger, 0, 2),
                        this._gainHighX.connect(this._merger, 0, 3),
                        this._input.connect(this._lpf),
                        this._lpf.connect(this._splitterLow),
                        this._splitterLow.connect(this._merger, 0, 0),
                        this._splitterLow.connect(this._merger, 1, 1),
                        this._splitterLow.connect(this._merger, 2, 2),
                        this._splitterLow.connect(this._merger, 3, 3);
                      const t = this._context.currentTime;
                      this._gainHighW.gain.setValueAtTime(-1 * n[0], t),
                        this._gainHighY.gain.setValueAtTime(-1 * n[1], t),
                        this._gainHighZ.gain.setValueAtTime(-1 * n[2], t),
                        this._gainHighX.gain.setValueAtTime(-1 * n[3], t),
                        (this.input = this._input),
                        (this.output = this._merger);
                    };
                  },
                  function (A, t, e) {
                    "use strict";

                    function i(A, t) {
                      if (2 !== t.IR.numberOfChannels)
                        throw new Error(
                          "IR does not have 2 channels. cannot proceed."
                        );
                      (this._active = !1),
                        (this._context = A),
                        (this._input = this._context.createChannelSplitter(4)),
                        (this._cW = this._context.createGain()),
                        (this._cY = this._context.createGain()),
                        (this._cZ = this._context.createGain()),
                        (this._cX = this._context.createGain()),
                        (this._convolver = this._context.createConvolver()),
                        (this._gain = this._context.createGain()),
                        this._input.connect(this._cW, 0),
                        this._input.connect(this._cY, 1),
                        this._input.connect(this._cZ, 2),
                        this._input.connect(this._cX, 3),
                        this._cW.connect(this._convolver),
                        this._cY.connect(this._convolver),
                        this._cZ.connect(this._convolver),
                        this._cX.connect(this._convolver),
                        this._convolver.connect(this._gain),
                        this._gain.connect(this._context.destination),
                        this.enable(),
                        (this._convolver.normalize = !1),
                        (this._convolver.buffer = t.IR),
                        (this._gain.gain.value = t.gain),
                        (this._cW.gain.value = t.coefficients[0]),
                        (this._cY.gain.value = t.coefficients[1]),
                        (this._cZ.gain.value = t.coefficients[2]),
                        (this._cX.gain.value = t.coefficients[3]),
                        (this.input = this._input);
                    }
                    (i.prototype.enable = function () {
                      this._gain.connect(this._context.destination),
                        (this._active = !0);
                    }),
                      (i.prototype.disable = function () {
                        this._gain.disconnect(), (this._active = !1);
                      }),
                      (A.exports = i);
                  },
                  function (A, t, e) {
                    "use strict";

                    function i(A, t, e) {
                      (this._context = A),
                        (this._active = !1),
                        (this._isBufferLoaded = !1),
                        (this._ambisonicOrder = t),
                        (this._numberOfChannels =
                          (this._ambisonicOrder + 1) *
                          (this._ambisonicOrder + 1)),
                        this._buildAudioGraph(),
                        e && this.setHRIRBufferList(e),
                        this.enable();
                    }
                    (i.prototype._buildAudioGraph = function () {
                      const A = Math.ceil(this._numberOfChannels / 2);
                      (this._inputSplitter =
                        this._context.createChannelSplitter(
                          this._numberOfChannels
                        )),
                        (this._stereoMergers = []),
                        (this._convolvers = []),
                        (this._stereoSplitters = []),
                        (this._positiveIndexSphericalHarmonics =
                          this._context.createGain()),
                        (this._negativeIndexSphericalHarmonics =
                          this._context.createGain()),
                        (this._inverter = this._context.createGain()),
                        (this._binauralMerger =
                          this._context.createChannelMerger(2)),
                        (this._outputGain = this._context.createGain());
                      for (let t = 0; t < A; ++t)
                        (this._stereoMergers[t] =
                          this._context.createChannelMerger(2)),
                          (this._convolvers[t] =
                            this._context.createConvolver()),
                          (this._stereoSplitters[t] =
                            this._context.createChannelSplitter(2)),
                          (this._convolvers[t].normalize = !1);
                      for (let A = 0; A <= this._ambisonicOrder; ++A)
                        for (let t = -A; t <= A; t++) {
                          const e = A * A + A + t,
                            i = Math.floor(e / 2);
                          this._inputSplitter.connect(
                            this._stereoMergers[i],
                            e,
                            e % 2
                          ),
                            this._stereoMergers[i].connect(this._convolvers[i]),
                            this._convolvers[i].connect(
                              this._stereoSplitters[i]
                            ),
                            t >= 0
                              ? this._stereoSplitters[i].connect(
                                  this._positiveIndexSphericalHarmonics,
                                  e % 2
                                )
                              : this._stereoSplitters[i].connect(
                                  this._negativeIndexSphericalHarmonics,
                                  e % 2
                                );
                        }
                      this._positiveIndexSphericalHarmonics.connect(
                        this._binauralMerger,
                        0,
                        0
                      ),
                        this._positiveIndexSphericalHarmonics.connect(
                          this._binauralMerger,
                          0,
                          1
                        ),
                        this._negativeIndexSphericalHarmonics.connect(
                          this._binauralMerger,
                          0,
                          0
                        ),
                        this._negativeIndexSphericalHarmonics.connect(
                          this._inverter
                        ),
                        this._inverter.connect(this._binauralMerger, 0, 1),
                        (this._inverter.gain.value = -1),
                        (this.input = this._inputSplitter),
                        (this.output = this._outputGain);
                    }),
                      (i.prototype.setHRIRBufferList = function (A) {
                        if (!this._isBufferLoaded) {
                          for (let t = 0; t < A.length; ++t)
                            this._convolvers[t].buffer = A[t];
                          this._isBufferLoaded = !0;
                        }
                      }),
                      (i.prototype.enable = function () {
                        this._binauralMerger.connect(this._outputGain),
                          (this._active = !0);
                      }),
                      (i.prototype.disable = function () {
                        this._binauralMerger.disconnect(), (this._active = !1);
                      }),
                      (A.exports = i);
                  },
                  function (A, t, e) {
                    "use strict";

                    function i(A, t) {
                      return A === t ? 1 : 0;
                    }

                    function n(A, t, e, i, n) {
                      const s = (i + t) * (2 * t + 1) + (e + t);
                      A[t - 1][s].gain.value = n;
                    }

                    function s(A, t, e, i) {
                      const n = (i + t) * (2 * t + 1) + (e + t);
                      return A[t - 1][n].gain.value;
                    }

                    function o(A, t, e, i, n) {
                      return i === n
                        ? s(A, 1, t, 1) * s(A, n - 1, e, n - 1) -
                            s(A, 1, t, -1) * s(A, n - 1, e, 1 - n)
                        : i === -n
                        ? s(A, 1, t, 1) * s(A, n - 1, e, 1 - n) +
                          s(A, 1, t, -1) * s(A, n - 1, e, n - 1)
                        : s(A, 1, t, 0) * s(A, n - 1, e, i);
                    }

                    function r(A, t, e, i) {
                      return o(A, 0, t, e, i);
                    }

                    function a(A, t, e, n) {
                      if (0 === t) return o(A, 1, 1, e, n) + o(A, -1, -1, e, n);
                      if (t > 0) {
                        const s = i(t, 1);
                        return (
                          o(A, 1, t - 1, e, n) * Math.sqrt(1 + s) -
                          o(A, -1, 1 - t, e, n) * (1 - s)
                        );
                      }
                      {
                        const s = i(t, -1);
                        return (
                          o(A, 1, t + 1, e, n) * (1 - s) +
                          o(A, -1, -t - 1, e, n) * Math.sqrt(1 + s)
                        );
                      }
                    }

                    function h(A, t, e, i) {
                      return 0 === t
                        ? 0
                        : t > 0
                        ? o(A, 1, t + 1, e, i) + o(A, -1, -t - 1, e, i)
                        : o(A, 1, t - 1, e, i) - o(A, -1, 1 - t, e, i);
                    }

                    function c(A, t, e) {
                      const n = i(A, 0),
                        s =
                          Math.abs(t) === e
                            ? 1 / (2 * e * (2 * e - 1))
                            : 1 / ((e + t) * (e - t));
                      return [
                        Math.sqrt((e + A) * (e - A) * s),
                        0.5 *
                          (1 - 2 * n) *
                          Math.sqrt(
                            (1 + n) *
                              (e + Math.abs(A) - 1) *
                              (e + Math.abs(A)) *
                              s
                          ),
                        -0.5 *
                          (1 - n) *
                          Math.sqrt((e - Math.abs(A) - 1) * (e - Math.abs(A))) *
                          s,
                      ];
                    }

                    function l(A, t) {
                      for (let e = -t; e <= t; e++)
                        for (let i = -t; i <= t; i++) {
                          const s = c(e, i, t);
                          Math.abs(s[0]) > 0 && (s[0] *= r(A, e, i, t)),
                            Math.abs(s[1]) > 0 && (s[1] *= a(A, e, i, t)),
                            Math.abs(s[2]) > 0 && (s[2] *= h(A, e, i, t)),
                            n(A, t, e, i, s[0] + s[1] + s[2]);
                        }
                    }

                    function u(A) {
                      for (let t = 2; t <= A.length; t++) l(A, t);
                    }

                    function _(A, t) {
                      (this._context = A), (this._ambisonicOrder = t);
                      const e = (t + 1) * (t + 1);
                      let i, n, s, o, r;
                      (this._splitter = this._context.createChannelSplitter(e)),
                        (this._merger = this._context.createChannelMerger(e)),
                        (this._gainNodeMatrix = []);
                      for (let A = 1; A <= t; A++) {
                        (i = A * A),
                          (n = 2 * A + 1),
                          (this._gainNodeMatrix[A - 1] = []);
                        for (let t = 0; t < n; t++) {
                          s = i + t;
                          for (let e = 0; e < n; e++)
                            (o = i + e),
                              (r = t * n + e),
                              (this._gainNodeMatrix[A - 1][r] =
                                this._context.createGain()),
                              this._splitter.connect(
                                this._gainNodeMatrix[A - 1][r],
                                s
                              ),
                              this._gainNodeMatrix[A - 1][r].connect(
                                this._merger,
                                0,
                                o
                              );
                        }
                      }
                      this._splitter.connect(this._merger, 0, 0),
                        this.setRotationMatrix3(
                          new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])
                        ),
                        (this.input = this._splitter),
                        (this.output = this._merger);
                    }
                    (_.prototype.setRotationMatrix3 = function (A) {
                      for (let t = 0; t < 9; ++t)
                        this._gainNodeMatrix[0][t].gain.value = A[t];
                      u(this._gainNodeMatrix);
                    }),
                      (_.prototype.setRotationMatrix4 = function (A) {
                        (this._gainNodeMatrix[0][0].gain.value = A[0]),
                          (this._gainNodeMatrix[0][1].gain.value = A[1]),
                          (this._gainNodeMatrix[0][2].gain.value = A[2]),
                          (this._gainNodeMatrix[0][3].gain.value = A[4]),
                          (this._gainNodeMatrix[0][4].gain.value = A[5]),
                          (this._gainNodeMatrix[0][5].gain.value = A[6]),
                          (this._gainNodeMatrix[0][6].gain.value = A[8]),
                          (this._gainNodeMatrix[0][7].gain.value = A[9]),
                          (this._gainNodeMatrix[0][8].gain.value = A[10]),
                          u(this._gainNodeMatrix);
                      }),
                      (_.prototype.getRotationMatrix3 = function () {
                        let A = new Float32Array(9);
                        for (let t = 0; t < 9; ++t)
                          A[t] = this._gainNodeMatrix[0][t].gain.value;
                        return A;
                      }),
                      (_.prototype.getRotationMatrix4 = function () {
                        let A = new Float32Array(16);
                        return (
                          (A[0] = this._gainNodeMatrix[0][0].gain.value),
                          (A[1] = this._gainNodeMatrix[0][1].gain.value),
                          (A[2] = this._gainNodeMatrix[0][2].gain.value),
                          (A[4] = this._gainNodeMatrix[0][3].gain.value),
                          (A[5] = this._gainNodeMatrix[0][4].gain.value),
                          (A[6] = this._gainNodeMatrix[0][5].gain.value),
                          (A[8] = this._gainNodeMatrix[0][6].gain.value),
                          (A[9] = this._gainNodeMatrix[0][7].gain.value),
                          (A[10] = this._gainNodeMatrix[0][8].gain.value),
                          A
                        );
                      }),
                      (_.prototype.getAmbisonicOrder = function () {
                        return this._ambisonicOrder;
                      }),
                      (A.exports = _);
                  },
                  function (A, t, e) {
                    "use strict";
                    t.Omnitone = e(11);
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(1),
                      n = e(4),
                      s = e(12),
                      o = e(6),
                      r = e(14),
                      a = e(3),
                      h = e(2),
                      c = e(7),
                      l = e(8),
                      u = e(16),
                      _ = e(9),
                      f = e(19),
                      d = e(0),
                      D = e(20),
                      g = e(5);
                    let p = {};
                    (p.browserInfo = f.getBrowserInfo()),
                      (p.loadAudioBuffers = function (A, t) {
                        return new Promise(function (e, i) {
                          new g(
                            A,
                            t,
                            function (A) {
                              e(A);
                            },
                            i
                          );
                        });
                      }),
                      (p.createBufferList = function (A, t, e) {
                        return new i(
                          A,
                          t,
                          e || {
                            dataType: "url",
                          }
                        ).load();
                      }),
                      (p.mergeBufferListByChannel = d.mergeBufferListByChannel),
                      (p.splitBufferbyChannel = d.splitBufferbyChannel),
                      (p.createFOAConvolver = function (A, t) {
                        return new n(A, t);
                      }),
                      (p.createFOARouter = function (A, t) {
                        return new h(A, t);
                      }),
                      (p.createFOARotator = function (A) {
                        return new a(A);
                      }),
                      (p.createFOAPhaseMatchedFilter = function (A) {
                        return new o(A);
                      }),
                      (p.createFOAVirtualSpeaker = function (A, t) {
                        return new c(A, t);
                      }),
                      (p.createFOADecoder = function (A, t, e) {
                        return (
                          d.log(
                            "WARNING: FOADecoder is deprecated in favor of FOARenderer."
                          ),
                          new s(A, t, e)
                        );
                      }),
                      (p.createFOARenderer = function (A, t) {
                        return new r(A, t);
                      }),
                      (p.createHOARotator = function (A, t) {
                        return new _(A, t);
                      }),
                      (p.createHOAConvolver = function (A, t, e) {
                        return new l(A, t, e);
                      }),
                      (p.createHOARenderer = function (A, t) {
                        return new u(A, t);
                      }),
                      d.log(
                        "Version " +
                          D +
                          " (running " +
                          p.browserInfo.name +
                          " " +
                          p.browserInfo.version +
                          " on " +
                          p.browserInfo.platform +
                          ")"
                      ),
                      "safari" === p.browserInfo.name.toLowerCase() &&
                        (f.patchSafari(),
                        d.log(
                          p.browserInfo.name +
                            " detected. Appliying polyfill..."
                        )),
                      (A.exports = p);
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(5),
                      n = e(2),
                      s = e(3),
                      o = e(6),
                      r = e(7),
                      a = e(13),
                      h = e(0);

                    function c(A, t, e) {
                      (this._isDecoderReady = !1),
                        (this._context = A),
                        (this._videoElement = t),
                        (this._decodingMode = "ambisonic"),
                        (this._postGainDB = 0),
                        (this._HRTFSetUrl =
                          "https://raw.githubusercontent.com/GoogleChrome/omnitone/master/build/resources/"),
                        (this._channelMap = n.ChannelMap.DEFAULT),
                        e &&
                          (e.postGainDB && (this._postGainDB = e.postGainDB),
                          e.HRTFSetUrl && (this._HRTFSetUrl = e.HRTFSetUrl),
                          e.channelMap && (this._channelMap = e.channelMap)),
                        (this._speakerData = []);
                      for (let A = 0; A < a.length; ++A)
                        this._speakerData.push({
                          name: a[A].name,
                          url: this._HRTFSetUrl + "/" + a[A].url,
                          coef: a[A].coef,
                        });
                      this._tempMatrix4 = new Float32Array(16);
                    }
                    (c.prototype.initialize = function () {
                      h.log(
                        "Initializing... (mode: " + this._decodingMode + ")"
                      );
                      let A = this._channelMap.toString(),
                        t = n.ChannelMap.DEFAULT.toString();
                      A !== t &&
                        h.log(
                          "Remapping channels ([" + t + "] -> [" + A + "])"
                        ),
                        (this._audioElementSource =
                          this._context.createMediaElementSource(
                            this._videoElement
                          )),
                        (this._foaRouter = new n(
                          this._context,
                          this._channelMap
                        )),
                        (this._foaRotator = new s(this._context)),
                        (this._foaPhaseMatchedFilter = new o(this._context)),
                        this._audioElementSource.connect(this._foaRouter.input),
                        this._foaRouter.output.connect(this._foaRotator.input),
                        this._foaRotator.output.connect(
                          this._foaPhaseMatchedFilter.input
                        ),
                        (this._foaVirtualSpeakers = []),
                        (this._bypass = this._context.createGain()),
                        this._audioElementSource.connect(this._bypass);
                      const e = Math.pow(10, this._postGainDB / 20);
                      h.log(
                        "Gain compensation: " +
                          e +
                          " (" +
                          this._postGainDB +
                          "dB)"
                      );
                      const a = this;
                      return new Promise(function (A, t) {
                        new i(
                          a._context,
                          a._speakerData,
                          function (t) {
                            for (let A = 0; A < a._speakerData.length; ++A)
                              (a._foaVirtualSpeakers[A] = new r(a._context, {
                                coefficients: a._speakerData[A].coef,
                                IR: t.get(a._speakerData[A].name),
                                gain: e,
                              })),
                                a._foaPhaseMatchedFilter.output.connect(
                                  a._foaVirtualSpeakers[A].input
                                );
                            a.setMode(a._decodingMode),
                              (a._isDecoderReady = !0),
                              h.log(
                                "HRTF IRs are loaded successfully. The decoder is ready."
                              ),
                              A();
                          },
                          t
                        );
                      });
                    }),
                      (c.prototype.setRotationMatrix = function (A) {
                        this._foaRotator.setRotationMatrix(A);
                      }),
                      (c.prototype.setRotationMatrixFromCamera = function (A) {
                        h.invertMatrix4(this._tempMatrix4, A.elements),
                          this._foaRotator.setRotationMatrix4(
                            this._tempMatrix4
                          );
                      }),
                      (c.prototype.setMode = function (A) {
                        if (A !== this._decodingMode) {
                          switch (A) {
                            case "bypass":
                              this._decodingMode = "bypass";
                              for (
                                let A = 0;
                                A < this._foaVirtualSpeakers.length;
                                ++A
                              )
                                this._foaVirtualSpeakers[A].disable();
                              this._bypass.connect(this._context.destination);
                              break;
                            case "ambisonic":
                              this._decodingMode = "ambisonic";
                              for (
                                let A = 0;
                                A < this._foaVirtualSpeakers.length;
                                ++A
                              )
                                this._foaVirtualSpeakers[A].enable();
                              this._bypass.disconnect();
                              break;
                            case "off":
                              this._decodingMode = "off";
                              for (
                                let A = 0;
                                A < this._foaVirtualSpeakers.length;
                                ++A
                              )
                                this._foaVirtualSpeakers[A].disable();
                              this._bypass.disconnect();
                          }
                          h.log("Decoding mode changed. (" + A + ")");
                        }
                      }),
                      (A.exports = c);
                  },
                  function (A, t) {
                    A.exports = [
                      {
                        name: "E35_A135",
                        url: "E35_A135.wav",
                        gainFactor: 1,
                        coef: [0.125, 0.216495, 0.21653, -0.216495],
                      },
                      {
                        name: "E35_A-135",
                        url: "E35_A-135.wav",
                        gainFactor: 1,
                        coef: [0.125, -0.216495, 0.21653, -0.216495],
                      },
                      {
                        name: "E-35_A135",
                        url: "E-35_A135.wav",
                        gainFactor: 1,
                        coef: [0.125, 0.216495, -0.21653, -0.216495],
                      },
                      {
                        name: "E-35_A-135",
                        url: "E-35_A-135.wav",
                        gainFactor: 1,
                        coef: [0.125, -0.216495, -0.21653, -0.216495],
                      },
                      {
                        name: "E35_A45",
                        url: "E35_A45.wav",
                        gainFactor: 1,
                        coef: [0.125, 0.216495, 0.21653, 0.216495],
                      },
                      {
                        name: "E35_A-45",
                        url: "E35_A-45.wav",
                        gainFactor: 1,
                        coef: [0.125, -0.216495, 0.21653, 0.216495],
                      },
                      {
                        name: "E-35_A45",
                        url: "E-35_A45.wav",
                        gainFactor: 1,
                        coef: [0.125, 0.216495, -0.21653, 0.216495],
                      },
                      {
                        name: "E-35_A-45",
                        url: "E-35_A-45.wav",
                        gainFactor: 1,
                        coef: [0.125, -0.216495, -0.21653, 0.216495],
                      },
                    ];
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(1),
                      n = e(4),
                      s = e(15),
                      o = e(3),
                      r = e(2),
                      a = e(0),
                      h = {
                        AMBISONIC: "ambisonic",
                        BYPASS: "bypass",
                        OFF: "off",
                      };

                    function c(A, t) {
                      (this._context = a.isAudioContext(A)
                        ? A
                        : a.throw("FOARenderer: Invalid BaseAudioContext.")),
                        (this._config = {
                          channelMap: r.ChannelMap.DEFAULT,
                          renderingMode: h.AMBISONIC,
                        }),
                        t &&
                          (t.channelMap &&
                            (Array.isArray(t.channelMap) &&
                            4 === t.channelMap.length
                              ? (this._config.channelMap = t.channelMap)
                              : a.throw(
                                  "FOARenderer: Invalid channel map. (got " +
                                    t.channelMap +
                                    ")"
                                )),
                          t.hrirPathList &&
                            (Array.isArray(t.hrirPathList) &&
                            2 === t.hrirPathList.length
                              ? (this._config.pathList = t.hrirPathList)
                              : a.throw(
                                  "FOARenderer: Invalid HRIR URLs. It must be an array with 2 URLs to HRIR files. (got " +
                                    t.hrirPathList +
                                    ")"
                                )),
                          t.renderingMode &&
                            (Object.values(h).includes(t.renderingMode)
                              ? (this._config.renderingMode = t.renderingMode)
                              : a.log(
                                  "FOARenderer: Invalid rendering mode order. (got" +
                                    t.renderingMode +
                                    ') Fallbacks to the mode "ambisonic".'
                                ))),
                        this._buildAudioGraph(),
                        (this._tempMatrix4 = new Float32Array(16)),
                        (this._isRendererReady = !1);
                    }
                    (c.prototype._buildAudioGraph = function () {
                      (this.input = this._context.createGain()),
                        (this.output = this._context.createGain()),
                        (this._bypass = this._context.createGain()),
                        (this._foaRouter = new r(
                          this._context,
                          this._config.channelMap
                        )),
                        (this._foaRotator = new o(this._context)),
                        (this._foaConvolver = new n(this._context)),
                        this.input.connect(this._foaRouter.input),
                        this.input.connect(this._bypass),
                        this._foaRouter.output.connect(this._foaRotator.input),
                        this._foaRotator.output.connect(
                          this._foaConvolver.input
                        ),
                        this._foaConvolver.output.connect(this.output),
                        (this.input.channelCount = 4),
                        (this.input.channelCountMode = "explicit"),
                        (this.input.channelInterpretation = "discrete");
                    }),
                      (c.prototype._initializeCallback = function (A, t) {
                        (this._config.pathList
                          ? new i(this._context, this._config.pathList, {
                              dataType: "url",
                            })
                          : new i(this._context, s)
                        )
                          .load()
                          .then(
                            function (t) {
                              this._foaConvolver.setHRIRBufferList(t),
                                this.setRenderingMode(
                                  this._config.renderingMode
                                ),
                                (this._isRendererReady = !0),
                                a.log(
                                  "FOARenderer: HRIRs loaded successfully. Ready."
                                ),
                                A();
                            }.bind(this),
                            function () {
                              const A =
                                "FOARenderer: HRIR loading/decoding failed.";
                              a.throw(A), t(A);
                            }
                          );
                      }),
                      (c.prototype.initialize = function () {
                        return (
                          a.log(
                            "FOARenderer: Initializing... (mode: " +
                              this._config.renderingMode +
                              ")"
                          ),
                          new Promise(
                            this._initializeCallback.bind(this),
                            function (A) {
                              a.throw(
                                "FOARenderer: Initialization failed. (" +
                                  A +
                                  ")"
                              );
                            }
                          )
                        );
                      }),
                      (c.prototype.setChannelMap = function (A) {
                        this._isRendererReady &&
                          A.toString() !== this._config.channelMap.toString() &&
                          (a.log(
                            "Remapping channels ([" +
                              this._config.channelMap.toString() +
                              "] -> [" +
                              A.toString() +
                              "])."
                          ),
                          (this._config.channelMap = A.slice()),
                          this._foaRouter.setChannelMap(
                            this._config.channelMap
                          ));
                      }),
                      (c.prototype.setRotationMatrix3 = function (A) {
                        this._isRendererReady &&
                          this._foaRotator.setRotationMatrix3(A);
                      }),
                      (c.prototype.setRotationMatrix4 = function (A) {
                        this._isRendererReady &&
                          this._foaRotator.setRotationMatrix4(A);
                      }),
                      (c.prototype.setRotationMatrixFromCamera = function (A) {
                        this._isRendererReady &&
                          (a.invertMatrix4(this._tempMatrix4, A.elements),
                          this._foaRotator.setRotationMatrix4(
                            this._tempMatrix4
                          ));
                      }),
                      (c.prototype.setRenderingMode = function (A) {
                        if (A !== this._config.renderingMode) {
                          switch (A) {
                            case h.AMBISONIC:
                              this._foaConvolver.enable(),
                                this._bypass.disconnect();
                              break;
                            case h.BYPASS:
                              this._foaConvolver.disable(),
                                this._bypass.connect(this.output);
                              break;
                            case h.OFF:
                              this._foaConvolver.disable(),
                                this._bypass.disconnect();
                              break;
                            default:
                              return void a.log(
                                'FOARenderer: Rendering mode "' +
                                  A +
                                  '" is not supported.'
                              );
                          }
                          (this._config.renderingMode = A),
                            a.log(
                              "FOARenderer: Rendering mode changed. (" + A + ")"
                            );
                        }
                      }),
                      (A.exports = c);
                  },
                  function (A, t) {
                    A.exports = [
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD+/wIA9v8QAPv/CwD+/wcA/v8MAP//AQD7/wEACAAEAPj/+v8YABAA7v/n//v/9P/M/8D//f34/R38EvzxAfEBtA2lDTcBJQFJ9T71FP0D/cD1tfVo/Wv9uPTO9PPmOufc/U/+agL3Aisc/RxuGKEZBv3j/iYMzQ2gAzsEQQUABiQFrASzA5cB2QmyCy0AtgR4AeYGtfgAA2j5OQHP+scArPsMBJgEggIEBtz6+QVq/pj/aPg8BPP3gQEi+jEAof0fA1v9+/7S+8IBjvwd/xD4IADL/Pf9zvs+/l3+wgB7/+L+7fzFADH9kf6A+n3+DP6+/TP9xP68/pn+w/26/i39YgA0/u790Pt9/kD+7v1s/Wb+8f4C/1P+pf/x/cT+6/3p/Xz9ff5F/0f9G/4r/6v/4P5L/sL+ff7c/pj+Ov7X/UT+9P5G/oz+6v6A/2D+9/6P/8r/bP7m/ij+C//e/tj/Gf4e/9v+FwDP/lz/sP7F/2H+rv/G/s7/Hf7y/4P+NAD9/k0AK/6w/zP/hACh/sX/gf44AOP+dgCm/iUAk/5qAOD+PwC+/jEAWP4CAAr/bQBw/vv/zf5iACD/OgCS/uD/Cv9oAAb/CgDK/kwA//5tACH/TgCg/h4AHP9aABP/JADP/hEAYv9gAAj/3f8m/ysAYv8gACX/8/8k/ysAXv8bABH//v8j/ygAa/8qAAD/9f9g/1YAWf8JACH/AgB2/z4AXP/w/z3/FgB2/ykAX//9/z//EwCV/zUAS//n/1T/GACK/x4ATv/0/4P/QQB4//v/WP/2/3X/HAB8//P/V//3/2f/AQBh/9v/Tf/x/5P/IwCI/wMAf/8hAKP/JACZ/xUAiv8nAK//HgCr/yMAm/8uAMz/OACi/yQAqf87AMT/MwCY/yUAtP9FAMH/KgCu/ycAyP85AMv/IwCz/xoA1f8qAMn/FgC8/xQA4/8nAMX/CwDJ/xQA4f8ZAMH/BgDO/xQA4f8WAMP/BwDU/xQA4P8QAMH/AQDb/xQA3P8JAMP/AgDh/xIA2v8EAMj/AgDk/w0A1f/+/8v/AwDm/wwA0v/+/9H/BgDl/wkAzv/8/9T/BwDk/wcAzv/8/9r/CQDi/wQAzf/8/9//CADf////0P/9/+L/BwDd//7/0////+T/BgDb//z/1f8AAOf/BQDZ//v/2v8CAOb/AwDY//v/3v8EAOb/AgDY//3/4f8FAOX/AQDZ//7/5P8GAOP/AADb/wAA5/8GAOH////d/wIA5/8FAOD////f/wMA6P8FAOD////h/wQA6P8EAN7////h/wUA4v8DANv/AQDd/wQA3P8CANn/AgDb/wMA2/8CANv/AgDd/wIA3v8CAOH/AQDj/wEA",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAAAAAAA/f8CAP//AQD//wEA//8BAP3/AAACAP7/+f8AAAIA/P8FAAQA8/8AABoA+f/V/wQAHQDO/xoAQQBO/ocA0Px1/ucHW/4UCm8HLO6kAjv8/fCRDdAAYfPiBIgFXveUCM0GBvh6/nz7rf0J/QcQSRVdBgoBSgFR62r9NP8m+LoEAvriBVAAiAPmABEGMf2l+SwBjva6/G4A//8P/CYDMgXm/R0CKAE6/fcBBwAtAND+kQA0A5UDhwFs/8IB8fydAEP/A/8v/e7/mP8j/2YBIwE3Av0AYv+uAOD8lgAg/wwAIf/L/n0Ae//OAJMB3P/XAF//XwCM/08AB/8NAEf/rf4jAT3/lgAJAP4AHgDpAO8AUf9L/07/Qf8KAOD/x/+D/3sATQCDAMoA0f79/+L/EQDt/7EAqv+S/7IAuv/o/wgAc//X//H/SwCm/+3/Yf/B/yoAAADI/7X/AwBg/5EATgCX/xYA/P+q/00AVACY/6v/BADD/zwALQCN/8z/KQDu/ygAEgCZ/6f/VQDC//T/KQCs/7P/UgAfAO7/NgC8/57/awAZAPP/+P/V/8z/bQBBAL//DgD0/+T/TABBAMz/CwAxAPz/SQBqALn/BgALAPz/EAA7AIz/3/8iAAUA//8kALf/y/9VABQA+v81AOj/0P9cAB4A+f8WAOr/vv83ABgAw/8JAOj/4f8nACIAsf/y/w4A3v8gACQAxP/n/ycA7P8WAC0Ayf/U/ycA9v/7/yUA0P/P/zUABADc/xUA5P/J/zcACwDS/xUA9P/m/zAACQDX/+3/9v/2/yQACgDZ/+P/AwAKABYA///b/9j/EQALABkADgD6/+7/GwD4/w4A8P/w//j/EgAEAAUA9f/1/wQAGgD4/wAA5////wAAGQD1////7f8FAAUAFQDv/wAA6v8LAAcAFQDs/wEA9P8SAAYACwDr//7/AQASAAYABQDv/wIAAwAWAAIAAgDv/wAABgATAAEA/f/u/wQABgAQAPr/+P/z/wUACQALAPj/9//4/wgABwAKAPT/+f/5/w4ABwAIAPT/+//9/w4AAwADAPH//f///w8A//8BAPP///8BAA0A/f/+//X/AgACAA0A+//8//b/BAADAAoA+f/7//n/BgADAAcA+P/7//v/BwABAAQA+P/8//3/CQABAAIA9//9////CQD/////+P///wAACAD9//7/+f8AAAAABwD8//3/+v8CAAAABgD7//z//P8EAAAABAD6//3//P8FAP//AgD6//7//v8FAP7/AQD7//////8GAP7/AAD7/wEA//8EAP3/AAD9/wEA/v8DAP3/AAD9/wIA/v8CAP3/AQD9/wIA/v8CAP7/AQD+/wEA",
                    ];
                  },
                  function (A, t, e) {
                    "use strict";
                    const i = e(1),
                      n = e(8),
                      s = e(9),
                      o = e(17),
                      r = e(18),
                      a = e(0),
                      h = {
                        AMBISONIC: "ambisonic",
                        BYPASS: "bypass",
                        OFF: "off",
                      },
                      c = [2, 3];

                    function l(A, t) {
                      (this._context = a.isAudioContext(A)
                        ? A
                        : a.throw("HOARenderer: Invalid BaseAudioContext.")),
                        (this._config = {
                          ambisonicOrder: 3,
                          renderingMode: h.AMBISONIC,
                        }),
                        t &&
                          t.ambisonicOrder &&
                          (c.includes(t.ambisonicOrder)
                            ? (this._config.ambisonicOrder = t.ambisonicOrder)
                            : a.log(
                                "HOARenderer: Invalid ambisonic order. (got " +
                                  t.ambisonicOrder +
                                  ") Fallbacks to 3rd-order ambisonic."
                              )),
                        (this._config.numberOfChannels =
                          (this._config.ambisonicOrder + 1) *
                          (this._config.ambisonicOrder + 1)),
                        (this._config.numberOfStereoChannels = Math.ceil(
                          this._config.numberOfChannels / 2
                        )),
                        t &&
                          t.hrirPathList &&
                          (Array.isArray(t.hrirPathList) &&
                          t.hrirPathList.length ===
                            this._config.numberOfStereoChannels
                            ? (this._config.pathList = t.hrirPathList)
                            : a.throw(
                                "HOARenderer: Invalid HRIR URLs. It must be an array with " +
                                  this._config.numberOfStereoChannels +
                                  " URLs to HRIR files. (got " +
                                  t.hrirPathList +
                                  ")"
                              )),
                        t &&
                          t.renderingMode &&
                          (Object.values(h).includes(t.renderingMode)
                            ? (this._config.renderingMode = t.renderingMode)
                            : a.log(
                                "HOARenderer: Invalid rendering mode. (got " +
                                  t.renderingMode +
                                  ') Fallbacks to "ambisonic".'
                              )),
                        this._buildAudioGraph(),
                        (this._isRendererReady = !1);
                    }
                    (l.prototype._buildAudioGraph = function () {
                      (this.input = this._context.createGain()),
                        (this.output = this._context.createGain()),
                        (this._bypass = this._context.createGain()),
                        (this._hoaRotator = new s(
                          this._context,
                          this._config.ambisonicOrder
                        )),
                        (this._hoaConvolver = new n(
                          this._context,
                          this._config.ambisonicOrder
                        )),
                        this.input.connect(this._hoaRotator.input),
                        this.input.connect(this._bypass),
                        this._hoaRotator.output.connect(
                          this._hoaConvolver.input
                        ),
                        this._hoaConvolver.output.connect(this.output),
                        (this.input.channelCount =
                          this._config.numberOfChannels),
                        (this.input.channelCountMode = "explicit"),
                        (this.input.channelInterpretation = "discrete");
                    }),
                      (l.prototype._initializeCallback = function (A, t) {
                        let e;
                        (e = this._config.pathList
                          ? new i(this._context, this._config.pathList, {
                              dataType: "url",
                            })
                          : 2 === this._config.ambisonicOrder
                          ? new i(this._context, r)
                          : new i(this._context, o)),
                          e.load().then(
                            function (t) {
                              this._hoaConvolver.setHRIRBufferList(t),
                                this.setRenderingMode(
                                  this._config.renderingMode
                                ),
                                (this._isRendererReady = !0),
                                a.log(
                                  "HOARenderer: HRIRs loaded successfully. Ready."
                                ),
                                A();
                            }.bind(this),
                            function () {
                              const A =
                                "HOARenderer: HRIR loading/decoding failed.";
                              a.throw(A), t(A);
                            }
                          );
                      }),
                      (l.prototype.initialize = function () {
                        return (
                          a.log(
                            "HOARenderer: Initializing... (mode: " +
                              this._config.renderingMode +
                              ", ambisonic order: " +
                              this._config.ambisonicOrder +
                              ")"
                          ),
                          new Promise(
                            this._initializeCallback.bind(this),
                            function (A) {
                              a.throw(
                                "HOARenderer: Initialization failed. (" +
                                  A +
                                  ")"
                              );
                            }
                          )
                        );
                      }),
                      (l.prototype.setRotationMatrix3 = function (A) {
                        this._isRendererReady &&
                          this._hoaRotator.setRotationMatrix3(A);
                      }),
                      (l.prototype.setRotationMatrix4 = function (A) {
                        this._isRendererReady &&
                          this._hoaRotator.setRotationMatrix4(A);
                      }),
                      (l.prototype.setRenderingMode = function (A) {
                        if (A !== this._config.renderingMode) {
                          switch (A) {
                            case h.AMBISONIC:
                              this._hoaConvolver.enable(),
                                this._bypass.disconnect();
                              break;
                            case h.BYPASS:
                              this._hoaConvolver.disable(),
                                this._bypass.connect(this.output);
                              break;
                            case h.OFF:
                              this._hoaConvolver.disable(),
                                this._bypass.disconnect();
                              break;
                            default:
                              return void a.log(
                                'HOARenderer: Rendering mode "' +
                                  A +
                                  '" is not supported.'
                              );
                          }
                          (this._config.renderingMode = A),
                            a.log(
                              "HOARenderer: Rendering mode changed. (" + A + ")"
                            );
                        }
                      }),
                      (A.exports = l);
                  },
                  function (A, t) {
                    A.exports = [
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD+/wQA8/8YAP3/CgACAAAA//8CAAYA8/8AAPH/CgDv/97/e/+y/9P+UQDwAHUBEwV7/pP8P/y09bsDwAfNBGYIFf/Y+736+fP890Hv8AGcC3T/vwYy+S70AAICA3AD4AagBw0R4w3ZEAcN8RVYAV8Q8P2z+kECHwdK/jIG0QNKAYUElf8IClj7BgjX+/f8j/l3/5f/6fkK+xz8FP0v/nj/Mf/n/FcBPfvH/1H3+gBP/Hf8cfiCAR/54QBh+UQAcvkzAWL8TP13+iD/V/73+wv9Kv+Y/hv+xPz7/UL83//a/z/9AP6R/5L+jf26/P3+rP26/tD8nP7B/Pv+WP1V/sP9gv91/3P9xP3J/nv/GP5S/sb+IP8v/9j/dv7U/pr+6v+u/Z3/sv5cAOr9Q/83/+n/zP5x/57+2//k/nwA/v01//L+SACB/sD/Ff81AJT+TgDp/ocAm/5dAFT+MgD+/pMAW/7o/yH/xQDA/kkA9P6LAL3+pAC0/iQAz/5UALD+UwAt/3UAhf4UAA//pwC+/joAz/5aAAv/fwDY/iMAIf+uAPP+ZAAc/0QAy/4xAB7/TgDs/goADP8wAEL/NwDo/ub/Uf9BAC3/+v9F/y4ARP9HAFP/EQA3/xMATP81AG3/HQAu/wgAaP9FACb/9f9B/y0AUP8rAED/CwBV/z4AW/8TAGH/BQBK/xsAfv8eAFn/AgB3/zwAff8RAGj//v+E/yAAb//0/3n/FwBz/xcAiv8PAHn/FQCJ/xgAg//x/3j/EQCa/ycAff/w/47/HwCI//X/iv/7/43/JQCM/+n/kP8AAJb/JACj//7/oP8ZAML/SwCo/w4Atv8tAMb/PACr/xcAwP9HAMP/OADF/y4A0f9IANL/NwC//zEA0f9LAMb/MAC8/y4A3f9GAMH/FQDQ/yYA2/8sAMT/AwDX/xkA3v8SAM3/9v/c/w8A4f8LAMj/8f/h/xQA2P8CAMn/8//j/xQA0v/7/9H//P/i/xEA0v/1/9L//f/j/w0A0f/x/9f//v/k/wgAz//u/9z/AwDg/wMA0P/v/9//BQDf////0v/y/+D/CADc//3/0v/2/+L/CgDa//r/1v/5/+T/CgDY//j/2f/9/+T/CADY//f/3P8AAOT/BwDY//f/4P8EAOP/BADZ//j/4v8GAOL/AwDa//r/5f8IAOH/AQDc//3/5v8JAOD//v/f////5v8IAOD//v/h/wIA5/8HAOD//f/j/wMA5/8GAOD//f/l/wYA5v8EAOD//v/m/wYA5f8CAOL////n/wYA5P8BAOH/AADl/wUA4f///+H/AQDk/wMA4f///+T/AQDm/wEA5////+r/AADt/wAA7/////P/AAD1////",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD//////v///wAAAAAAAAAAAQAAAAAA///9/wAABAD+//n/AgAJAAAA+v/+//f/DAAdAPv/+v+l/8L+jf/4/vgAdwVPAQACLQBo+Qj/Ev7o/N3/VgCbA08Bxf+L+yn9J/2HCU8FmgBvDe30Rv5h/LT09gi5CxkA5gOi8/30kwEM+4YJMf2nBmkJJAQQBLoFtvvv+m4A7PF6/R0Bif3qAuf8WARAAf4GyABG/BIAwvr4Acv8U//c/yIC8AEn/B8Daf2CAgMBAf3MAN38vgLK/UT/QwCyAPYClPyvAW/+pQAoASD+zP+R/IYC1f7C/nEBQP96AZb+1QAIAM//yQE7/tkAZ/7TAXL/w/8+AIsAtwB7/24A4v9a/z4A7v4iADb/dwCj/23/kgBOANUAIv8lAKEAxP9gAK7/BwCP/5kA7/9v/0wAzv9DAGT/3/9vAHv/6P+q/xUA7P8XAO//uv/g/2UAEgCV/wEATADM/+7/+//j/+D/9v/i//j/IgD+/xoAxf/6/z4A5/+8/9D/QwDq/+3/OQDT/zUAIgA/APP/PgAjAPD/BwAGACAADAC3//b/HAA3AN//RgDN/w8AIAACAN//GQBDACEAIwA+ACoAJQAeAPz/KgAYAPr/DgAEABYAIgAcAMT/7f8OAOL/5P/2//L/9P8GAPT/7v/8/+7/6v/t//z/AgAUAOL//P8VAAMA4/8IAPb/+P8MAAoA5v8NAAsA9v///wEAAAD9//n/9/8JAAYA7v/6/wMA+f8GAAEA7f/7/xgACAD4/w8A///3/w0A+f8BAAIA/P/5/xIA///9//r/7v/+/xYACQD///H/CwDz/wEADgAHAPP/FADn/+3/AQD5//f/AgD7/wEABwAMAAEADQD8//n/8f8OAPX/BAD+//X/+v8WAAQA+f8CAAEA7/8QAAEA/P8DAAUA9f8KAAwA9v8DAAUA+f8OAAoA9f/7/w0A+v8EAAgA8P/6/woA+//8/wkA+P/3/woA+//8/wcA9//1/woAAwD5/wcA/P/3/w0AAwD3/wEABAD2/wkABgD3/wEABQD3/wUABQD3//v/BwD3/wMABQD3//r/CQD7////BQD6//n/CQD9//3/BAD9//j/BwAAAPv/AwD///j/BwABAPn/AQABAPn/BQACAPn///8DAPr/AwADAPr//v8EAPv/AQADAPv//P8FAP3///8DAPz/+/8FAP7//f8CAP7/+/8EAP///P8BAP//+/8DAAEA+/8AAAEA+/8CAAIA+////wIA/f8AAAIA/P/+/wIA/f8AAAIA/f/9/wMA/////wEA///+/wIA/////wAAAAD+/wAAAAD/////AAD//wAA//8AAP//AAD//wAA",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD////////+//////8AAP////8AAP//AAAAAPz//f8IAAMA9////w4AAQD6/wwA8//+/y8Afv/0/2H/UP5gAbH+2QG1B2cAVAIh/l32FPyM/nACPQDV/+UEo/Q6AQwCu/oLD9kF8QJA/Uz+Wf2KCOcC+wUKBsL5aQBQ97rwOPiPAvn5CAl8AHEDkQPcAA8Bn/lIAdz7HQF1+xz9cAM4/94E4gDKAun+cgPYAYr9JgJr/bf+ivxz/MoBgv5UA8EBSgAQAJ7/UgEk/cQB7f63/sD/vf4XAhT/BQFCADYAnQGI/9EBtv3hALD/vP+c/3H/TgIN/1sBpf8yAP3/4f8qABr+1f8OAJ3/dwAGADEBnv9JAPz/IQBwAIH/jgAS/4wAsACTAOn/DQDCALn/ZQCSAAIAAwD1/9//jv9aADQA/v9EAB0AfgA8AAQACgB9APr/IAARAPT/5v9xACAABAAHAGUAt/89AC4ACgAjAMP/+v/9/xYA7f/1/+D/7P87AC0Auv8RAAcA9/8FAC8A2//y/xIAEwAaADQAJADp/zoAAgAfABIA2f/e/zUA+P/6/w4A9//A/zcA4//P//T/5f/R////EwDb/w4A8/8BABkANADh/xEA+f/0/wIAHADc//j/GwD1//f/GADs/+v/EAAAAPz/EgD3/+r/FgAMAAkAGAD9/+z/IQAQAPH/GQD3//z/CgAfAOX/AgD8//H/BAATAOv/+v///wIABAAdAOj/BQAPAAcAAQATAOz/8/8JAAkA6f8VAOv/+f8QABUA/v8OAO3/+P8KABUA9f8FAPv/5/8TAA0A7f8XAAkAAQAJABYA4/8WAAcACgANABEA7v8EAP7/AAD+/wMA9//7/xAAAQD8/wQA+f/7/wMABgDq/wAA+v/3/wYACQD1//3/BAD9/wgADgDw//r/AgD6/wEACADv//j/BQD///X/BwDu//j/AgACAPP/BAD2//n/BAAGAPb/BAD8//3/BQAJAPL/AwD+//3/BAAIAPP//f8DAPz/AAAGAPP/+/8CAP7//f8FAPX/+f8DAAAA/P8EAPf/+v8GAAMA+/8EAPv/+/8GAAQA+v8CAP///P8EAAUA+f8AAP///f8CAAUA+P///wEA/v8BAAUA+f/+/wIAAAD//wUA+v/9/wMAAQD9/wQA+//9/wMAAgD8/wMA/P/9/wMAAwD7/wEA/v/+/wIAAwD6/wEA///+/wAABAD6/wAAAQD//wAAAwD7////AQAAAP//AwD8//7/AgABAP3/AgD9//7/AQABAP3/AQD+//7/AAACAPz/AAD+//////8BAP3/AAD//wAA//8BAP7/AAD//wAA/v8AAP7/AAD//wAA//8AAP//",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD//////P/9//3//////wAAAAAAAAIAAgACAP//CAAEAEEA//+cAAUAb/8HAAH9+P9eARkAogQUAJn8BwCd/gX/+QQNAKoC9gFdAtb/b/vd/936TP/6AsD/nfqn/un1W/0dA8IEsQLvAJv2bP72+WMAkP8dAcX+nQO2AIr6bP/EABX+NgK/Bdj2IQv2AE4EUAiD/xQAnwIm/B0B/wGNAoH7sQaP/b8CiQakAqD+R/9xA477KQL//6r75v/O/pcCgQCtAiMCBQAkANAARwHf//39hgBl/kUAJgEtAUEATgA/AgoASADK/zUAJv29/vL+l/9c/0cAUwBBAE8A6QE5/87/Wv9NAOf+5v7P/5P/4/9BAKYAQwDD/zYB5v+r/zYATwAp/1v/WQAEAB0AhwA0AA0AIAA3AAEAzv/u/+//5v9m/zwAIADQ/8T/SABiANb/SwAbAFf/MQDX/7L/hP8TAPr/AgAMAAsAHwAZAI3/VgDC/9v/5//x/6P/AwBlAMv/yf82AB4A+P9WAPj/NwDi/1EA0v9JANj/JwAcAAEADABYANj/4f8MAEwAmP82AN//3P8UADYA7//6/wIACADU/ygAyv82AN7/9v/2/ygAxv/9/+3/5//n/zUA6//g/y4ADgD5/wsABwDv/xIADwAGACoAJQD3/zIA+/8FABsAFgDO/zAAHAAIABQALADp/xcACAAAAPH/GADs/wkACQAFAAgAFQDp/wIAHAD1//P/EQDw/+3/GAD9/+f/HAD8//T/DAAQAPH/HwD4//r/DwAPAOj/EQACAOn/DAAXAOX/BAAOANH/9/8MAO//9f8LANT/9f8EAO//6f8NANb/+P8KAOz/5v8MAOD/7f8UAO//7//+//7/9v8YAPj/9f/z/wsA+v8SAPD/+v/x/xYA+f8SAPb/9//3/xEABQACAPn/9//y/xQACQD///b//v/7/xIACQD9//H/AAD7/xEAAgD5//P/AwD9/w8AAgD3//D/BAD//wUA/v/0//D/BgADAAMA/P/2//f/BwAGAP7/+//2//j/CAAFAPv/+f/5//v/BwAHAPn/9//7//7/BQAFAPf/9//+/wEABAACAPf/+P8BAAIAAgAAAPj/9/8CAAMAAAD+//n/+f8EAAQA/v/8//r/+/8EAAMA/P/7//z//P8EAAIA/P/5//7//v8DAAEA+//5//////8CAAAA+//5/wEAAAABAP//+//6/wIAAQD///3//P/7/wMAAQD///3//f/9/wIAAQD9//3//v/9/wMAAQD9//z/AAD//wEAAAD9//z/AAAAAAAA///9//3/AAD//wAA/v////7/AAD//wAA////////AAD//wAA//8AAP//",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD+////+f////v//v///wAA/////wUAAQAIAAIABwACAHkATAAOAaMAAf9C/9X6QvwhArAAtghABW37nv/y+0wAWQNcAE8JRwSOC6AEJe8P8S/zrPWaBI/+LQA/+0L+P/4K8AgAb/8uCh78BQtC614GaQWfAin5UfzN8Tf+GQizAZ4MCQMbGJ4BoRS7AvcHyQARA6n9ZwHZ/z4DvwAZAlAB6gbNAS4GFADFATL7E/2K+j37C/xp/SD9Uv0VAOsDs//WAd3+bv7F/f79mP2X/KH+FwC0/1n+VgFcATABHQGaAET+nf8Y/hoAovpqAXj9CQKW/lsCl/4RApj+bAHk/RcAlv4BAG/+DgDi//3/GwAOAEIAq/+y/3z/8v8+/7T/Tv8//27/mgDZ/1sA+P+cAAAA/P/i/yMAi/85AMP/KgDM/9MA9P+QABoA4QAiACwACwBdAP7/TQDb/y0Ayf+SAA0AZwDg/4wA+/8/AAMAgQDp/w0ADAAQAAoANgAgAA4AKABIAB4A4v/3/+f/+v/c/+n/EADn/wgAFAAqAOz/IwDc/9//3f8XAND/2v/a/w0A5v8BANb/9P/m/wAA8P8ZAN3/RwAGAEsABgB/AP7/NAASAEgABAA3AP3/KgD9/1sA8P8lAOr/FgD1/xAA4/8kAOv/AwD4/xEA5f8NAPT/+v/3/x8A7f8PAPj/IwD5/yAA9/8ZAAEAGgD4/xoA9f8HAAMACAD0/xgA+P8AAPr/IQDp/w4A8v8HAPX/IgD1/wYA+P8GAPX/GgD3/woABQASAAcAGQDw/+v/9P8bAP3/HADs/+f/7/8LAPr//v/0//T/AgD2/wsA6P///+P/CADY//7/5v/3/wQA/v8LAPD/GgD1/yMA/P8QAOv/LADw/yQA+P8XAO7/MQD9/yEAAQAcAPD/IgD9/xMA+/8OAO//FQABAAoA+/8PAPP/FQABAAQA9/8PAPX/CAADAAEA+P8NAPv/CAAGAAUA9/8JAP//AAAFAPz/+f8HAAQA/f8FAP3//P8FAAYA+P8DAP7/+/8AAAcA9/8BAP///f///wgA9//+/wAA/v/8/wUA9//8/wIA///7/wUA+v/7/wIAAAD6/wMA/P/6/wEAAQD6/wEA/v/7/wIAAgD6////AAD7/wEAAgD7//7/AQD8/wAAAwD8//3/AwD9/wAAAgD9//z/AwD/////AgD+//z/AwAAAP7/AQD///3/AgABAP3/AAAAAP3/AgACAPz///8BAP3/AQACAP3//v8BAP7/AAABAP3//v8CAP7///8BAP7//f8CAP////8AAAAA/v8CAAAAAAAAAAAA/v8BAAAAAAD//wAA//8AAP//AAD//wAA//8AAP//",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAAAAP//AAD//wAA//8AAAAA/////wAAAQD+////AAAGAP3/OAABAIIAAwBv//f/E/0QAK0ADQCzA/7/8P4u/0cBDQCJA6ABbQDg/w7/z/9o+Vn/SPnL/1//Ef+2+jr9RfZgA5QFZwILDFj+PAb2/nEFKgKk/R0Dlv6b/FUDsP6YAoj9SgAT/iL/tAPwAv8A0P6zAr7/dwAnAf39uP22/skA2v///2YCoP4UAUsAZgF2AJH+4P70/rz9+f+U/Xv/8v7CAcb+TACS/kwAv/+x/tX9oP71/oL/1f8nAEUAZwGtAAgAIgC/AD4BaP8GAGH/dQDF/64Arf8nAakAhAH9/+kAQQD3AFb/q/8p/yIAR/8FAPD/ZAA/AIYA3v8tADQADQBp/3f/CwABAP3/Wf8OANj/WwDH/xoAe/8DAKz/zv96/z8A3f/J/5X/IAD5//j/q//c/+//RADq//D/vv8pADUAFQDI/y8ACAAbANb/OwD3/+3/9f/e/wcAIAAeAMH/8/8xAC0AEADW/+3/HAADAPv/8P8DAOL/OwD3/xcACQAHAM//5f8XAAcAz//T/9D/HgD9////yf/e//v/AgD//9H/6/////H/+/8hAAIA9//7/w0AFgAQAPL/2v/8/xsAGQABANz/9P8YAAQA/v/y/wMA5v8YAAkAAAAAAAMA7/8KABgADwDs//j/BwATABsA8P/1//z/BAAMAAAA9P/s/xAA/v8GAAkA/v/p/wMACwALAP7/9P/p/wcADQAFAPb/7//4/w0ACAD8//b//v/1/wMACwD1//T/8P/8/wAACQDz/+f/5P8GAAkABQD5//D/+v8FAA0AAwD///T/AgACABAA/v8CAPD/+/8FAAoA9f/3//f//v8GAP7/9v/t//z/+f8AAPj/+v/3/wEA+v8HAPr//P/5/wQA//8DAPr/+P/3/wYA///+//X/+//5/wQA/f/7//X/+//4/wMA/f/8//j//v/9/wYA///8//f/AgAAAAUA/f/6//n/AwACAAIA/f/7//z/AwACAAAA/f/6//3/AgADAP7//f/7/wAAAwAFAPz////8/wMAAgAEAPv//v/+/wMAAgADAPv//v///wMAAQABAPv//f8AAAIAAAD///v//f8BAAIA///+//z//v8CAAIA/v/9//3///8CAAEA/v/9//7/AAACAAAA/v/9////AAABAAAA/f/9/wAAAQABAP///f/+/wEAAQAAAP///v/+/wEAAQD///7//v///wEAAQD///7//v///wEAAAD+//7///8AAAAAAAD+//7///8AAAAA///+//7///8AAAAA////////AAAAAP////////////8AAP//////////",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAAAAAAAAAABAAAAAAD//////////////v////3/////////+//8////AQD9//z/9f8BAAIA+f8dACgAWQBxAJX/qv+Y/uz9aP9k/7UDUQQBAiQA4Pgi/AkB0gKaBsD/+fxp/vz9CQSp/I/+ywDO+vMD0fzK/PABcgBeBfoBv/+uAuH9Sf5gAy39awMmBWUBuP9fA9/9fgDj/2/+EACaACcCSv9Z/2j/rv7hAA0AWf55/7L84P7E/SIAT/67AMv/tf+FAA7/1v+7/gv/IP+E/sQA+P5aAXz/tP9XAFX/tP8o/4r/j//e/yQAMv9mAJT/rgCr/9X/EwCb//H/9f7F/6D/EAAoAK3//v+e/zsAh/+B/7r/if/C/2r/4P/z/6//HwCy/0IA7/9ZALT/y/80ACgA9v/J/9//DgA5ADUALQARADIACwAfAOf/NgArACMACQBBAEcAGAAjAC4AWQBUAHcAAAAfACEAIAAcAPj/CADk/yQA7v89AEEAFwD5/xYA6f8aAOX/AADF/zQADwAUAOT/BQDr/yUA6P8XAOf/HADR/0AA8P8nAAgACQDt/ycAKAAHAPH/IQDz/xsACADn//n/DgADAA4A8P///8z/GgDN/yMA/f8QANj/MwACAC0ACwAOAO3/JgAZAAUACgAAAA4AIgAaAAkADwACAAAAHQATAAUABQACAAgACwAjAO////8AAA8ABQAPAPL//f8GAAsABgAGAPD/8v8GAPz/CAD6//H/6v8PAAgABgD4//3/9v8aAAgABwD1//7//v8QAAoACAD//wUA9v8QAAoABAAFAAgAAgAJAAoAAwD//w0AAgD//wcA/v8DAAoABQAFABUABAAKAAYABwAHAA8ACgAGAAwADwAMAAkAEAAJAAgADwAMAAgADgAJAAUACQAPAAUACwAHAAEABgAIAAEABAAGAP//AgAJAAAAAgAEAP7///8IAAIA//8GAAEAAQAJAAIA/v8EAAMA//8JAAEA/v8DAAMA/v8HAAMA/f8BAAUA/v8FAAMA/v8BAAcA//8DAAMA/v8BAAYA//8CAAMA/////wcAAAAAAAMAAAD//wYAAQD+/wMAAQD//wUAAQD+/wIAAgD//wQAAgD+/wEAAwD//wMAAwD+/wEAAwD//wIAAwD//wEABAAAAAEABAD//wAABAABAAAAAwAAAAAABAABAP//AwABAAAAAwACAP//AgACAAAAAwACAP//AgACAAAAAgACAAAAAQADAAAAAQACAAAAAQADAAAAAQACAAAAAAACAAEAAAACAAEAAAACAAEAAAABAAEAAAABAAEAAAABAAEAAAABAAEAAAABAAEAAAABAAEAAAAAAAAAAAAAAAAA",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAAAAP//AAD//wAA//8AAAAA//8AAP//AAACAAAA+f8BAAYA///4/wIA//8AAA8A/v/V/wEAEwA9AAEBRwA2AF7/kfog/3gBwv99CDYBU/qtAUX/AP7OAfkAX/o9B38FSfwaAuT14/60BAr8CQAI/tfyIQTzAXP+egdUBBwBof7TBMT8bAWi/5EEWwBRAAAKyfxE/8b88vp6ACP+PAF4/qD8MQNM/ygCJ/2XAPD9kP5gAVT/iP9I/lEB4P8qAD0BFAGa/+7/DgB2AOP98gFm/u/+Vv5/AG8ASP9gAM//qv9w//oAcv+2/jIBHgA7/6D/oAAGAKH/lADT/wAAggC8AAYAkP9yAEcAkf8BAOD/RAAr/zUANwDt/xQAJQAkAMT/zwA/AOH/xv9zAGsANQBTAIcALAAvACIATACy/xMADADg/xcAWABvAJL/7f9VAPb/EgDt/wcA4f8kAPP/5P+h/wgACQDy//r/LgAQAMn/8/9CAOX/5v/S/9//3P8pABYAuP/s/w8AFgDt/+3/7v/w/9j/5/8GAOf/2P/2//P//v8kABMAuf/m/xoADADZ/+r/3P8KAAUAKwDe/wsA3P8VAAAADgAfAB0ACAAMAF4AGgAhAPL/MwDz/0kABAAKAPX/LwAbAAkA9v/s/+3/8/8CABAAAADm//n/BQALAAUAAQDj//n/JQAVAPX/9v/+/wIAEQABAPP/8P/1/wAABgD6/+3/7//o//j/DAD8/+b/8P8IAAkABgD4//D/8P8UAAoAAwD4/wAA+f8OAAcAAAAFAPX/9v8TAAkA8v8EAPb/9/8dAA0A7/8CAPn/+f8SAAQA8/8CAOf/+v8DAAgA9P////H//P8IAAUA8//0/wIAAQAGAAgA9//7/wAA+/8EAP//+P/+////AgACAAsA8v/+/wIABQD7/wgA9v/7/wMABAD5/wAA/P/3/wEAAQD7//7//P/1/wQA///3//r////3/wMAAwD1//r/AwD6////AgD4//n/AwD8//7/AgD4//n/AwD+//3/AQD4//n/BQD///n/AAD6//j/BAABAPj/AAD9//v/AwADAPj//v/+//z/AwAEAPj//v8BAP7/AQADAPj//f8CAP////8EAPr//P8DAAAA/v8CAPv//P8DAAEA/f8BAP3//f8DAAIA/P8AAP7//f8DAAIA/P///wAA/f8BAAIA+//+/wEA//8AAAEA+//+/wEA/////wEA/P/+/wEA///+/wAA/f/9/wEAAAD9/wAA/f/+/wEAAQD8/////v/+/wAAAQD8////////////AQD9////AAD/////AAD+////AAAAAP//AAD///////8AAP//AAD//wAA//8AAP//",
                    ];
                  },
                  function (A, t) {
                    A.exports = [
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD+/wQA8/8ZAPr/DAD+/wMA/v8KAAQA/f8DAAMABADs//z/8v/z/8f/R/90/ob+//zAAWsDAwY3DKn9//tu93DvkwI6An4CuwJ0/BH7VPux92X0Gu7N/EX9mgfqCkkIiRMgBd4NQQGL/c0G/xBxAKELZATUA/sIHRSx+fkCyAUmBNEJIARlAdHz2AjNACcIsAW4AlECsvtJ/P/7K/tf++n8aP4W+g0FXAElAMn8nQHn/sT+Zv7N+9X2xvzM/O3+EvpqBBD7SQLd+vb/sPlw/JD72/3n+Rr+L/wS/vz6UQGg/Nf+Av5L/5X9Gv2//SP+mf3j/lf+v/2B/ZH/5P05/iL9MP9F/uf9UP4v/qv9mv7o/Xn+wP2k/8L+uP5J/tD+Dv/Y/bL+mP72/n3+pP+7/hAA+/5zAGH+Z/+u/g8Azv2y/6L+//9o/iIADP8VACz/CwCN/pb/1v4yAFP+wf+4/jsAcf5VAP3+bADa/nMA6f4sAOT+IQBd/v7/7v6aAIL+QADe/nEA0P4yAKz+CQCo/moAuf5xAN7+mAC8/jcANf9eAPX+IAA1/1kAAP9hAMz+PQD5/m0A2/4gAPr+UQDh/jQAEv9BAPH+FABN/zkASv9DADP/BABe/1IAGf8oAE3/RQAw/zIAQf8mADn/GgBE/xIAR/8hAD7/BABy/zEAKP/0/07/GwBX/z4ARf8mAFr/QQBV/zUAVP8eAFz/JABt/0EAUP8MAHz/KgBr/ycAYv8EAH3/MABl/x8Agv8bAIj/GgBv//z/ff8AAJX/IABu/+T/jv/r/4z/9/9n/77/pP8JAJD/EQCJ//r/q/8WAJ//GQCU/xYAtv8qAKr/PQCW/ysAwf8+ALb/OgC3/ygAz/8uAM7/OgDH/ygAz/8kAMz/OgC//xsA1f8qAMn/LwDN/xcA1f8oAMv/JQDR/xMAzf8bAM//HgDU/wUA2v8ZANL/EwDW/wEA1f8ZAMz/BwDX/wIA0v8SANT/BQDW/wMA0/8PANT/AADY/wIA1f8MANX/+f/a/wUA0v8IANf/+//Y/wUA0/8DANr/+f/Y/wQA1v8BANr/+f/Z/wUA1//8/9z/+v/Y/wYA2f/8/93//v/Y/wUA2v/9/93////Z/wUA3P/8/97/AgDa/wMA3v/8/97/AwDb/wIA3//9/97/BADd/wEA4f///9//BQDf/wAA4v8AAN//BQDf/wAA4/8CAN//BADh/wAA4/8DAOD/BADi////4/8DAOH/AwDk/wAA5P8FAOL/AgDl/wEA5P8FAOL/AQDl/wEA4/8EAOL/AQDj/wIA4P8DAN//AADg/wIA3v8CAOD/AADh/wEA4v8AAOP/AADm/wAA6P8AAOz/AADu/wAA",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD//////f/+//7///8AAP////8BAAEA/f8AAAEAAQAFAAUA9//6/x0A2f/9/xMA3P+jAE//of9HAKP//gCj/77/Z/vi/28D9/ywDJAJIvr6AsX0Xec4BhcGzf23DZP7yfZ6C1//nwBDBIHyYgob/Tf3sQ41ANoKRA/A+E7yffAa9gD5EQUBDMwMygiqAHMAqPqhAGUB2/gE+a78H/+4APT6DwIUAA0HNwMhBfL8E/90A5n7dP9cALIC+v5C/q0AOv9kAogBHv01/+3/qAQD/ub8T/4vAOUA5P6KATv+ywEYAeT+KP6i/3gCFP6h/hr/+P83ACL/VADn/8UARQJI/4MAu/8qAlj+wf4iAPb/LgFJ/8QAUABAAI4ABf+k/3X/YgFK/ij/j/9HADoAi/+WAA0BVwC/ACL/LACe//cARv9i/xgAUgA0ACj/FgBgAIj/5P9M/7z/zv8/AKz/gv8sAEQA6/+I/yYAawDL/7T/xf8qAOv/FQCu/5n/EgAyAO3/i/9LAE4A+//R//P/FgDe/8z/u/8DADIALAAZALL/TAA8ABwAo//1/xwA/P/L/z0A6P8jAN7/7v+a/zAAwf/7/3//KQAuACwA9v8RAGYAIwBNADgAKgASAF0ADgANACEAMQDH//H/LQACAB0Ay////x0APAABAAQA2v8iAAcAEgDE/+v/FQD+/+P/DAD1/97/6v/4//X/EwD4/+7/5P8cAA0ACQDH//7/CQAXAAEA/P/5//j/CwAWAAEABQD9//n/AQAWAB0A7v/k/wAACQAmAP//9/8AAPn/8/8aAO//6/8fAOv/5v8hAP//5/8PAOf/AAAGAPn/6v8JAAYABgABAOv/1//1//L/+P8DABcA6f/8/wMACgD7/xAA3v/2//z/DADu//z/5v/5/wEA/P/6//7/7v/x/wQABgD5/wAA8v/w/wkAEQD2//j/+v8EAAcAEAD3//v/+v8CAAAACQD3//v//v/9/wUADAD2//X/AgAHAAAABwD2//T/BgAKAP7/AQD4//r/BAAIAPn/AAD3//f/BQAHAPv//v/7//n/BQAJAPj/+v/9//7/AgAGAPj/+f8BAAEAAgAFAPn/+v8BAAIAAAAEAPn/+f8CAAQA/v8BAPr/+v8CAAQA/P////v//P8CAAQA+//+//3//f8CAAUA+v/9//////8AAAQA+v/8////AAD//wIA+//8/wAAAQD+/wEA+//8/wAAAgD9/////P/9/wEAAgD8//7//f/9/wAAAgD8//3//v/+////AQD8//z/////////AAD8//3///8AAP7/AAD9//7///8AAP7////+//////8AAP7////+////////////////////",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD//////v8AAP///////wAAAAAAAP7/AQABAAAABwD///X/BQAjAPL/CQDb/9D/GAAb/7sAYwCW/z0BcP/X/7T/2QDW+wH8yANCCCUJ5QT++UXmhPwhA78FuAxH+p78ifudBlAG9vmu/lAK2fdlB///cfjoCa0E7Akn9Yb/zvba+AkAHPywBGEBFwUNAL8AXAAGA20DFvmR/kz+F/06Ag/+GwHl/5EEKgJd/q0AP/ym/9n6EfxY/2H+/QFtAC4C6QBDAaMCo/20/+3/3f/p/fL9rv9V/6cBhQHuAX4AcwJYAaH/IP/P/gsApP0LAe7/sQBuAI0AAgGDAE4BzACe/5X//v+v/+f+Zf+gAOv/5QBhAOIApAANASYAuP+h/8b/HQBr/9//bACWAGEAFAB5AD0AWQDU/+D/Yf/p//D/s/+R/4QAMQBvABEAkQBfABQAJgDW/wwA8/8XALz/vf8zAFAAKwD1/zEAPwDJ/x0A7/8LAOX/FwDR//H/EQAdAO//6P8QAFEA2f8WABEAMgDy/xIA+f/s/xAALgDv////HQAvAPT/+f8iAAYAEgAFABoAGgD//w0A+f/0/xsAHgDx/9f/GAACAPH/8f8JAPf/GwALABEA7/8cAPT/CgD2//j/BQD8/+3/OgAgAAYA9f8PAN7/DgD9/9r/1//3/+3/9//1//b/8//5//f/AgAJAOf/+v8OAAMACwD9/+7/5f8eAAEA9//q//7/8P8WAP7/+//4/wIA+f8TAAIA9f/5/wcA+P8iAAgA9v/n/xoA//8gAAUABwDj/wAA9v8BAAUAFQDn/wMA7v8QABAAEQDm/wwA8f8aAAAABwDu/wcACgASAAEA7//w//f/BgARAAkA6P/3/wcADgAKAAYA4f/4/wYADgAAAPr/8P/9/xQACgAHAPn/7//9/xEAAgD+//L/8v/8/xUAAwDw//H/9f8CAAsA/v/q//L/+f8FAAYA/P/r//j///8GAAkA+//o//j/AQAIAP//+v/o//v/CAAIAPv/+P/w/wEACQAHAPj/+f/0/wIACwAFAPb/+f/4/wQACwACAPP/+f/+/wYACAD///L/+/8BAAYABQD9//P//P8FAAUAAgD7//T//f8HAAQA///7//f///8IAAMA/P/6//r/AQAIAAEA+v/6//3/AgAHAAAA+f/7/wAAAwAFAP7/+P/8/wIAAgACAP3/+f/9/wMAAwAAAPz/+v/+/wQAAgD+//z/+/8AAAQAAQD8//z//f8BAAQAAAD7//3///8BAAMA///7//3/AAACAAEA/v/7//7/AQABAAAA/v/9////AQAAAP///v/+////AAD/////////////////////////////",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD////////+//////8AAAAA/v/+/wAAAQD8//3/CQAJAP3/+v8PAAcApABlABkBkwCO/i//lfqa/HQAcf/3BdkCzwJcBCMC0wMN/9/9wgI7AaECYfxV/Tf83vhn/xrt8Owx/8n7cgHABYb43QcZDh4WugNrA7P74gHu/9z/zv0t/acCiQHY/iv4qQOl/ysCE/0//XT9Sf4O//j9xfupAn394gHO+rsCXAFIAxQC9wIXBgcD2AQuAnb/9gJh/6wAVfxEAI4Bvf7oAFv/bALsAMQBe/88/joAT/4dAH39/v9LAXn/gwDI//QBdABcAA0A7f4lAMn///+9/tv/iABp/13/pP/dALv/w/8MAHv//f+y/6////7U/5AAZP+Z/8r/nQDR/5r/DwDr/xAA4v+s/3z/+P9uAOv/t/82AGcAHgCb/yQAFQBGAM7/CgD3/xoAegAaAOz/CgBHAA8Adv8/AAAABQC2/xIAAAA7ABQAKgCj/z4AAQAXAJz/JAADAAcA8f/1/2AAAQAlAPD/NgDx/1wA7v/4/wMAZADv//3/HQAkAFoA8P9FAPv/FgBIAPf/WQAHAEUACQD0/xIAQwDu/wMAwP9VALn/XwCw/yEA5f8sAPj/FgDD/1YAyv8rAOX/HQDo//j/IQAQACAAHwD9/yQAHQBAABgABQAiAAUAKAD3/wkACwAKAAMABwAJAPb/+f8GAOr/JQAHABMA6P8TAA4AGgD//woA8/8ZAP//GADu/w0A9v8SAAMABwD4/wQA5P8XAAQACgDq/wUA+/8VAAcACADs/xIAAAATAPH/+v/1//T/7f///+z/+v/y/+//9/8KAAcACgAJAPT/BAAKAAAABgAIAPL/9v8KAAMABAACAPr/9v8OAAIA+P/x//v/+f8MAPb/+P/w/wQA9f8MAPn////7/woA/v8PAAEAAgD1/xAAAQAPAP//AwD//xQABwALAAAABgADABAAAgAHAAAACAABAA8ABQAFAAMABwAEAA4ABwADAAEACQAFAAoAAwD//wAACQADAAUAAQD/////CAABAAMAAAD/////BwACAAEAAAD/////BwACAP7///8BAAAABgABAP7///8CAAAABAAAAP7///8DAAAAAwAAAP3///8DAAAAAQAAAP3//v8EAAAAAAD+//////8EAP/////+/wAA/v8EAP/////+/wEA/v8EAP///v/+/wIA//8DAP///v/+/wIA//8BAP///v/+/wMA//8BAP/////+/wMA//8AAP//AAD+/wQA//8AAP7/AQD//wIA////////AQD//wIA////////AQAAAAEAAAAAAP//AQD//wEAAAAAAP//AQAAAAEAAAAAAAAA",
                      "UklGRiQEAABXQVZFZm10IBAAAAABAAIAgLsAAADuAgAEABAAZGF0YQAEAAD+/wAA+v8AAPz/AAD//wAA/f8AAAEAAAD+/wAACQAAAAQAAAAZAAAAtgAAAFsBAABW/gAAH/oAAGcBAABoBwAAlAAAAO3/AAARAQAA+wIAAEoEAACe/gAAiv4AALD0AADJ8wAAkQQAAF34AABi8QAAPQAAAAH2AAD19AAADAMAAJwGAACTEAAA0AwAAJkHAACOBwAAuQEAANcDAAC6AgAAHwUAAHEFAAB0AwAAbgEAADz+AADYAQAAGAAAAJwCAADgAAAA//0AAMn+AAAT/AAAwP8AAOn9AAAJAAAAewEAAOn+AACN/wAAOv0AAO3+AADN/gAAcP8AACj/AACq/gAA+f4AAML9AACa/wAA/f4AAN7/AABo/wAA6/4AAE//AAAC/wAAEQAAAHX/AAB0AAAA5f8AAEwAAAB3AAAA5/8AAMIAAABCAAAAzgAAAE8AAAB3AAAAKAAAADMAAACqAAAALwAAAK4AAAASAAAAVgAAACgAAAAtAAAATAAAAP3/AAA7AAAA2/8AACQAAADw/wAALQAAADEAAAAlAAAAbAAAADMAAABUAAAAEAAAACgAAAD1/wAA9v8AAPr/AADu/wAALgAAABIAAABUAAAARAAAAGUAAABGAAAAOAAAAGAAAAAuAAAARQAAACEAAAAfAAAAAAAAAAkAAAAQAAAAAwAAABIAAADs/wAAEAAAAAYAAAASAAAAIgAAABEAAAADAAAABAAAAA8AAAD4/wAAHQAAAAsAAAAIAAAADgAAAP//AAAcAAAADwAAAAYAAAASAAAAFwAAAAMAAAAYAAAAEgAAAPr/AAAQAAAADQAAAAoAAAD3/wAABgAAAPb/AADf/wAA/v8AAPL/AAD6/wAAFAAAAAQAAAAEAAAAGwAAAAEAAAAMAAAAIAAAAAIAAAAdAAAAGAAAAAIAAAAcAAAAEgAAAAcAAAAeAAAADwAAAAQAAAAeAAAABAAAAAYAAAAZAAAAAQAAAA4AAAATAAAA/v8AAAoAAAAOAAAA+/8AAAsAAAAJAAAA+f8AAAsAAAABAAAA+f8AAAoAAAD9/wAA+v8AAAcAAAD5/wAA+v8AAAUAAAD3/wAA/f8AAAQAAAD2/wAAAAAAAAEAAAD3/wAAAgAAAAAAAAD4/wAAAwAAAP7/AAD6/wAABAAAAP3/AAD8/wAABAAAAPv/AAD+/wAAAwAAAPv/AAD//wAAAQAAAPv/AAAAAAAAAAAAAPv/AAACAAAA//8AAPz/AAACAAAA/v8AAP3/AAACAAAA/f8AAP7/AAABAAAA/f8AAP//AAABAAAA/f8AAAAAAAAAAAAA/v8AAAEAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                    ];
                  },
                  function (A, t, e) {
                    "use strict";
                    (t.getBrowserInfo = function () {
                      const A = navigator.userAgent;
                      let t,
                        e =
                          A.match(
                            /(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d\.]+)/i
                          ) || [];
                      if (/trident/i.test(e[1]))
                        return (
                          (t = /\brv[ :]+(\d+)/g.exec(A) || []),
                          {
                            name: "IE",
                            version: t[1] || "",
                          }
                        );
                      if (
                        "Chrome" === e[1] &&
                        ((t = A.match(/\bOPR|Edge\/(\d+)/)), null != t)
                      )
                        return {
                          name: "Opera",
                          version: t[1],
                        };
                      (e = e[2]
                        ? [e[1], e[2]]
                        : [navigator.appName, navigator.appVersion, "-?"]),
                        null != (t = A.match(/version\/([\d.]+)/i)) &&
                          e.splice(1, 1, t[1]);
                      let i = A.match(/android|ipad|iphone/i);
                      return (
                        i || (i = A.match(/cros|linux|mac os x|windows/i)),
                        {
                          name: e[0],
                          version: e[1],
                          platform: i ? i[0] : "unknown",
                        }
                      );
                    }),
                      (t.patchSafari = function () {
                        window.webkitAudioContext &&
                          window.webkitOfflineAudioContext &&
                          ((window.AudioContext = window.webkitAudioContext),
                          (window.OfflineAudioContext =
                            window.webkitOfflineAudioContext));
                      });
                  },
                  function (A, t, e) {
                    "use strict";
                    A.exports = "1.0.6";
                  },
                ]);
              }),
                (A.exports = i());
            },
            function (A, t, e) {
              "use strict";
              A.exports = "0.0.4";
            },
          ]);
        }),
          (A.exports = t());
      },
      "./src/resonance-audio-room.js": (A, t, e) => {
        const { ResonanceAudio: i } = e(
            "./node_modules/resonance-audio/build/resonance-audio.js"
          ),
          { onceWhenLoaded: n, getBoundingBox: s } = e("./src/utils.js"),
          o = Object.keys(i.Utils.ROOM_MATERIAL_COEFFICIENTS),
          r = "audio-room";
        AFRAME.registerComponent("resonance-audio-room", {
          dependencies: ["position", "rotation"],
          schema: {
            width: {
              type: "number",
              default: i.Utils.DEFAULT_ROOM_DIMENSIONS.width,
            },
            height: {
              type: "number",
              default: i.Utils.DEFAULT_ROOM_DIMENSIONS.height,
            },
            depth: {
              type: "number",
              default: i.Utils.DEFAULT_ROOM_DIMENSIONS.depth,
            },
            ambisonicOrder: {
              type: "int",
              default: i.Utils.DEFAULT_AMBISONIC_ORDER,
            },
            speedOfSound: {
              type: "number",
              default: i.Utils.DEFAULT_SPEED_OF_SOUND,
            },
            left: {
              default: "brick-bare",
              oneOf: o,
            },
            right: {
              default: "brick-bare",
              oneOf: o,
            },
            front: {
              default: "brick-bare",
              oneOf: o,
            },
            back: {
              default: "brick-bare",
              oneOf: o,
            },
            down: {
              default: "brick-bare",
              oneOf: o,
            },
            up: {
              default: "brick-bare",
              oneOf: o,
            },
            visualize: {
              type: "boolean",
              default: !1,
            },
          },
          init() {
            (this.audioContext = new AudioContext()),
              (this.resonanceAudioScene = new i(this.audioContext)),
              this.resonanceAudioScene.output.connect(
                this.audioContext.destination
              ),
              (this.sources = []),
              this.exposeAPI(),
              this.updateRoomAcoustics(),
              (this.onEntityChange = this.onEntityChange.bind(this)),
              this.el.addEventListener("componentchanged", this.onEntityChange),
              n(this.el.sceneEl, () => {
                this.updateVisualization();
              });
          },
          update(A) {
            this.el.sceneEl.object3D.updateMatrixWorld(!0),
              this.updateRoomAcoustics(),
              this.toggleShowVisualization(A.visualize, this.data.visualize),
              this.updateVisualization();
          },
          tock() {
            this.resonanceAudioScene.setListenerFromMatrix(
              new THREE.Matrix4().multiplyMatrices(
                new THREE.Matrix4().copy(this.el.object3D.matrixWorld).invert(),
                this.el.sceneEl.camera.el.object3D.matrixWorld
              )
            );
          },
          remove() {
            [...this.sources].map((A) => A.leaveRoom()),
              this.toggleShowVisualization(this.data.visualize, !1),
              this.el.removeEventListener(
                "componentchanged",
                this.onEntityChange
              );
          },
          updateRoomAcoustics() {
            this.resonanceAudioScene.setRoomProperties(
              {
                width: this.data.width,
                height: this.data.height,
                depth: this.data.depth,
              },
              {
                left: this.data.left,
                right: this.data.right,
                front: this.data.front,
                back: this.data.back,
                down: this.data.down,
                up: this.data.up,
              }
            ),
              this.resonanceAudioScene.setAmbisonicOrder(
                this.data.ambisonicOrder
              ),
              this.resonanceAudioScene.setSpeedOfSound(this.data.speedOfSound);
          },
          toggleShowVisualization(A, t) {
            return (
              !A && t
                ? this.el.setObject3D(
                    r,
                    new THREE.Mesh(
                      new THREE.BoxBufferGeometry(
                        this.data.width,
                        this.data.height,
                        this.data.depth
                      ),
                      new THREE.MeshStandardMaterial({
                        color: 16777215,
                        metalness: 0,
                        wireframe: !0,
                        visible: !0,
                      })
                    )
                  )
                : A &&
                  !t &&
                  this.el.getObject3D(r) &&
                  this.el.removeObject3D(r),
              this
            );
          },
          updateVisualization() {
            const A = this.data,
              t = this.el.getObject3D(r),
              e = t && t.geometry.parameters;
            return (
              A.visualize &&
                t &&
                (A.width !== e.width ||
                  A.height !== e.height ||
                  A.depth !== e.depth) &&
                (this.toggleShowVisualization(!0, !1),
                this.toggleShowVisualization(!1, !0)),
              this
            );
          },
          onEntityChange(A) {
            ("position" !== A.detail.name && "rotation" !== A.detail.name) ||
              this.sources.forEach((A) => A.updateResonancePosition());
          },
          exposeAPI() {
            Object.defineProperties(this.el, {
              audioSources: {
                enumerable: !0,
                get: () => this.sources,
              },
              sounds: {
                enumerable: !0,
                get: () => this.sources.map((A) => A.sound),
              },
            });
          },
          store(A) {
            A &&
              A.components &&
              "resonance-audio-src" in A.components &&
              this.sources.push(A.components["resonance-audio-src"]);
          },
          forget(A) {
            const t = A.components["resonance-audio-src"];
            t &&
              this.sources.includes(t) &&
              this.sources.splice(this.sources.indexOf(t), 1);
          },
        }),
          AFRAME.registerComponent("resonance-audio-room-bb", {
            dependencies: ["position", "geometry"],
            schema: AFRAME.components["resonance-audio-room"].schema,
            init() {
              this.el.components["obj-model"] &&
              !this.el.components["obj-model"].model
                ? (this.setRoom(this.data),
                  this.el.addEventListener("model-loaded", () => {
                    this.setFromBB(),
                      this.el.emit("bounded-audioroom-loaded", {
                        room: this.el,
                      });
                  }))
                : (this.setFromBB(this.data),
                  this.el.emit("bounded-audioroom-loaded", {
                    room: this.el,
                  }));
            },
            setFromBB(A = {}) {
              const t = new THREE.Vector3();
              s(this.el.object3D).getSize(t),
                this.setRoom({
                  ...A,
                  width: t.x,
                  height: t.y,
                  depth: t.z,
                });
            },
            setRoom(A) {
              this.el.setAttribute("resonance-audio-room", A);
            },
          }),
          AFRAME.registerPrimitive("a-resonance-audio-room", {
            defaultComponents: {
              "resonance-audio-room": {},
            },
            mappings: {
              width: "resonance-audio-room.width",
              height: "resonance-audio-room.height",
              depth: "resonance-audio-room.depth",
              "ambisonic-order": "resonance-audio-room.ambisonicOrder",
              "speed-of-sound": "resonance-audio-room.speedOfSound",
              left: "resonance-audio-room.left",
              right: "resonance-audio-room.right",
              front: "resonance-audio-room.front",
              back: "resonance-audio-room.back",
              down: "resonance-audio-room.down",
              up: "resonance-audio-room.up",
              visualize: "resonance-audio-room.visualize",
            },
          });
      },
      "./src/resonance-audio-src.js": (A, t, e) => {
        const { ResonanceAudio: i } = e(
            "./node_modules/resonance-audio/build/resonance-audio.js"
          ),
          { isVec3Set: n, onceWhenLoaded: s } = e("./src/utils.js"),
          o = AFRAME.utils.debug("components:resonance-audio-src:warn"),
          r = "audio-src";
        AFRAME.registerComponent("resonance-audio-src", {
          dependencies: ["position", "rotation"],
          schema: {
            src: {
              type: "string",
            },
            room: {
              type: "string",
            },
            loop: {
              type: "boolean",
              default: !0,
            },
            autoplay: {
              type: "boolean",
              default: !0,
            },
            gain: {
              type: "number",
              default: i.Utils.DEFAULT_SOURCE_GAIN,
            },
            maxDistance: {
              type: "number",
              default: i.Utils.DEFAULT_MAX_DISTANCE,
            },
            minDistance: {
              type: "number",
              default: i.Utils.DEFAULT_MIN_DISTANCE,
            },
            directivityPattern: {
              type: "vec2",
              default: {
                x: i.Utils.DEFAULT_DIRECTIVITY_ALPHA,
                y: i.Utils.DEFAULT_DIRECTIVITY_SHARPNESS,
              },
            },
            sourceWidth: {
              type: "number",
              default: i.Utils.DEFAULT_SOURCE_WIDTH,
            },
            rolloff: {
              type: "string",
              oneOff: i.Utils.ATTENUATION_ROLLOFFS,
              default: i.Utils.DEFAULT_ATTENUATION_ROLLOFF,
            },
            position: {
              type: "vec3",
              default: new THREE.Vector3(1 / 0, 1 / 0, 1 / 0),
            },
            rotation: {
              type: "vec3",
              default: new THREE.Vector3(1 / 0, 1 / 0, 1 / 0),
            },
            visualize: {
              type: "boolean",
              default: !1,
            },
          },
          init() {
            (this.room = null),
              (this.connected = {
                element: !1,
                stream: !1,
              }),
              (this.sound = null),
              (this.resonance = null),
              (this.defaultAudioEl = null),
              (this.mediaAudioSourceNodes = new Map()),
              (this.onEntityChange = this.onEntityChange.bind(this)),
              this.el.addEventListener("componentchanged", this.onEntityChange);
          },
          update(A) {
            this.room &&
              A.src !== this.data.src &&
              this.connectSrc(this.data.src),
              this.el.sceneEl.object3D.updateMatrixWorld(!0),
              this.updateSoundSettings(),
              this.updatePlaybackSettings(),
              this.toggleShowVisualization(A.visualize, this.data.visualize),
              this.updateResonancePosition().updateVisualization();
            const t = this.getRoomChoice();
            (t && t.components && t.components["resonance-audio-room"]) !==
              this.room &&
              s(this.el.sceneEl, () => {
                const A = this.leaveRoom(),
                  e = this.enter(t);
                this.connectSrc(this.data.src),
                  this.updateSoundSettings(),
                  this.el.sceneEl.object3D.updateMatrixWorld(!0),
                  this.updateResonancePosition().updateVisualization(),
                  A &&
                    this.el.emit("audioroom-left", {
                      src: this.el,
                      room: A.el,
                    }),
                  e &&
                    this.el.emit("audioroom-entered", {
                      src: this.el,
                      room: e.el,
                    });
              });
          },
          remove() {
            this.el.removeEventListener(
              "componentchanged",
              this.onEntityChange
            ),
              this.disconnect();
            const A = this.leaveRoom();
            this.toggleShowVisualization(this.data.visualize, !1),
              A &&
                this.el.emit("audioroom-left", {
                  src: this.el,
                  room: A.el,
                });
          },
          tock: function () {
            var el = this.el;
            var A = this.el;
            
            this.room &&
              A.src !== this.data.src &&
              this.connectSrc(this.data.src),
              this.el.sceneEl.object3D.updateMatrixWorld(!0),
              this.updateSoundSettings(),
              this.updatePlaybackSettings(),
              this.toggleShowVisualization(A.visualize, this.data.visualize),
              this.updateResonancePosition().updateVisualization();
            const t = this.getRoomChoice();
            (t && t.components && t.components["resonance-audio-room"]) !==
              this.room &&
              s(this.el.sceneEl, () => {
                const A = this.leaveRoom(),
                  e = this.enter(t);
                this.connectSrc(this.data.src),
                  this.updateSoundSettings(),
                  this.el.sceneEl.object3D.updateMatrixWorld(!0),
                  this.updateResonancePosition().updateVisualization(),
                  A &&
                    this.el.emit("audioroom-left", {
                      src: this.el,
                      room: A.el,
                    }),
                  e &&
                    this.el.emit("audioroom-entered", {
                      src: this.el,
                      room: e.el,
                    });
              }); 
          },
          updateSoundSettings() {
            const A = this.resonance;
            A &&
              (A.setGain(this.data.gain),
              A.setMinDistance(this.data.minDistance),
              A.setMaxDistance(this.data.maxDistance),
              A.setDirectivityPattern(
                this.data.directivityPattern.x,
                this.data.directivityPattern.y
              ),
              A.setSourceWidth(this.data.sourceWidth),
              A.setRolloff(this.data.rolloff));
          },
          updatePlaybackSettings() {
            this.connected.element &&
              (this.data.loop
                ? this.sound.setAttribute("loop", "true")
                : this.sound.removeAttribute("loop"),
              this.data.autoplay
                ? this.sound.setAttribute("autoplay", "true")
                : this.sound.removeAttribute("autoplay"));
          },
          updateResonancePosition() {
            return (
              this.resonance &&
                this.resonance.setFromMatrix(this.getMatrixRoom()),
              this
            );
          },
          toggleShowVisualization(A, t) {
            !A && t
              ? this.el.setObject3D(
                  r,
                  new THREE.Mesh(
                    new THREE.SphereBufferGeometry(
                      this.data.minDistance,
                      36,
                      18
                    ),
                    new THREE.MeshStandardMaterial({
                      color: 16777215,
                      metalness: 0,
                      wireframe: !0,
                      visible: !0,
                    })
                  )
                )
              : A && !t && this.el.getObject3D(r) && this.el.removeObject3D(r);
          },
          updateVisualization() {
            const A = this.data;
            let t = this.el.getObject3D(r);
            if (A.visualize && t) {
              t.geometry.parameters.radius !== this.data.minDistance &&
                (this.toggleShowVisualization(!0, !1),
                this.toggleShowVisualization(!1, !0),
                (t = this.el.getObject3D(r)));
              const A = this.getMatrixLocal();
              t.position.setFromMatrixPosition(A),
                t.quaternion.setFromRotationMatrix(A),
                t.material.color.setHex(this.room ? 16777215 : 16711680),
                (t.matrixWorldNeedsUpdate = !0);
            }
            return this;
          },
          onEntityChange(A) {
            ("position" !== A.detail.name && "rotation" !== A.detail.name) ||
              (this.el.sceneEl.object3D.updateMatrixWorld(!0),
              this.updateResonancePosition().updateVisualization());
          },
          getRoomChoice() {
            const A = this.data.room;
            return A
              ? A instanceof AFRAME.AEntity
                ? A
                : "string" == typeof A
                ? document.querySelector(A)
                : this.el.parentNode
              : this.el.parentNode;
          },
          getMatrixWorld() {
            return n(this.data.position) || n(this.data.rotation)
              ? new THREE.Matrix4().multiplyMatrices(
                  this.el.parentNode.object3D.matrixWorld,
                  this.getMatrixLocalCustom()
                )
              : new THREE.Matrix4().copy(this.el.object3D.matrixWorld);
          },
          getMatrixLocalCustom() {
            let A, t;
            if (
              ((A = n(this.data.position)
                ? new THREE.Vector3(
                    this.data.position.x,
                    this.data.position.y,
                    this.data.position.z
                  )
                : this.el.object3D.position),
              n(this.data.rotation))
            ) {
              let A = [
                this.data.rotation.x,
                this.data.rotation.y,
                this.data.rotation.z,
              ].map(THREE.Math.degToRad);
              t = new THREE.Quaternion().setFromEuler(
                new THREE.Euler().reorder("YXZ").fromArray(A)
              );
            } else t = this.el.object3D.quaternion;
            return new THREE.Matrix4().compose(A, t, {
              x: 1,
              y: 1,
              z: 1,
            });
          },
          getMatrixRoom() {
            return this.getMatrixWorld().premultiply(
              new THREE.Matrix4()
                .copy(this.room.el.object3D.matrixWorld)
                .invert()
            );
          },
          getMatrixLocal() {
            return this.getMatrixWorld().premultiply(
              new THREE.Matrix4().copy(this.el.object3D.matrixWorld).invert()
            );
          },
          enter(A) {
            return A && A.components && "resonance-audio-room" in A.components
              ? ((this.room = A.components["resonance-audio-room"]),
                this.room.store(this.el),
                (this.resonance = this.room.resonanceAudioScene.createSource()),
                (this.defaultAudioEl = document.createElement("audio")),
                this.mediaAudioSourceNodes.set(
                  this.defaultAudioEl,
                  this.room.audioContext.createMediaElementSource(
                    this.defaultAudioEl
                  )
                ),
                this.room)
              : (o("can't enter audio room because it is no audio room"), !1);
          },
          leaveRoom() {
            if (!this.room) return !1;
            const A = this.room;
            return (
              this.room.forget(this.el),
              (this.room = null),
              (this.resonance = null),
              this.mediaAudioSourceNodes.delete(this.defaultAudioEl),
              (this.defaultAudioEl = null),
              A
            );
          },
          connect(A, t) {
            return (
              !!A &&
              ((this.sound = A),
              this.mediaAudioSourceNodes.has(this.sound) ||
                this.mediaAudioSourceNodes.set(
                  this.sound,
                  t.call(this.room.audioContext, this.sound)
                ),
              this.mediaAudioSourceNodes
                .get(this.sound)
                .connect(this.resonance.input),
              !0)
            );
          },
          connectWithElement(A) {
            (this.connected.element = this.connect(
              A,
              this.room.audioContext.createMediaElementSource
            )),
              this.connected.element &&
                (this.sound.srcObject &&
                  o(
                    "can't use a HTMLMediaElement that contains a stream. Connect the stream itself."
                  ),
                this.updatePlaybackSettings(),
                this.sound.getAttribute("autoplay") &&
                  this.sound
                    .play()
                    .then()
                    .catch((A) => o(A)));
          },
          connectWithStream(A) {
            if (
              ((this.connected.stream = this.connect(
                A,
                this.room.audioContext.createMediaStreamSource
              )),
              !this.connected.stream)
            )
              return;
            const t = () =>
              o(
                "can't use play/pause on MediaStream. Manipulate the stream's source instead"
              );
            (this.sound.play = t), (this.sound.pause = t);
          },
          disconnect() {
            this.sound &&
              this.resonance &&
              (this.mediaAudioSourceNodes
                .get(this.sound)
                .disconnect(this.resonance.input),
              (this.sound = null)),
              (this.connected.element = !1),
              (this.connected.stream = !1);
          },
          connectSrc(A) {
            const t =
              "invalid src value. Must be element id string, resource string, HTMLMediaElement or MediaStream";
            let e;
            if ((this.disconnect(), A))
              if (A instanceof MediaStream) this.connectWithStream(A);
              else if (A instanceof HTMLMediaElement)
                this.connectWithElement(A);
              else {
                if ("string" != typeof A) throw new TypeError(t);
                if (
                  ("#" === A.charAt(0)
                    ? (e = document.getElementById(A.substr(1)))
                    : ((e = this.defaultAudioEl), e.setAttribute("src", A)),
                  !e)
                )
                  throw new TypeError(t);
                this.connectWithElement(e);
              }
            else;
            this.data.src = e || A;
          },
        }),
          AFRAME.registerPrimitive("a-resonance-audio-src", {
            defaultComponents: {
              "resonance-audio-src": {},
            },
            mappings: {
              src: "resonance-audio-src.src",
              room: "resonance-audio-src.room",
              loop: "resonance-audio-src.loop",
              autoplay: "resonance-audio-src.autoplay",
              gain: "resonance-audio-src.gain",
              "min-distance": "resonance-audio-src.minDistance",
              "max-distance": "resonance-audio-src.maxDistaonce",
              "directivity-pattern": "resonance-audio-src.directivityPattern",
              "source-width": "resonance-audio-src.sourceWidth",
              rolloff: "resonance-audio-src.rolloff",
              visualize: "resonance-audio-src.visualize",
            },
          });
      },
      "./src/utils.js": (A) => {
        (A.exports.isVec3Set = (A) =>
          "object" == typeof A &&
          !isNaN(parseFloat(A.x)) &&
          isFinite(A.x) &&
          !isNaN(parseFloat(A.y)) &&
          isFinite(A.y) &&
          !isNaN(parseFloat(A.z)) &&
          isFinite(A.z)),
          (A.exports.onceWhenLoaded = (A, t) => {
            if (A.hasLoaded) t();
            else {
              const e = function (A) {
                t(), A.target.removeEventListener("loaded", e);
              };
              A.addEventListener("loaded", e);
            }
          }),
          (A.exports.getBoundingBox = (A) => {
            A.updateMatrix();
            const t = A.matrix,
              e = A.matrixAutoUpdate;
            A.updateMatrixWorld();
            const i = new THREE.Matrix4();
            null !== A.parent && i.copy(A.parent.matrixWorld).invert(),
              (A.matrix = i),
              (A.matrixAutoUpdate = !1),
              A.updateMatrixWorld();
            const n = new THREE.Box3();
            return (
              n.setFromObject(A),
              (A.matrix = t),
              (A.matrixAutoUpdate = e),
              A.updateMatrixWorld(),
              n
            );
          }),
          (A.exports.aframeVersion = () => AFRAME.version);
      },
    },
    t = {};

  function e(i) {
    var n = t[i];
    if (void 0 !== n) return n.exports;
    var s = (t[i] = {
      exports: {},
    });
    return A[i].call(s.exports, s, s.exports, e), s.exports;
  }
  (() => {
    if ("undefined" == typeof AFRAME)
      throw new Error(
        "Component attempted to register before AFRAME was available. Did you include A-Frame?"
      );
    e("./src/resonance-audio-room.js"), e("./src/resonance-audio-src.js");
  })();
})();
//# sourceMappingURL=aframe-resonance-audio-component.min.js.map
